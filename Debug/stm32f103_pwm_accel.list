
stm32f103_pwm_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b310  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  0800b4f8  0800b4f8  0001b4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c160  0800c160  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800c160  0800c160  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c160  0800c160  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000078  0800c1e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20000424  0800c1e0  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a61  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba8  00000000  00000000  00038b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e715  00000000  00000000  0003ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e45f  00000000  00000000  0005d665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab371  00000000  00000000  0007bac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  00126e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b4e0 	.word	0x0800b4e0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800b4e0 	.word	0x0800b4e0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_fmul>:
 800048c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000490:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000494:	bf1e      	ittt	ne
 8000496:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800049a:	ea92 0f0c 	teqne	r2, ip
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d06f      	beq.n	8000584 <__aeabi_fmul+0xf8>
 80004a4:	441a      	add	r2, r3
 80004a6:	ea80 0c01 	eor.w	ip, r0, r1
 80004aa:	0240      	lsls	r0, r0, #9
 80004ac:	bf18      	it	ne
 80004ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004b2:	d01e      	beq.n	80004f2 <__aeabi_fmul+0x66>
 80004b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004c0:	fba0 3101 	umull	r3, r1, r0, r1
 80004c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004cc:	bf3e      	ittt	cc
 80004ce:	0049      	lslcc	r1, r1, #1
 80004d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004d4:	005b      	lslcc	r3, r3, #1
 80004d6:	ea40 0001 	orr.w	r0, r0, r1
 80004da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004de:	2afd      	cmp	r2, #253	; 0xfd
 80004e0:	d81d      	bhi.n	800051e <__aeabi_fmul+0x92>
 80004e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ea:	bf08      	it	eq
 80004ec:	f020 0001 	biceq.w	r0, r0, #1
 80004f0:	4770      	bx	lr
 80004f2:	f090 0f00 	teq	r0, #0
 80004f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004fa:	bf08      	it	eq
 80004fc:	0249      	lsleq	r1, r1, #9
 80004fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000502:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000506:	3a7f      	subs	r2, #127	; 0x7f
 8000508:	bfc2      	ittt	gt
 800050a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800050e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000512:	4770      	bxgt	lr
 8000514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	3a01      	subs	r2, #1
 800051e:	dc5d      	bgt.n	80005dc <__aeabi_fmul+0x150>
 8000520:	f112 0f19 	cmn.w	r2, #25
 8000524:	bfdc      	itt	le
 8000526:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800052a:	4770      	bxle	lr
 800052c:	f1c2 0200 	rsb	r2, r2, #0
 8000530:	0041      	lsls	r1, r0, #1
 8000532:	fa21 f102 	lsr.w	r1, r1, r2
 8000536:	f1c2 0220 	rsb	r2, r2, #32
 800053a:	fa00 fc02 	lsl.w	ip, r0, r2
 800053e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000542:	f140 0000 	adc.w	r0, r0, #0
 8000546:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800054a:	bf08      	it	eq
 800054c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000550:	4770      	bx	lr
 8000552:	f092 0f00 	teq	r2, #0
 8000556:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800055a:	bf02      	ittt	eq
 800055c:	0040      	lsleq	r0, r0, #1
 800055e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000562:	3a01      	subeq	r2, #1
 8000564:	d0f9      	beq.n	800055a <__aeabi_fmul+0xce>
 8000566:	ea40 000c 	orr.w	r0, r0, ip
 800056a:	f093 0f00 	teq	r3, #0
 800056e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000572:	bf02      	ittt	eq
 8000574:	0049      	lsleq	r1, r1, #1
 8000576:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800057a:	3b01      	subeq	r3, #1
 800057c:	d0f9      	beq.n	8000572 <__aeabi_fmul+0xe6>
 800057e:	ea41 010c 	orr.w	r1, r1, ip
 8000582:	e78f      	b.n	80004a4 <__aeabi_fmul+0x18>
 8000584:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000588:	ea92 0f0c 	teq	r2, ip
 800058c:	bf18      	it	ne
 800058e:	ea93 0f0c 	teqne	r3, ip
 8000592:	d00a      	beq.n	80005aa <__aeabi_fmul+0x11e>
 8000594:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000598:	bf18      	it	ne
 800059a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800059e:	d1d8      	bne.n	8000552 <__aeabi_fmul+0xc6>
 80005a0:	ea80 0001 	eor.w	r0, r0, r1
 80005a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a8:	4770      	bx	lr
 80005aa:	f090 0f00 	teq	r0, #0
 80005ae:	bf17      	itett	ne
 80005b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005b4:	4608      	moveq	r0, r1
 80005b6:	f091 0f00 	teqne	r1, #0
 80005ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005be:	d014      	beq.n	80005ea <__aeabi_fmul+0x15e>
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d101      	bne.n	80005ca <__aeabi_fmul+0x13e>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	d10f      	bne.n	80005ea <__aeabi_fmul+0x15e>
 80005ca:	ea93 0f0c 	teq	r3, ip
 80005ce:	d103      	bne.n	80005d8 <__aeabi_fmul+0x14c>
 80005d0:	024b      	lsls	r3, r1, #9
 80005d2:	bf18      	it	ne
 80005d4:	4608      	movne	r0, r1
 80005d6:	d108      	bne.n	80005ea <__aeabi_fmul+0x15e>
 80005d8:	ea80 0001 	eor.w	r0, r0, r1
 80005dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e8:	4770      	bx	lr
 80005ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005f2:	4770      	bx	lr

080005f4 <__aeabi_drsub>:
 80005f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e002      	b.n	8000600 <__adddf3>
 80005fa:	bf00      	nop

080005fc <__aeabi_dsub>:
 80005fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000600 <__adddf3>:
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000606:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800060a:	ea94 0f05 	teq	r4, r5
 800060e:	bf08      	it	eq
 8000610:	ea90 0f02 	teqeq	r0, r2
 8000614:	bf1f      	itttt	ne
 8000616:	ea54 0c00 	orrsne.w	ip, r4, r0
 800061a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800061e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000622:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000626:	f000 80e2 	beq.w	80007ee <__adddf3+0x1ee>
 800062a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800062e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000632:	bfb8      	it	lt
 8000634:	426d      	neglt	r5, r5
 8000636:	dd0c      	ble.n	8000652 <__adddf3+0x52>
 8000638:	442c      	add	r4, r5
 800063a:	ea80 0202 	eor.w	r2, r0, r2
 800063e:	ea81 0303 	eor.w	r3, r1, r3
 8000642:	ea82 0000 	eor.w	r0, r2, r0
 8000646:	ea83 0101 	eor.w	r1, r3, r1
 800064a:	ea80 0202 	eor.w	r2, r0, r2
 800064e:	ea81 0303 	eor.w	r3, r1, r3
 8000652:	2d36      	cmp	r5, #54	; 0x36
 8000654:	bf88      	it	hi
 8000656:	bd30      	pophi	{r4, r5, pc}
 8000658:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800065c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000660:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000664:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000668:	d002      	beq.n	8000670 <__adddf3+0x70>
 800066a:	4240      	negs	r0, r0
 800066c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000670:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000674:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000678:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800067c:	d002      	beq.n	8000684 <__adddf3+0x84>
 800067e:	4252      	negs	r2, r2
 8000680:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000684:	ea94 0f05 	teq	r4, r5
 8000688:	f000 80a7 	beq.w	80007da <__adddf3+0x1da>
 800068c:	f1a4 0401 	sub.w	r4, r4, #1
 8000690:	f1d5 0e20 	rsbs	lr, r5, #32
 8000694:	db0d      	blt.n	80006b2 <__adddf3+0xb2>
 8000696:	fa02 fc0e 	lsl.w	ip, r2, lr
 800069a:	fa22 f205 	lsr.w	r2, r2, r5
 800069e:	1880      	adds	r0, r0, r2
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80006a8:	1880      	adds	r0, r0, r2
 80006aa:	fa43 f305 	asr.w	r3, r3, r5
 80006ae:	4159      	adcs	r1, r3
 80006b0:	e00e      	b.n	80006d0 <__adddf3+0xd0>
 80006b2:	f1a5 0520 	sub.w	r5, r5, #32
 80006b6:	f10e 0e20 	add.w	lr, lr, #32
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006c0:	bf28      	it	cs
 80006c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006c6:	fa43 f305 	asr.w	r3, r3, r5
 80006ca:	18c0      	adds	r0, r0, r3
 80006cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d4:	d507      	bpl.n	80006e6 <__adddf3+0xe6>
 80006d6:	f04f 0e00 	mov.w	lr, #0
 80006da:	f1dc 0c00 	rsbs	ip, ip, #0
 80006de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006ea:	d31b      	bcc.n	8000724 <__adddf3+0x124>
 80006ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006f0:	d30c      	bcc.n	800070c <__adddf3+0x10c>
 80006f2:	0849      	lsrs	r1, r1, #1
 80006f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006fc:	f104 0401 	add.w	r4, r4, #1
 8000700:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000704:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000708:	f080 809a 	bcs.w	8000840 <__adddf3+0x240>
 800070c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000710:	bf08      	it	eq
 8000712:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000716:	f150 0000 	adcs.w	r0, r0, #0
 800071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071e:	ea41 0105 	orr.w	r1, r1, r5
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000728:	4140      	adcs	r0, r0
 800072a:	eb41 0101 	adc.w	r1, r1, r1
 800072e:	3c01      	subs	r4, #1
 8000730:	bf28      	it	cs
 8000732:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000736:	d2e9      	bcs.n	800070c <__adddf3+0x10c>
 8000738:	f091 0f00 	teq	r1, #0
 800073c:	bf04      	itt	eq
 800073e:	4601      	moveq	r1, r0
 8000740:	2000      	moveq	r0, #0
 8000742:	fab1 f381 	clz	r3, r1
 8000746:	bf08      	it	eq
 8000748:	3320      	addeq	r3, #32
 800074a:	f1a3 030b 	sub.w	r3, r3, #11
 800074e:	f1b3 0220 	subs.w	r2, r3, #32
 8000752:	da0c      	bge.n	800076e <__adddf3+0x16e>
 8000754:	320c      	adds	r2, #12
 8000756:	dd08      	ble.n	800076a <__adddf3+0x16a>
 8000758:	f102 0c14 	add.w	ip, r2, #20
 800075c:	f1c2 020c 	rsb	r2, r2, #12
 8000760:	fa01 f00c 	lsl.w	r0, r1, ip
 8000764:	fa21 f102 	lsr.w	r1, r1, r2
 8000768:	e00c      	b.n	8000784 <__adddf3+0x184>
 800076a:	f102 0214 	add.w	r2, r2, #20
 800076e:	bfd8      	it	le
 8000770:	f1c2 0c20 	rsble	ip, r2, #32
 8000774:	fa01 f102 	lsl.w	r1, r1, r2
 8000778:	fa20 fc0c 	lsr.w	ip, r0, ip
 800077c:	bfdc      	itt	le
 800077e:	ea41 010c 	orrle.w	r1, r1, ip
 8000782:	4090      	lslle	r0, r2
 8000784:	1ae4      	subs	r4, r4, r3
 8000786:	bfa2      	ittt	ge
 8000788:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800078c:	4329      	orrge	r1, r5
 800078e:	bd30      	popge	{r4, r5, pc}
 8000790:	ea6f 0404 	mvn.w	r4, r4
 8000794:	3c1f      	subs	r4, #31
 8000796:	da1c      	bge.n	80007d2 <__adddf3+0x1d2>
 8000798:	340c      	adds	r4, #12
 800079a:	dc0e      	bgt.n	80007ba <__adddf3+0x1ba>
 800079c:	f104 0414 	add.w	r4, r4, #20
 80007a0:	f1c4 0220 	rsb	r2, r4, #32
 80007a4:	fa20 f004 	lsr.w	r0, r0, r4
 80007a8:	fa01 f302 	lsl.w	r3, r1, r2
 80007ac:	ea40 0003 	orr.w	r0, r0, r3
 80007b0:	fa21 f304 	lsr.w	r3, r1, r4
 80007b4:	ea45 0103 	orr.w	r1, r5, r3
 80007b8:	bd30      	pop	{r4, r5, pc}
 80007ba:	f1c4 040c 	rsb	r4, r4, #12
 80007be:	f1c4 0220 	rsb	r2, r4, #32
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	fa01 f304 	lsl.w	r3, r1, r4
 80007ca:	ea40 0003 	orr.w	r0, r0, r3
 80007ce:	4629      	mov	r1, r5
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	fa21 f004 	lsr.w	r0, r1, r4
 80007d6:	4629      	mov	r1, r5
 80007d8:	bd30      	pop	{r4, r5, pc}
 80007da:	f094 0f00 	teq	r4, #0
 80007de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007e2:	bf06      	itte	eq
 80007e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007e8:	3401      	addeq	r4, #1
 80007ea:	3d01      	subne	r5, #1
 80007ec:	e74e      	b.n	800068c <__adddf3+0x8c>
 80007ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007f2:	bf18      	it	ne
 80007f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007f8:	d029      	beq.n	800084e <__adddf3+0x24e>
 80007fa:	ea94 0f05 	teq	r4, r5
 80007fe:	bf08      	it	eq
 8000800:	ea90 0f02 	teqeq	r0, r2
 8000804:	d005      	beq.n	8000812 <__adddf3+0x212>
 8000806:	ea54 0c00 	orrs.w	ip, r4, r0
 800080a:	bf04      	itt	eq
 800080c:	4619      	moveq	r1, r3
 800080e:	4610      	moveq	r0, r2
 8000810:	bd30      	pop	{r4, r5, pc}
 8000812:	ea91 0f03 	teq	r1, r3
 8000816:	bf1e      	ittt	ne
 8000818:	2100      	movne	r1, #0
 800081a:	2000      	movne	r0, #0
 800081c:	bd30      	popne	{r4, r5, pc}
 800081e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000822:	d105      	bne.n	8000830 <__adddf3+0x230>
 8000824:	0040      	lsls	r0, r0, #1
 8000826:	4149      	adcs	r1, r1
 8000828:	bf28      	it	cs
 800082a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800082e:	bd30      	pop	{r4, r5, pc}
 8000830:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000834:	bf3c      	itt	cc
 8000836:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800083a:	bd30      	popcc	{r4, r5, pc}
 800083c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000840:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000844:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd30      	pop	{r4, r5, pc}
 800084e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000852:	bf1a      	itte	ne
 8000854:	4619      	movne	r1, r3
 8000856:	4610      	movne	r0, r2
 8000858:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800085c:	bf1c      	itt	ne
 800085e:	460b      	movne	r3, r1
 8000860:	4602      	movne	r2, r0
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	bf06      	itte	eq
 8000868:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800086c:	ea91 0f03 	teqeq	r1, r3
 8000870:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000874:	bd30      	pop	{r4, r5, pc}
 8000876:	bf00      	nop

08000878 <__aeabi_ui2d>:
 8000878:	f090 0f00 	teq	r0, #0
 800087c:	bf04      	itt	eq
 800087e:	2100      	moveq	r1, #0
 8000880:	4770      	bxeq	lr
 8000882:	b530      	push	{r4, r5, lr}
 8000884:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000888:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088c:	f04f 0500 	mov.w	r5, #0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	e750      	b.n	8000738 <__adddf3+0x138>
 8000896:	bf00      	nop

08000898 <__aeabi_i2d>:
 8000898:	f090 0f00 	teq	r0, #0
 800089c:	bf04      	itt	eq
 800089e:	2100      	moveq	r1, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	b530      	push	{r4, r5, lr}
 80008a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80008b0:	bf48      	it	mi
 80008b2:	4240      	negmi	r0, r0
 80008b4:	f04f 0100 	mov.w	r1, #0
 80008b8:	e73e      	b.n	8000738 <__adddf3+0x138>
 80008ba:	bf00      	nop

080008bc <__aeabi_f2d>:
 80008bc:	0042      	lsls	r2, r0, #1
 80008be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80008c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008ca:	bf1f      	itttt	ne
 80008cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008d8:	4770      	bxne	lr
 80008da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008de:	bf08      	it	eq
 80008e0:	4770      	bxeq	lr
 80008e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008e6:	bf04      	itt	eq
 80008e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008ec:	4770      	bxeq	lr
 80008ee:	b530      	push	{r4, r5, lr}
 80008f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008fc:	e71c      	b.n	8000738 <__adddf3+0x138>
 80008fe:	bf00      	nop

08000900 <__aeabi_ul2d>:
 8000900:	ea50 0201 	orrs.w	r2, r0, r1
 8000904:	bf08      	it	eq
 8000906:	4770      	bxeq	lr
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	f04f 0500 	mov.w	r5, #0
 800090e:	e00a      	b.n	8000926 <__aeabi_l2d+0x16>

08000910 <__aeabi_l2d>:
 8000910:	ea50 0201 	orrs.w	r2, r0, r1
 8000914:	bf08      	it	eq
 8000916:	4770      	bxeq	lr
 8000918:	b530      	push	{r4, r5, lr}
 800091a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800091e:	d502      	bpl.n	8000926 <__aeabi_l2d+0x16>
 8000920:	4240      	negs	r0, r0
 8000922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000926:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800092a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800092e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000932:	f43f aed8 	beq.w	80006e6 <__adddf3+0xe6>
 8000936:	f04f 0203 	mov.w	r2, #3
 800093a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800093e:	bf18      	it	ne
 8000940:	3203      	addne	r2, #3
 8000942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000946:	bf18      	it	ne
 8000948:	3203      	addne	r2, #3
 800094a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800094e:	f1c2 0320 	rsb	r3, r2, #32
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	fa01 fe03 	lsl.w	lr, r1, r3
 800095e:	ea40 000e 	orr.w	r0, r0, lr
 8000962:	fa21 f102 	lsr.w	r1, r1, r2
 8000966:	4414      	add	r4, r2
 8000968:	e6bd      	b.n	80006e6 <__adddf3+0xe6>
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__gesf2>:
 8000c68:	f04f 3cff 	mov.w	ip, #4294967295
 8000c6c:	e006      	b.n	8000c7c <__cmpsf2+0x4>
 8000c6e:	bf00      	nop

08000c70 <__lesf2>:
 8000c70:	f04f 0c01 	mov.w	ip, #1
 8000c74:	e002      	b.n	8000c7c <__cmpsf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__cmpsf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c8c:	bf18      	it	ne
 8000c8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c92:	d011      	beq.n	8000cb8 <__cmpsf2+0x40>
 8000c94:	b001      	add	sp, #4
 8000c96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c9a:	bf18      	it	ne
 8000c9c:	ea90 0f01 	teqne	r0, r1
 8000ca0:	bf58      	it	pl
 8000ca2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ca6:	bf88      	it	hi
 8000ca8:	17c8      	asrhi	r0, r1, #31
 8000caa:	bf38      	it	cc
 8000cac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cb0:	bf18      	it	ne
 8000cb2:	f040 0001 	orrne.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cbc:	d102      	bne.n	8000cc4 <__cmpsf2+0x4c>
 8000cbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cc2:	d105      	bne.n	8000cd0 <__cmpsf2+0x58>
 8000cc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cc8:	d1e4      	bne.n	8000c94 <__cmpsf2+0x1c>
 8000cca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cce:	d0e1      	beq.n	8000c94 <__cmpsf2+0x1c>
 8000cd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_cfrcmple>:
 8000cd8:	4684      	mov	ip, r0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	4661      	mov	r1, ip
 8000cde:	e7ff      	b.n	8000ce0 <__aeabi_cfcmpeq>

08000ce0 <__aeabi_cfcmpeq>:
 8000ce0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ce2:	f7ff ffc9 	bl	8000c78 <__cmpsf2>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	bf48      	it	mi
 8000cea:	f110 0f00 	cmnmi.w	r0, #0
 8000cee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cf0 <__aeabi_fcmpeq>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff fff4 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2001      	moveq	r0, #1
 8000cfc:	2000      	movne	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmplt>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffea 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d0c:	bf34      	ite	cc
 8000d0e:	2001      	movcc	r0, #1
 8000d10:	2000      	movcs	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmple>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffe0 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d20:	bf94      	ite	ls
 8000d22:	2001      	movls	r0, #1
 8000d24:	2000      	movhi	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_fcmpge>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff ffd2 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d34:	bf94      	ite	ls
 8000d36:	2001      	movls	r0, #1
 8000d38:	2000      	movhi	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmpgt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffc8 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_f2iz>:
 8000d54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d5c:	d30f      	bcc.n	8000d7e <__aeabi_f2iz+0x2a>
 8000d5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d66:	d90d      	bls.n	8000d84 <__aeabi_f2iz+0x30>
 8000d68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d74:	fa23 f002 	lsr.w	r0, r3, r2
 8000d78:	bf18      	it	ne
 8000d7a:	4240      	negne	r0, r0
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2iz+0x3a>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d105      	bne.n	8000d9a <__aeabi_f2iz+0x46>
 8000d8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d98:	4770      	bx	lr
 8000d9a:	f04f 0000 	mov.w	r0, #0
 8000d9e:	4770      	bx	lr

08000da0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <MX_ADC1_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dde:	f002 f813 	bl	8002e08 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f001 f9a5 	bl	8002136 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dfe:	f002 f9a5 	bl	800314c <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e08:	f001 f995 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000170 	.word	0x20000170
 8000e18:	40012400 	.word	0x40012400

08000e1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_ADC_MspInit+0x6c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d121      	bne.n	8000e80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_POSITION_Pin;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_POSITION_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_ADC_MspInit+0x74>)
 8000e7c:	f003 f9fa 	bl	8004274 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800

08000e94 <GetCommand>:
#include <string.h>
#include "usart.h"


int GetCommand(char *command, int len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	char c;
	int i;
	int numRead;
	int maxRead = len - 1;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]

	for(numRead = 0, i = 0; numRead < maxRead;)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e038      	b.n	8000f20 <GetCommand+0x8c>
	{
		/* try to get a byte from the serial port */
//		c = Uart_Getch() & 0xff;
//		c = RX1_Char();
//		HAL_UART_Receive(&huart1, &c, 1, 0xFFFF);
		c = DebugUart_GetChar();
 8000eae:	f001 fecd 	bl	8002c4c <DebugUart_GetChar>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	72fb      	strb	r3, [r7, #11]
//			HAL_UART_Transmit(&huart1, '\r', 1, 0xFFFF);
			DebugUart_PutChar('\r');
			DebugUart_PutChar('\n');
			return c;
		}
		if((c == '\r') || (c == '\n')) {
 8000eb6:	7afb      	ldrb	r3, [r7, #11]
 8000eb8:	2b0d      	cmp	r3, #13
 8000eba:	d002      	beq.n	8000ec2 <GetCommand+0x2e>
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d10f      	bne.n	8000ee2 <GetCommand+0x4e>
			command[i++] = '\0';
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	617a      	str	r2, [r7, #20]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
//			Uart_SendByte('\n');
//			TX1_Char('\n');
//			TX1_Char('\r');
//			HAL_UART_Transmit(&huart1, '\n', 1, 0xFFFF);
//			HAL_UART_Transmit(&huart1, '\r', 1, 0xFFFF);
			DebugUart_PutChar('\r');
 8000ed2:	200d      	movs	r0, #13
 8000ed4:	f001 fed4 	bl	8002c80 <DebugUart_PutChar>
			DebugUart_PutChar('\n');
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f001 fed1 	bl	8002c80 <DebugUart_PutChar>
			return(numRead);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	e023      	b.n	8000f2a <GetCommand+0x96>
		}
		else if(c == '\b') { /* FIXME: is this backspace? */
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d10c      	bne.n	8000f02 <GetCommand+0x6e>
			if(i > 0) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dd18      	ble.n	8000f20 <GetCommand+0x8c>
				i--;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
				numRead--;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
				/* cursor one position back. */
//				Uart_Printf("\b \b");
//				TX1_Str("\b \b");
//				HAL_UART_Transmit(&huart1, "\b \b", 3, 0xFFFF);
				DebugUart_PutStr("\b \b");
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <GetCommand+0xa0>)
 8000efc:	f001 fed2 	bl	8002ca4 <DebugUart_PutStr>
 8000f00:	e00e      	b.n	8000f20 <GetCommand+0x8c>
			}
		}
		else {
			command[i++] = c;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	617a      	str	r2, [r7, #20]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	7afa      	ldrb	r2, [r7, #11]
 8000f10:	701a      	strb	r2, [r3, #0]
			numRead++;
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	3301      	adds	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]

			/* print character */
//			Uart_SendByte(c);
//			TX1_Char(c);
//			HAL_UART_Transmit(&huart1, (uint8_t *)&c, 1, 0xFFFF);
			DebugUart_PutChar(c);
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 feb0 	bl	8002c80 <DebugUart_PutChar>
	for(numRead = 0, i = 0; numRead < maxRead;)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbc2      	blt.n	8000eae <GetCommand+0x1a>
		}
	}
	return(numRead);
 8000f28:	693b      	ldr	r3, [r7, #16]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800b4f8 	.word	0x0800b4f8

08000f38 <MyStrNCmp>:

int MyStrNCmp(const char *s1, const char *s2, int maxlen)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int i;

	for(i = 0; i < maxlen; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e01f      	b.n	8000f8a <MyStrNCmp+0x52>
		if(s1[i] != s2[i])
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	440b      	add	r3, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d00a      	beq.n	8000f74 <MyStrNCmp+0x3c>
			return ((int) s1[i]) - ((int) s2[i]);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	1acb      	subs	r3, r1, r3
 8000f72:	e00f      	b.n	8000f94 <MyStrNCmp+0x5c>
		if(s1[i] == 0)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <MyStrNCmp+0x4c>
			return 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e007      	b.n	8000f94 <MyStrNCmp+0x5c>
	for(i = 0; i < maxlen; i++) {
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dbdb      	blt.n	8000f4a <MyStrNCmp+0x12>
	}

	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_DAC_Init+0x4c>)
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <MX_DAC_Init+0x50>)
 8000fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_DAC_Init+0x4c>)
 8000fb6:	f002 fc0b 	bl	80037d0 <HAL_DAC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fc0:	f001 f8b9 	bl	8002136 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_DAC_Init+0x4c>)
 8000fd4:	f002 fc2c 	bl	8003830 <HAL_DAC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fde:	f001 f8aa 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001e4 	.word	0x200001e4
 8000ff0:	40007400 	.word	0x40007400

08000ff4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <HAL_DAC_MspInit+0xc0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d14a      	bne.n	80010aa <HAL_DAC_MspInit+0xb6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 800101a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800101e:	61d3      	str	r3, [r2, #28]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_OUT1_Pin;
 8001044:	2310      	movs	r3, #16
 8001046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001048:	2303      	movs	r3, #3
 800104a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DAC_OUT1_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <HAL_DAC_MspInit+0xc8>)
 8001054:	f003 f90e 	bl	8004274 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_DAC_MspInit+0xd0>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001060:	2210      	movs	r2, #16
 8001062:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001076:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001082:	2220      	movs	r2, #32
 8001084:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001090:	f002 fc6c 	bl	800396c <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 800109a:	f001 f84c 	bl	8002136 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40007400 	.word	0x40007400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	200001a0 	.word	0x200001a0
 80010c4:	40020430 	.word	0x40020430

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_DMA_Init+0x38>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MX_DMA_Init+0x38>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_DMA_Init+0x38>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	203a      	movs	r0, #58	; 0x3a
 80010ec:	f002 fb20 	bl	8003730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80010f0:	203a      	movs	r0, #58	; 0x3a
 80010f2:	f002 fb49 	bl	8003788 <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <drv8880_init>:
volatile uint32_t step_cnt = 800;
volatile uint32_t shot_cnt = 1;
uint16_t accel_tbl[90] = {0};

void drv8880_init()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	// Smart Tune mode Enable
	HAL_GPIO_WritePin(M_ATE_GPIO_Port, M_ATE_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	4829      	ldr	r0, [pc, #164]	; (80011b8 <drv8880_init+0xb4>)
 8001112:	f003 fb69 	bl	80047e8 <HAL_GPIO_WritePin>

	// driver disable
	HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	4828      	ldr	r0, [pc, #160]	; (80011bc <drv8880_init+0xb8>)
 800111c:	f003 fb64 	bl	80047e8 <HAL_GPIO_WritePin>

	// sleep mode
	HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2108      	movs	r1, #8
 8001124:	4825      	ldr	r0, [pc, #148]	; (80011bc <drv8880_init+0xb8>)
 8001126:	f003 fb5f 	bl	80047e8 <HAL_GPIO_WritePin>

	// Microstepping 1/4 step
	HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2120      	movs	r1, #32
 800112e:	4823      	ldr	r0, [pc, #140]	; (80011bc <drv8880_init+0xb8>)
 8001130:	f003 fb5a 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	4820      	ldr	r0, [pc, #128]	; (80011bc <drv8880_init+0xb8>)
 800113a:	f003 fb55 	bl	80047e8 <HAL_GPIO_WritePin>

	// Torque 50%
	HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	481d      	ldr	r0, [pc, #116]	; (80011bc <drv8880_init+0xb8>)
 8001146:	f003 fb4f 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <drv8880_init+0xb8>)
 8001152:	f003 fb49 	bl	80047e8 <HAL_GPIO_WritePin>

	// Decay Slow Mode // Mixed mode 30% Fast
	HAL_GPIO_WritePin(M_DEC0_GPIO_Port, M_DEC0_Pin, GPIO_PIN_RESET);//GPIO_PIN_SET);
 8001156:	2200      	movs	r2, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <drv8880_init+0xb8>)
 800115c:	f003 fb44 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_DEC1_GPIO_Port, M_DEC1_Pin, GPIO_PIN_RESET);//GPIO_PIN_SET);
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	4815      	ldr	r0, [pc, #84]	; (80011bc <drv8880_init+0xb8>)
 8001166:	f003 fb3f 	bl	80047e8 <HAL_GPIO_WritePin>

	// Motor Dir 0
	HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	4813      	ldr	r0, [pc, #76]	; (80011bc <drv8880_init+0xb8>)
 8001170:	f003 fb3a 	bl	80047e8 <HAL_GPIO_WritePin>

	for(int i=0;i<90;i++)
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e015      	b.n	80011a6 <drv8880_init+0xa2>
	{
		accel_tbl[i] = 1100+i*100;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4413      	add	r3, r2
 8001184:	461a      	mov	r2, r3
 8001186:	0091      	lsls	r1, r2, #2
 8001188:	461a      	mov	r2, r3
 800118a:	460b      	mov	r3, r1
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	b29b      	uxth	r3, r3
 8001192:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8001196:	b299      	uxth	r1, r3
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <drv8880_init+0xbc>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<90;i++)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b59      	cmp	r3, #89	; 0x59
 80011aa:	dde6      	ble.n	800117a <drv8880_init+0x76>
//		printf("accel_tbl[i] = %d\n", accel_tbl[i]);
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010800 	.word	0x40010800
 80011bc:	40011000 	.word	0x40011000
 80011c0:	20000098 	.word	0x20000098

080011c4 <drv8880_enable>:

void drv8880_enable()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2110      	movs	r1, #16
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <drv8880_enable+0x24>)
 80011ce:	f003 fb0b 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2108      	movs	r1, #8
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <drv8880_enable+0x24>)
 80011d8:	f003 fb06 	bl	80047e8 <HAL_GPIO_WritePin>

	drv8880_state = 1;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <drv8880_enable+0x28>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40011000 	.word	0x40011000
 80011ec:	20000094 	.word	0x20000094

080011f0 <drv8880_disable>:

void drv8880_disable()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <drv8880_disable+0x24>)
 80011fa:	f003 faf5 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2108      	movs	r1, #8
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <drv8880_disable+0x24>)
 8001204:	f003 faf0 	bl	80047e8 <HAL_GPIO_WritePin>

	drv8880_state = 0;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <drv8880_disable+0x28>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40011000 	.word	0x40011000
 8001218:	20000094 	.word	0x20000094

0800121c <drv8880_dir>:

void drv8880_dir(uint8_t dir)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	if(dir == 1)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <drv8880_dir+0x1c>
	{
		HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <drv8880_dir+0x30>)
 8001232:	f003 fad9 	bl	80047e8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_RESET);
	}
}
 8001236:	e004      	b.n	8001242 <drv8880_dir+0x26>
		HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <drv8880_dir+0x30>)
 800123e:	f003 fad3 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40011000 	.word	0x40011000

08001250 <drv8880_sleep>:

void drv8880_sleep(uint8_t status)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <drv8880_sleep+0x1c>
	{
		HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2108      	movs	r1, #8
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <drv8880_sleep+0x30>)
 8001266:	f003 fabf 	bl	80047e8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
	}
}
 800126a:	e004      	b.n	8001276 <drv8880_sleep+0x26>
		HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2108      	movs	r1, #8
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <drv8880_sleep+0x30>)
 8001272:	f003 fab9 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40011000 	.word	0x40011000

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <MX_GPIO_Init+0x1d8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a6f      	ldr	r2, [pc, #444]	; (800145c <MX_GPIO_Init+0x1d8>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b6d      	ldr	r3, [pc, #436]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a69      	ldr	r2, [pc, #420]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b61      	ldr	r3, [pc, #388]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	4b5e      	ldr	r3, [pc, #376]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a5d      	ldr	r2, [pc, #372]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS0_Pin|STATUS1_Pin|M_DEC0_Pin|M_DEC1_Pin
 80012f8:	2200      	movs	r2, #0
 80012fa:	f24c 61fb 	movw	r1, #50939	; 0xc6fb
 80012fe:	4858      	ldr	r0, [pc, #352]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001300:	f003 fa72 	bl	80047e8 <HAL_GPIO_WritePin>
                          |M_nSLEEP_Pin|M_EN_Pin|M_M0_Pin|M_M1_Pin
                          |M_DIR_Pin|M_TRQ0_Pin|M_TRQ1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	4856      	ldr	r0, [pc, #344]	; (8001464 <MX_GPIO_Init+0x1e0>)
 800130c:	f003 fa6c 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_ATE_GPIO_Port, M_ATE_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001316:	4854      	ldr	r0, [pc, #336]	; (8001468 <MX_GPIO_Init+0x1e4>)
 8001318:	f003 fa66 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = U_LIMIT_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <MX_GPIO_Init+0x1e8>)
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(U_LIMIT_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	484b      	ldr	r0, [pc, #300]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001332:	f002 ff9f 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS0_Pin|STATUS1_Pin;
 8001336:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800133a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4844      	ldr	r0, [pc, #272]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001350:	f002 ff90 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = M_DEC0_Pin|M_DEC1_Pin|M_nSLEEP_Pin|M_EN_Pin
 8001354:	f240 63fb 	movw	r3, #1787	; 0x6fb
 8001358:	613b      	str	r3, [r7, #16]
                          |M_M0_Pin|M_M1_Pin|M_DIR_Pin|M_TRQ0_Pin
                          |M_TRQ1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <MX_GPIO_Init+0x1dc>)
 800136e:	f002 ff81 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = M_FAULTn_Pin|CART_nDET_Pin;
 8001372:	f640 0304 	movw	r3, #2052	; 0x804
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4836      	ldr	r0, [pc, #216]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001388:	f002 ff74 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800138c:	2303      	movs	r3, #3
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <MX_GPIO_Init+0x1ec>)
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4831      	ldr	r0, [pc, #196]	; (8001464 <MX_GPIO_Init+0x1e0>)
 80013a0:	f002 ff68 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <MX_GPIO_Init+0x1e0>)
 80013be:	f002 ff59 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_ATE_Pin;
 80013c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M_ATE_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4823      	ldr	r0, [pc, #140]	; (8001468 <MX_GPIO_Init+0x1e4>)
 80013dc:	f002 ff4a 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_LIMIT_Pin;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_GPIO_Init+0x1f0>)
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_LIMIT_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	; (8001460 <MX_GPIO_Init+0x1dc>)
 80013f6:	f002 ff3d 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHOT_SWn_Pin;
 80013fa:	2304      	movs	r3, #4
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_GPIO_Init+0x1e8>)
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SHOT_SWn_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4619      	mov	r1, r3
 800140c:	481a      	ldr	r0, [pc, #104]	; (8001478 <MX_GPIO_Init+0x1f4>)
 800140e:	f002 ff31 	bl	8004274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2006      	movs	r0, #6
 8001418:	f002 f98a 	bl	8003730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800141c:	2006      	movs	r0, #6
 800141e:	f002 f9b3 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2007      	movs	r0, #7
 8001428:	f002 f982 	bl	8003730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800142c:	2007      	movs	r0, #7
 800142e:	f002 f9ab 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	2008      	movs	r0, #8
 8001438:	f002 f97a 	bl	8003730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800143c:	2008      	movs	r0, #8
 800143e:	f002 f9a3 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2028      	movs	r0, #40	; 0x28
 8001448:	f002 f972 	bl	8003730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800144c:	2028      	movs	r0, #40	; 0x28
 800144e:	f002 f99b 	bl	8003788 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40011000 	.word	0x40011000
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40010800 	.word	0x40010800
 800146c:	10210000 	.word	0x10210000
 8001470:	10110000 	.word	0x10110000
 8001474:	10310000 	.word	0x10310000
 8001478:	40011400 	.word	0x40011400

0800147c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == L_LIMIT_Pin)
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800148c:	d11f      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x52>
	{
		if(HAL_GPIO_ReadPin(L_LIMIT_GPIO_Port, L_LIMIT_Pin))
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	482a      	ldr	r0, [pc, #168]	; (800153c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001494:	f003 f982 	bl	800479c <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_EXTI_Callback+0x2e>
		{// rising edge
			tick_start = HAL_GetTick();
 800149e:	f001 fca9 	bl	8002df4 <HAL_GetTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_GPIO_EXTI_Callback+0xc4>)
 80014a6:	6013      	str	r3, [r2, #0]
	}
	else if(GPIO_Pin == MEMS_INT1_Pin || MEMS_INT2_Pin)
	{

	}
}
 80014a8:	e044      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0xb8>
			cnt = 0;
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_GPIO_EXTI_Callback+0xc8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
			dir = 0;
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_GPIO_EXTI_Callback+0xcc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
			tbl_index = 0;
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_GPIO_EXTI_Callback+0xd0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
			shot_cnt--;
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_GPIO_EXTI_Callback+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_GPIO_EXTI_Callback+0xd4>)
 80014c4:	6013      	str	r3, [r2, #0]
			GPIOC->BRR = M_DIR_Pin; // dir 0
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_GPIO_EXTI_Callback+0xc0>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	615a      	str	r2, [r3, #20]
}
 80014cc:	e032      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0xb8>
	else if(GPIO_Pin == U_LIMIT_Pin)
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d4:	d11a      	bne.n	800150c <HAL_GPIO_EXTI_Callback+0x90>
		tick_stop = HAL_GetTick();
 80014d6:	f001 fc8d 	bl	8002df4 <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014de:	6013      	str	r3, [r2, #0]
		cnt = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_GPIO_EXTI_Callback+0xc8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
		dir = 1;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_GPIO_EXTI_Callback+0xcc>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
		tbl_index = 0;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_GPIO_EXTI_Callback+0xd0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
		GPIOC->BSRR = M_DIR_Pin; // dir 1
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_GPIO_EXTI_Callback+0xc0>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
		printf("tick = %d\n", tick_stop-tick_start);
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_GPIO_EXTI_Callback+0xc4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	4619      	mov	r1, r3
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001506:	f007 fcbb 	bl	8008e80 <iprintf>
}
 800150a:	e013      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0xb8>
	else if(GPIO_Pin == SHOT_SWn_Pin)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	2b04      	cmp	r3, #4
 8001510:	d110      	bne.n	8001534 <HAL_GPIO_EXTI_Callback+0xb8>
		step_cnt = 4000;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001514:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001518:	601a      	str	r2, [r3, #0]
		shot_cnt = 1;
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_GPIO_EXTI_Callback+0xd4>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
		drv8880_enable();
 8001520:	f7ff fe50 	bl	80011c4 <drv8880_enable>
		STATUS1_GPIO_Port->BSRR = STATUS1_Pin;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001526:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800152a:	611a      	str	r2, [r3, #16]
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);//interrupt priority change EXTI_Line2 interrupt priority 0 -> 1
 800152c:	2108      	movs	r1, #8
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001530:	f005 fc6a 	bl	8006e08 <HAL_TIM_PWM_Start_IT>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40011000 	.word	0x40011000
 8001540:	200001f8 	.word	0x200001f8
 8001544:	20000154 	.word	0x20000154
 8001548:	20000158 	.word	0x20000158
 800154c:	2000015a 	.word	0x2000015a
 8001550:	20000004 	.word	0x20000004
 8001554:	200001fc 	.word	0x200001fc
 8001558:	0800b4fc 	.word	0x0800b4fc
 800155c:	20000000 	.word	0x20000000
 8001560:	20000300 	.word	0x20000300

08001564 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f003 f96b 	bl	800487c <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 fdc3 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000200 	.word	0x20000200
 80015b8:	40005400 	.word	0x40005400
 80015bc:	000186a0 	.word	0x000186a0

080015c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C2_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <MX_I2C2_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C2_Init+0x50>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_I2C2_Init+0x58>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C2_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_I2C2_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_I2C2_Init+0x50>)
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_I2C2_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_I2C2_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_I2C2_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_I2C2_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_I2C2_Init+0x50>)
 80015fe:	f003 f93d 	bl	800487c <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001608:	f000 fd95 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000254 	.word	0x20000254
 8001614:	40005800 	.word	0x40005800
 8001618:	000186a0 	.word	0x000186a0

0800161c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <HAL_I2C_MspInit+0xc8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d124      	bne.n	8001686 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001654:	23c0      	movs	r3, #192	; 0xc0
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001658:	2312      	movs	r3, #18
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	4619      	mov	r1, r3
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <HAL_I2C_MspInit+0xd0>)
 8001668:	f002 fe04 	bl	8004274 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 8001672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001676:	61d3      	str	r3, [r2, #28]
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001684:	e029      	b.n	80016da <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_I2C_MspInit+0xd4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d124      	bne.n	80016da <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ae:	2312      	movs	r3, #18
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0xd0>)
 80016be:	f002 fdd9 	bl	8004274 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 80016c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_I2C_MspInit+0xcc>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	40005800 	.word	0x40005800

080016f4 <read_tca1_reg>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t read_tca1_reg(uint16_t reg_addr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af04      	add	r7, sp, #16
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
	uint16_t data = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	81fb      	strh	r3, [r7, #14]

	if(HAL_I2C_Mem_Read(&hi2c2, TCA9539_1, reg_addr, 1, &data, 1, 10) != HAL_OK)
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	230a      	movs	r3, #10
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2301      	movs	r3, #1
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030e 	add.w	r3, r7, #14
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	21e8      	movs	r1, #232	; 0xe8
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <read_tca1_reg+0x40>)
 8001718:	f003 fb7c 	bl	8004e14 <HAL_I2C_Mem_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <read_tca1_reg+0x34>
	{
		printf("I2C Read Error...\n");
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <read_tca1_reg+0x44>)
 8001724:	f007 fc32 	bl	8008f8c <puts>
	}

	return data;
 8001728:	89fb      	ldrh	r3, [r7, #14]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000254 	.word	0x20000254
 8001738:	0800b508 	.word	0x0800b508

0800173c <write_tca1_reg>:

uint16_t write_tca1_reg(uint16_t reg_addr, uint16_t data)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af04      	add	r7, sp, #16
 8001742:	4603      	mov	r3, r0
 8001744:	460a      	mov	r2, r1
 8001746:	80fb      	strh	r3, [r7, #6]
 8001748:	4613      	mov	r3, r2
 800174a:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Write(&hi2c2, TCA9539_1, reg_addr, 1, &data, 1, 100) != HAL_OK)
 800174c:	88fa      	ldrh	r2, [r7, #6]
 800174e:	2364      	movs	r3, #100	; 0x64
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2301      	movs	r3, #1
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	21e8      	movs	r1, #232	; 0xe8
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <write_tca1_reg+0x40>)
 8001760:	f003 fa52 	bl	8004c08 <HAL_I2C_Mem_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <write_tca1_reg+0x34>
	{
		printf("I2C Write Error...\n");
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <write_tca1_reg+0x44>)
 800176c:	f007 fc0e 	bl	8008f8c <puts>
	}

	return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000254 	.word	0x20000254
 8001780:	0800b51c 	.word	0x0800b51c

08001784 <read_tca2_reg>:

uint16_t read_tca2_reg(uint16_t reg_addr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af04      	add	r7, sp, #16
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	uint16_t data = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	81fb      	strh	r3, [r7, #14]

	if(HAL_I2C_Mem_Read(&hi2c2, TCA9539_2, reg_addr, 1, &data, 1, 10) != HAL_OK)
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	230a      	movs	r3, #10
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2301      	movs	r3, #1
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	f107 030e 	add.w	r3, r7, #14
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	21ea      	movs	r1, #234	; 0xea
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <read_tca2_reg+0x40>)
 80017a8:	f003 fb34 	bl	8004e14 <HAL_I2C_Mem_Read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <read_tca2_reg+0x34>
	{
		printf("I2C Read Error...\n");
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <read_tca2_reg+0x44>)
 80017b4:	f007 fbea 	bl	8008f8c <puts>
	}

	return data;
 80017b8:	89fb      	ldrh	r3, [r7, #14]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000254 	.word	0x20000254
 80017c8:	0800b508 	.word	0x0800b508

080017cc <write_tca2_reg>:

uint16_t write_tca2_reg(uint16_t reg_addr, uint16_t data)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af04      	add	r7, sp, #16
 80017d2:	4603      	mov	r3, r0
 80017d4:	460a      	mov	r2, r1
 80017d6:	80fb      	strh	r3, [r7, #6]
 80017d8:	4613      	mov	r3, r2
 80017da:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Write(&hi2c2, TCA9539_2, reg_addr, 1, &data, 1, 100) != HAL_OK)
 80017dc:	88fa      	ldrh	r2, [r7, #6]
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	21ea      	movs	r1, #234	; 0xea
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <write_tca2_reg+0x40>)
 80017f0:	f003 fa0a 	bl	8004c08 <HAL_I2C_Mem_Write>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <write_tca2_reg+0x34>
	{
		printf("I2C Write Error...\n");
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <write_tca2_reg+0x44>)
 80017fc:	f007 fbc6 	bl	8008f8c <puts>
	}

	return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000254 	.word	0x20000254
 8001810:	0800b51c 	.word	0x0800b51c

08001814 <read_eeprom>:

uint16_t read_eeprom(uint16_t addr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af04      	add	r7, sp, #16
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
	uint16_t data = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	81fb      	strh	r3, [r7, #14]

	if(HAL_I2C_Mem_Read(&hi2c1, AT24C_ADDR, addr, 2, &data, 1, 100) != HAL_OK)
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2301      	movs	r3, #1
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	f107 030e 	add.w	r3, r7, #14
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2302      	movs	r3, #2
 8001834:	21a0      	movs	r1, #160	; 0xa0
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <read_eeprom+0x40>)
 8001838:	f003 faec 	bl	8004e14 <HAL_I2C_Mem_Read>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <read_eeprom+0x34>
	{
		printf("I2C Read Error...\n");
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <read_eeprom+0x44>)
 8001844:	f007 fba2 	bl	8008f8c <puts>
	}

	return data;
 8001848:	89fb      	ldrh	r3, [r7, #14]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000200 	.word	0x20000200
 8001858:	0800b508 	.word	0x0800b508

0800185c <write_eeprom>:

uint16_t write_eeprom(uint16_t addr, uint16_t data)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af04      	add	r7, sp, #16
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	80fb      	strh	r3, [r7, #6]
 8001868:	4613      	mov	r3, r2
 800186a:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Write(&hi2c1, AT24C_ADDR, addr, 2, &data, 1, 100) != HAL_OK)
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	2301      	movs	r3, #1
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	21a0      	movs	r1, #160	; 0xa0
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <write_eeprom+0x40>)
 8001880:	f003 f9c2 	bl	8004c08 <HAL_I2C_Mem_Write>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <write_eeprom+0x34>
	{
		printf("I2C Write Error...\n");
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <write_eeprom+0x44>)
 800188c:	f007 fb7e 	bl	8008f8c <puts>
	}

	return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000200 	.word	0x20000200
 80018a0:	0800b51c 	.word	0x0800b51c
 80018a4:	00000000 	.word	0x00000000

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b0c5      	sub	sp, #276	; 0x114
 80018ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char commandline[25];
	uint16_t tmp = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	uint16_t freq = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

	uint16_t value=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
	uint16_t buffer[BUF_SIZE];

	for(int i=0;i<BUF_SIZE;i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018c6:	e046      	b.n	8001956 <main+0xae>
	{
		value = (uint16_t)rint((sinf(((2*3.141592)/BUF_SIZE)*i)+1)*2048);
 80018c8:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80018cc:	f7fe ffe4 	bl	8000898 <__aeabi_i2d>
 80018d0:	a3b3      	add	r3, pc, #716	; (adr r3, 8001ba0 <main+0x2f8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fcaf 	bl	8000238 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f863 	bl	80009ac <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f009 f827 	bl	800a93c <sinf>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f8af 	bl	8000a58 <__addsf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fdc3 	bl	800048c <__aeabi_fmul>
 8001906:	4603      	mov	r3, r0
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe ffd7 	bl	80008bc <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f008 ff87 	bl	800a828 <rint>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f823 	bl	800096c <__aeabi_d2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
		buffer[i]=value <4096 ? value : 4095;
 800192c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001930:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001934:	4293      	cmp	r3, r2
 8001936:	bf28      	it	cs
 8001938:	4613      	movcs	r3, r2
 800193a:	b29a      	uxth	r2, r3
 800193c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001946:	440b      	add	r3, r1
 8001948:	f823 2cec 	strh.w	r2, [r3, #-236]
	for(int i=0;i<BUF_SIZE;i++)
 800194c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001950:	3301      	adds	r3, #1
 8001952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800195a:	2b63      	cmp	r3, #99	; 0x63
 800195c:	ddb4      	ble.n	80018c8 <main+0x20>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f001 f9f1 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f000 fb8f 	bl	8002084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f7ff fc8d 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 800196a:	f7ff fbad 	bl	80010c8 <MX_DMA_Init>
  MX_ADC1_Init();
 800196e:	f7ff fa17 	bl	8000da0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001972:	f000 fdbb 	bl	80024ec <MX_TIM3_Init>
  MX_DAC_Init();
 8001976:	f7ff fb13 	bl	8000fa0 <MX_DAC_Init>
  MX_I2C1_Init();
 800197a:	f7ff fdf3 	bl	8001564 <MX_I2C1_Init>
  MX_SPI2_Init();
 800197e:	f000 fbeb 	bl	8002158 <MX_SPI2_Init>
  MX_TIM6_Init();
 8001982:	f000 fe0d 	bl	80025a0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001986:	f000 ff95 	bl	80028b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800198a:	f000 ffbd 	bl	8002908 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800198e:	f7ff fe17 	bl	80015c0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\nSTM32F103RG Test Ver0.1\n");
 8001992:	4885      	ldr	r0, [pc, #532]	; (8001ba8 <main+0x300>)
 8001994:	f007 fafa 	bl	8008f8c <puts>

  printf(" - SysClk Freq. : %d\n", HAL_RCC_GetSysClockFreq());
 8001998:	f004 fd0a 	bl	80063b0 <HAL_RCC_GetSysClockFreq>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4882      	ldr	r0, [pc, #520]	; (8001bac <main+0x304>)
 80019a2:	f007 fa6d 	bl	8008e80 <iprintf>
  printf(" - HCLK Freq. : %d\n", HAL_RCC_GetHCLKFreq());
 80019a6:	f004 fd63 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4880      	ldr	r0, [pc, #512]	; (8001bb0 <main+0x308>)
 80019b0:	f007 fa66 	bl	8008e80 <iprintf>
  printf(" - PCLK1 Freq. : %d\n", HAL_RCC_GetPCLK1Freq());
 80019b4:	f004 fd66 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4619      	mov	r1, r3
 80019bc:	487d      	ldr	r0, [pc, #500]	; (8001bb4 <main+0x30c>)
 80019be:	f007 fa5f 	bl	8008e80 <iprintf>
  printf(" - PCLK2 Freq. : %d\n", HAL_RCC_GetPCLK2Freq());
 80019c2:	f004 fd73 	bl	80064ac <HAL_RCC_GetPCLK2Freq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4619      	mov	r1, r3
 80019ca:	487b      	ldr	r0, [pc, #492]	; (8001bb8 <main+0x310>)
 80019cc:	f007 fa58 	bl	8008e80 <iprintf>

  HAL_UART_Receive_IT(&huart2, nexMessage, 10);
 80019d0:	220a      	movs	r2, #10
 80019d2:	497a      	ldr	r1, [pc, #488]	; (8001bbc <main+0x314>)
 80019d4:	487a      	ldr	r0, [pc, #488]	; (8001bc0 <main+0x318>)
 80019d6:	f006 fe8a 	bl	80086ee <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(STATUS0_GPIO_Port, STATUS0_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e0:	4878      	ldr	r0, [pc, #480]	; (8001bc4 <main+0x31c>)
 80019e2:	f002 ff01 	bl	80047e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ec:	4875      	ldr	r0, [pc, #468]	; (8001bc4 <main+0x31c>)
 80019ee:	f002 fefb 	bl	80047e8 <HAL_GPIO_WritePin>

  // Step Motor driver initial
  drv8880_init();
 80019f2:	f7ff fb87 	bl	8001104 <drv8880_init>
//  printf("TIM3 OC Start...\n");
//  HAL_TIM_Base_Start_IT(&htim3);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);

  if(HAL_GPIO_ReadPin(L_LIMIT_GPIO_Port, L_LIMIT_Pin))
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	4872      	ldr	r0, [pc, #456]	; (8001bc4 <main+0x31c>)
 80019fc:	f002 fece 	bl	800479c <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <main+0x172>
  {
	  motor_dir = 0;
 8001a06:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <main+0x320>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
	  printf("motor dir %d\n", motor_dir);
 8001a0c:	4b6e      	ldr	r3, [pc, #440]	; (8001bc8 <main+0x320>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	486e      	ldr	r0, [pc, #440]	; (8001bcc <main+0x324>)
 8001a14:	f007 fa34 	bl	8008e80 <iprintf>
 8001a18:	e010      	b.n	8001a3c <main+0x194>
  }
  else if(HAL_GPIO_ReadPin(U_LIMIT_GPIO_Port, U_LIMIT_Pin))
 8001a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1e:	4869      	ldr	r0, [pc, #420]	; (8001bc4 <main+0x31c>)
 8001a20:	f002 febc 	bl	800479c <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <main+0x194>
  {
	  motor_dir = 1;
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <main+0x320>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
	  printf("motor dir %d\n", motor_dir);
 8001a30:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <main+0x320>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4865      	ldr	r0, [pc, #404]	; (8001bcc <main+0x324>)
 8001a38:	f007 fa22 	bl	8008e80 <iprintf>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
	}
*/

	  //If there is no '\n' in Ture Studio, printf will not be printed.
	  DebugUart_PutStr("\nTEST> ");
 8001a3c:	4864      	ldr	r0, [pc, #400]	; (8001bd0 <main+0x328>)
 8001a3e:	f001 f931 	bl	8002ca4 <DebugUart_PutStr>
	  GetCommand(commandline, 25);
 8001a42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a46:	2119      	movs	r1, #25
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fa23 	bl	8000e94 <GetCommand>
	  if(MyStrNCmp(commandline, "led", 3) == 0)
 8001a4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a52:	2203      	movs	r2, #3
 8001a54:	495f      	ldr	r1, [pc, #380]	; (8001bd4 <main+0x32c>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fa6e 	bl	8000f38 <MyStrNCmp>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <main+0x1ee>
	  {
	  	  sscanf(commandline, "%*s %d", &tmp);
 8001a62:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001a66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a6a:	495b      	ldr	r1, [pc, #364]	; (8001bd8 <main+0x330>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fa95 	bl	8008f9c <siscanf>
	  	  if(tmp==1)
 8001a72:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d106      	bne.n	8001a88 <main+0x1e0>
	  		HAL_GPIO_WritePin(STATUS0_GPIO_Port, STATUS0_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a80:	4850      	ldr	r0, [pc, #320]	; (8001bc4 <main+0x31c>)
 8001a82:	f002 feb1 	bl	80047e8 <HAL_GPIO_WritePin>
 8001a86:	e7d9      	b.n	8001a3c <main+0x194>
	  	  else
	  		  HAL_GPIO_WritePin(STATUS0_GPIO_Port, STATUS0_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8e:	484d      	ldr	r0, [pc, #308]	; (8001bc4 <main+0x31c>)
 8001a90:	f002 feaa 	bl	80047e8 <HAL_GPIO_WritePin>
 8001a94:	e7d2      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "motor", 5) == 0)
 8001a96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a9a:	2205      	movs	r2, #5
 8001a9c:	494f      	ldr	r1, [pc, #316]	; (8001bdc <main+0x334>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fa4a 	bl	8000f38 <MyStrNCmp>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d12b      	bne.n	8001b02 <main+0x25a>
	  {
		  printf("motor step_cnt %d\n", step_cnt);
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <main+0x338>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	484c      	ldr	r0, [pc, #304]	; (8001be4 <main+0x33c>)
 8001ab2:	f007 f9e5 	bl	8008e80 <iprintf>
		  HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abc:	4841      	ldr	r0, [pc, #260]	; (8001bc4 <main+0x31c>)
 8001abe:	f002 fe93 	bl	80047e8 <HAL_GPIO_WritePin>

	  	  sscanf(commandline, "%*s %d", &tmp);
 8001ac2:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001ac6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001aca:	4943      	ldr	r1, [pc, #268]	; (8001bd8 <main+0x330>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 fa65 	bl	8008f9c <siscanf>
	  	  if(tmp==1)
 8001ad2:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d109      	bne.n	8001aee <main+0x246>
	  	  {
			  printf("drv8880 enable\n");
 8001ada:	4843      	ldr	r0, [pc, #268]	; (8001be8 <main+0x340>)
 8001adc:	f007 fa56 	bl	8008f8c <puts>
			  drv8880_enable();
 8001ae0:	f7ff fb70 	bl	80011c4 <drv8880_enable>
			  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	4841      	ldr	r0, [pc, #260]	; (8001bec <main+0x344>)
 8001ae8:	f005 f98e 	bl	8006e08 <HAL_TIM_PWM_Start_IT>
 8001aec:	e7a6      	b.n	8001a3c <main+0x194>
	  	  }
	  	  else
	  	  {
	  		  HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8001aee:	2108      	movs	r1, #8
 8001af0:	483e      	ldr	r0, [pc, #248]	; (8001bec <main+0x344>)
 8001af2:	f005 fb57 	bl	80071a4 <HAL_TIM_PWM_Stop_IT>
	  		  printf("drv8880 disable\n");
 8001af6:	483e      	ldr	r0, [pc, #248]	; (8001bf0 <main+0x348>)
 8001af8:	f007 fa48 	bl	8008f8c <puts>
	  		  drv8880_disable();
 8001afc:	f7ff fb78 	bl	80011f0 <drv8880_disable>
 8001b00:	e79c      	b.n	8001a3c <main+0x194>
	  	  }
	  }
	  else if(MyStrNCmp(commandline, "dir", 3) == 0)
 8001b02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b06:	2203      	movs	r2, #3
 8001b08:	493a      	ldr	r1, [pc, #232]	; (8001bf4 <main+0x34c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fa14 	bl	8000f38 <MyStrNCmp>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d112      	bne.n	8001b3c <main+0x294>
	  {
	  	  sscanf(commandline, "%*s %d", &motor_dir);
 8001b16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b1a:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <main+0x320>)
 8001b1c:	492e      	ldr	r1, [pc, #184]	; (8001bd8 <main+0x330>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fa3c 	bl	8008f9c <siscanf>
	  	  printf("motor dir is %d\n", motor_dir);
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <main+0x320>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4833      	ldr	r0, [pc, #204]	; (8001bf8 <main+0x350>)
 8001b2c:	f007 f9a8 	bl	8008e80 <iprintf>
	  	  drv8880_dir(motor_dir);
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <main+0x320>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fb71 	bl	800121c <drv8880_dir>
 8001b3a:	e77f      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "step", 4) == 0)
 8001b3c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b40:	2204      	movs	r2, #4
 8001b42:	492e      	ldr	r1, [pc, #184]	; (8001bfc <main+0x354>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f9f7 	bl	8000f38 <MyStrNCmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <main+0x2c4>
	  {
	  	  sscanf(commandline, "%*s %d", &step_cnt);
 8001b50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b54:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <main+0x338>)
 8001b56:	4920      	ldr	r1, [pc, #128]	; (8001bd8 <main+0x330>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f007 fa1f 	bl	8008f9c <siscanf>
	  	  printf("motor step cnt is %d\n", step_cnt);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <main+0x338>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4826      	ldr	r0, [pc, #152]	; (8001c00 <main+0x358>)
 8001b66:	f007 f98b 	bl	8008e80 <iprintf>
 8001b6a:	e767      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "shot", 4) == 0)
 8001b6c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b70:	2204      	movs	r2, #4
 8001b72:	4924      	ldr	r1, [pc, #144]	; (8001c04 <main+0x35c>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f9df 	bl	8000f38 <MyStrNCmp>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d147      	bne.n	8001c10 <main+0x368>
	  {
	  	  sscanf(commandline, "%*s %d", &shot_cnt);
 8001b80:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <main+0x360>)
 8001b86:	4914      	ldr	r1, [pc, #80]	; (8001bd8 <main+0x330>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f007 fa07 	bl	8008f9c <siscanf>
	  	  printf("shot cnt is %d\n", shot_cnt);
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <main+0x360>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	481d      	ldr	r0, [pc, #116]	; (8001c0c <main+0x364>)
 8001b96:	f007 f973 	bl	8008e80 <iprintf>
 8001b9a:	e74f      	b.n	8001a3c <main+0x194>
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	59f28faa 	.word	0x59f28faa
 8001ba4:	3fb015bf 	.word	0x3fb015bf
 8001ba8:	0800b530 	.word	0x0800b530
 8001bac:	0800b54c 	.word	0x0800b54c
 8001bb0:	0800b564 	.word	0x0800b564
 8001bb4:	0800b578 	.word	0x0800b578
 8001bb8:	0800b590 	.word	0x0800b590
 8001bbc:	2000015c 	.word	0x2000015c
 8001bc0:	200003d0 	.word	0x200003d0
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	2000014c 	.word	0x2000014c
 8001bcc:	0800b5a8 	.word	0x0800b5a8
 8001bd0:	0800b5b8 	.word	0x0800b5b8
 8001bd4:	0800b5c0 	.word	0x0800b5c0
 8001bd8:	0800b5c4 	.word	0x0800b5c4
 8001bdc:	0800b5cc 	.word	0x0800b5cc
 8001be0:	20000000 	.word	0x20000000
 8001be4:	0800b5d4 	.word	0x0800b5d4
 8001be8:	0800b5e8 	.word	0x0800b5e8
 8001bec:	20000300 	.word	0x20000300
 8001bf0:	0800b5f8 	.word	0x0800b5f8
 8001bf4:	0800b608 	.word	0x0800b608
 8001bf8:	0800b60c 	.word	0x0800b60c
 8001bfc:	0800b620 	.word	0x0800b620
 8001c00:	0800b628 	.word	0x0800b628
 8001c04:	0800b640 	.word	0x0800b640
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	0800b648 	.word	0x0800b648
	  }
	  else if(MyStrNCmp(commandline, "freq", 4) == 0)
 8001c10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c14:	2204      	movs	r2, #4
 8001c16:	49c3      	ldr	r1, [pc, #780]	; (8001f24 <main+0x67c>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f98d 	bl	8000f38 <MyStrNCmp>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d12f      	bne.n	8001c84 <main+0x3dc>
	  {
	  	  sscanf(commandline, "%*s %d", &freq);
 8001c24:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001c28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c2c:	49be      	ldr	r1, [pc, #760]	; (8001f28 <main+0x680>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f007 f9b4 	bl	8008f9c <siscanf>

	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (1000000/freq)/2);
 8001c34:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4bbc      	ldr	r3, [pc, #752]	; (8001f2c <main+0x684>)
 8001c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c40:	0fda      	lsrs	r2, r3, #31
 8001c42:	4413      	add	r3, r2
 8001c44:	105b      	asrs	r3, r3, #1
 8001c46:	461a      	mov	r2, r3
 8001c48:	4bb9      	ldr	r3, [pc, #740]	; (8001f30 <main+0x688>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c
//	  	  htim3.Instance->CCR3 = (1000000/freq)/2;
	  	  __HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 8001c4e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c52:	461a      	mov	r2, r3
 8001c54:	4bb5      	ldr	r3, [pc, #724]	; (8001f2c <main+0x684>)
 8001c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c5a:	1e5a      	subs	r2, r3, #1
 8001c5c:	4bb4      	ldr	r3, [pc, #720]	; (8001f30 <main+0x688>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c62:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c66:	461a      	mov	r2, r3
 8001c68:	4bb0      	ldr	r3, [pc, #704]	; (8001f2c <main+0x684>)
 8001c6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	461a      	mov	r2, r3
 8001c72:	4baf      	ldr	r3, [pc, #700]	; (8001f30 <main+0x688>)
 8001c74:	60da      	str	r2, [r3, #12]
//	  	  htim3.Instance->ARR = 1000000/freq - 1;

	  	  printf("motor freq is %d Hz\n", freq);
 8001c76:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	48ad      	ldr	r0, [pc, #692]	; (8001f34 <main+0x68c>)
 8001c7e:	f007 f8ff 	bl	8008e80 <iprintf>
 8001c82:	e6db      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "sleep", 5) == 0)
 8001c84:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c88:	2205      	movs	r2, #5
 8001c8a:	49ab      	ldr	r1, [pc, #684]	; (8001f38 <main+0x690>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f953 	bl	8000f38 <MyStrNCmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d114      	bne.n	8001cc2 <main+0x41a>
	  {
	  	  sscanf(commandline, "%*s %d", &tmp);
 8001c98:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001c9c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ca0:	49a1      	ldr	r1, [pc, #644]	; (8001f28 <main+0x680>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 f97a 	bl	8008f9c <siscanf>
	  	  printf("Motor Sleep is %d\n", tmp);
 8001ca8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001cac:	4619      	mov	r1, r3
 8001cae:	48a3      	ldr	r0, [pc, #652]	; (8001f3c <main+0x694>)
 8001cb0:	f007 f8e6 	bl	8008e80 <iprintf>
	  	  drv8880_sleep(tmp);
 8001cb4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fac8 	bl	8001250 <drv8880_sleep>
 8001cc0:	e6bc      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "microstep", 9) == 0)
 8001cc2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cc6:	2209      	movs	r2, #9
 8001cc8:	499d      	ldr	r1, [pc, #628]	; (8001f40 <main+0x698>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f934 	bl	8000f38 <MyStrNCmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d140      	bne.n	8001d58 <main+0x4b0>
	  {
		  sscanf(commandline, "%*s %d", &tmp);
 8001cd6:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001cda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cde:	4992      	ldr	r1, [pc, #584]	; (8001f28 <main+0x680>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f007 f95b 	bl	8008f9c <siscanf>
		  switch(tmp)
 8001ce6:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d022      	beq.n	8001d34 <main+0x48c>
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	dc2e      	bgt.n	8001d50 <main+0x4a8>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <main+0x454>
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d00e      	beq.n	8001d18 <main+0x470>
 8001cfa:	e029      	b.n	8001d50 <main+0x4a8>
		  {
		  	  case 0:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2120      	movs	r1, #32
 8001d00:	4890      	ldr	r0, [pc, #576]	; (8001f44 <main+0x69c>)
 8001d02:	f002 fd71 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	488e      	ldr	r0, [pc, #568]	; (8001f44 <main+0x69c>)
 8001d0c:	f002 fd6c 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("full step mode\n");
 8001d10:	488d      	ldr	r0, [pc, #564]	; (8001f48 <main+0x6a0>)
 8001d12:	f007 f93b 	bl	8008f8c <puts>
		  		  break;
 8001d16:	e1a0      	b.n	800205a <main+0x7b2>
		  	  case 2:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	4889      	ldr	r0, [pc, #548]	; (8001f44 <main+0x69c>)
 8001d1e:	f002 fd63 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	4887      	ldr	r0, [pc, #540]	; (8001f44 <main+0x69c>)
 8001d28:	f002 fd5e 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("1/2 step mode\n");
 8001d2c:	4887      	ldr	r0, [pc, #540]	; (8001f4c <main+0x6a4>)
 8001d2e:	f007 f92d 	bl	8008f8c <puts>
		  		  break;
 8001d32:	e192      	b.n	800205a <main+0x7b2>
		  	  case 4:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2120      	movs	r1, #32
 8001d38:	4882      	ldr	r0, [pc, #520]	; (8001f44 <main+0x69c>)
 8001d3a:	f002 fd55 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2140      	movs	r1, #64	; 0x40
 8001d42:	4880      	ldr	r0, [pc, #512]	; (8001f44 <main+0x69c>)
 8001d44:	f002 fd50 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("1/4 step mode\n");
 8001d48:	4881      	ldr	r0, [pc, #516]	; (8001f50 <main+0x6a8>)
 8001d4a:	f007 f91f 	bl	8008f8c <puts>
		  		  break;
 8001d4e:	e184      	b.n	800205a <main+0x7b2>
		  	  default:
		  		  printf("select 0(full step), 2(1/2 step), 4(1/4 step)\n");
 8001d50:	4880      	ldr	r0, [pc, #512]	; (8001f54 <main+0x6ac>)
 8001d52:	f007 f91b 	bl	8008f8c <puts>
		  		  break;
 8001d56:	e180      	b.n	800205a <main+0x7b2>
		  }
	  }
	  else if(MyStrNCmp(commandline, "torq", 4) == 0)
 8001d58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	497e      	ldr	r1, [pc, #504]	; (8001f58 <main+0x6b0>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f8e9 	bl	8000f38 <MyStrNCmp>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d15a      	bne.n	8001e22 <main+0x57a>
	  {
		  sscanf(commandline, "%*s %d", &tmp);
 8001d6c:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001d70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d74:	496c      	ldr	r1, [pc, #432]	; (8001f28 <main+0x680>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f007 f910 	bl	8008f9c <siscanf>
		  switch(tmp)
 8001d7c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d03a      	beq.n	8001dfa <main+0x552>
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	dc48      	bgt.n	8001e1a <main+0x572>
 8001d88:	2b4b      	cmp	r3, #75	; 0x4b
 8001d8a:	d026      	beq.n	8001dda <main+0x532>
 8001d8c:	2b4b      	cmp	r3, #75	; 0x4b
 8001d8e:	dc44      	bgt.n	8001e1a <main+0x572>
 8001d90:	2b19      	cmp	r3, #25
 8001d92:	d002      	beq.n	8001d9a <main+0x4f2>
 8001d94:	2b32      	cmp	r3, #50	; 0x32
 8001d96:	d010      	beq.n	8001dba <main+0x512>
 8001d98:	e03f      	b.n	8001e1a <main+0x572>
		  {
		  	  case 25:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da0:	4868      	ldr	r0, [pc, #416]	; (8001f44 <main+0x69c>)
 8001da2:	f002 fd21 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dac:	4865      	ldr	r0, [pc, #404]	; (8001f44 <main+0x69c>)
 8001dae:	f002 fd1b 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("torque 25%%\n");
 8001db2:	486a      	ldr	r0, [pc, #424]	; (8001f5c <main+0x6b4>)
 8001db4:	f007 f864 	bl	8008e80 <iprintf>
		  		  break;
 8001db8:	e14f      	b.n	800205a <main+0x7b2>
		  	  case 50:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc0:	4860      	ldr	r0, [pc, #384]	; (8001f44 <main+0x69c>)
 8001dc2:	f002 fd11 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dcc:	485d      	ldr	r0, [pc, #372]	; (8001f44 <main+0x69c>)
 8001dce:	f002 fd0b 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("torque 50%%\n");
 8001dd2:	4863      	ldr	r0, [pc, #396]	; (8001f60 <main+0x6b8>)
 8001dd4:	f007 f854 	bl	8008e80 <iprintf>
		  		  break;
 8001dd8:	e13f      	b.n	800205a <main+0x7b2>
		  	  case 75:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de0:	4858      	ldr	r0, [pc, #352]	; (8001f44 <main+0x69c>)
 8001de2:	f002 fd01 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dec:	4855      	ldr	r0, [pc, #340]	; (8001f44 <main+0x69c>)
 8001dee:	f002 fcfb 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("torque 75%%\n");
 8001df2:	485c      	ldr	r0, [pc, #368]	; (8001f64 <main+0x6bc>)
 8001df4:	f007 f844 	bl	8008e80 <iprintf>
		  		  break;
 8001df8:	e12f      	b.n	800205a <main+0x7b2>
		  	  case 100:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e00:	4850      	ldr	r0, [pc, #320]	; (8001f44 <main+0x69c>)
 8001e02:	f002 fcf1 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0c:	484d      	ldr	r0, [pc, #308]	; (8001f44 <main+0x69c>)
 8001e0e:	f002 fceb 	bl	80047e8 <HAL_GPIO_WritePin>
		  		  printf("torque 100%%\n");
 8001e12:	4855      	ldr	r0, [pc, #340]	; (8001f68 <main+0x6c0>)
 8001e14:	f007 f834 	bl	8008e80 <iprintf>
		  		  break;
 8001e18:	e11f      	b.n	800205a <main+0x7b2>
		  	  default:
		  		  printf("select 25, 50, 75, 100\n");
 8001e1a:	4854      	ldr	r0, [pc, #336]	; (8001f6c <main+0x6c4>)
 8001e1c:	f007 f8b6 	bl	8008f8c <puts>
		  		  break;
 8001e20:	e11b      	b.n	800205a <main+0x7b2>
		  }
	  }
	  else if(MyStrNCmp(commandline, "tca1r", 5) == 0)
 8001e22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e26:	2205      	movs	r2, #5
 8001e28:	4951      	ldr	r1, [pc, #324]	; (8001f70 <main+0x6c8>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f884 	bl	8000f38 <MyStrNCmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d114      	bne.n	8001e60 <main+0x5b8>
	  {
		  uint16_t addr;

	  	  sscanf(commandline, "%*s %x", &addr);
 8001e36:	f107 021a 	add.w	r2, r7, #26
 8001e3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e3e:	494d      	ldr	r1, [pc, #308]	; (8001f74 <main+0x6cc>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f007 f8ab 	bl	8008f9c <siscanf>
	  	  printf("reg[%x] data[%x]\n",addr, read_tca1_reg(addr));
 8001e46:	8b7b      	ldrh	r3, [r7, #26]
 8001e48:	461c      	mov	r4, r3
 8001e4a:	8b7b      	ldrh	r3, [r7, #26]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fc51 	bl	80016f4 <read_tca1_reg>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4621      	mov	r1, r4
 8001e58:	4847      	ldr	r0, [pc, #284]	; (8001f78 <main+0x6d0>)
 8001e5a:	f007 f811 	bl	8008e80 <iprintf>
 8001e5e:	e5ed      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "tca1w", 5) == 0)
 8001e60:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e64:	2205      	movs	r2, #5
 8001e66:	4945      	ldr	r1, [pc, #276]	; (8001f7c <main+0x6d4>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f865 	bl	8000f38 <MyStrNCmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d116      	bne.n	8001ea2 <main+0x5fa>
	  {
		  uint16_t addr, data;

	  	  sscanf(commandline, "%*s %x %x", &addr, &data);
 8001e74:	f107 0316 	add.w	r3, r7, #22
 8001e78:	f107 0218 	add.w	r2, r7, #24
 8001e7c:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8001e80:	493f      	ldr	r1, [pc, #252]	; (8001f80 <main+0x6d8>)
 8001e82:	f007 f88b 	bl	8008f9c <siscanf>
	  	  printf("addr = %x\ndata = %x\n", addr, data);
 8001e86:	8b3b      	ldrh	r3, [r7, #24]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	483d      	ldr	r0, [pc, #244]	; (8001f84 <main+0x6dc>)
 8001e90:	f006 fff6 	bl	8008e80 <iprintf>
	  	  write_tca1_reg(addr, data);
 8001e94:	8b3b      	ldrh	r3, [r7, #24]
 8001e96:	8afa      	ldrh	r2, [r7, #22]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fc4e 	bl	800173c <write_tca1_reg>
 8001ea0:	e5cc      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "tca2r", 5) == 0)
 8001ea2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	4937      	ldr	r1, [pc, #220]	; (8001f88 <main+0x6e0>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f844 	bl	8000f38 <MyStrNCmp>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d114      	bne.n	8001ee0 <main+0x638>
	  {
		  uint16_t addr;

	  	  sscanf(commandline, "%*s %x", &addr);
 8001eb6:	f107 0214 	add.w	r2, r7, #20
 8001eba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ebe:	492d      	ldr	r1, [pc, #180]	; (8001f74 <main+0x6cc>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f007 f86b 	bl	8008f9c <siscanf>
	  	  printf("reg[%x] data[%x]\n",addr, read_tca2_reg(addr));
 8001ec6:	8abb      	ldrh	r3, [r7, #20]
 8001ec8:	461c      	mov	r4, r3
 8001eca:	8abb      	ldrh	r3, [r7, #20]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fc59 	bl	8001784 <read_tca2_reg>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	4827      	ldr	r0, [pc, #156]	; (8001f78 <main+0x6d0>)
 8001eda:	f006 ffd1 	bl	8008e80 <iprintf>
 8001ede:	e5ad      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "tca2w", 5) == 0)
 8001ee0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	4929      	ldr	r1, [pc, #164]	; (8001f8c <main+0x6e4>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f825 	bl	8000f38 <MyStrNCmp>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d14d      	bne.n	8001f90 <main+0x6e8>
	  {
		  uint16_t addr, data;

	  	  sscanf(commandline, "%*s %x %x", &addr, &data);
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	f107 0212 	add.w	r2, r7, #18
 8001efc:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8001f00:	491f      	ldr	r1, [pc, #124]	; (8001f80 <main+0x6d8>)
 8001f02:	f007 f84b 	bl	8008f9c <siscanf>
	  	  printf("addr = %x\ndata = %x\n", addr, data);
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	8a3b      	ldrh	r3, [r7, #16]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <main+0x6dc>)
 8001f10:	f006 ffb6 	bl	8008e80 <iprintf>
	  	  write_tca2_reg(addr, data);
 8001f14:	8a7b      	ldrh	r3, [r7, #18]
 8001f16:	8a3a      	ldrh	r2, [r7, #16]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fc56 	bl	80017cc <write_tca2_reg>
 8001f20:	e58c      	b.n	8001a3c <main+0x194>
 8001f22:	bf00      	nop
 8001f24:	0800b658 	.word	0x0800b658
 8001f28:	0800b5c4 	.word	0x0800b5c4
 8001f2c:	000f4240 	.word	0x000f4240
 8001f30:	20000300 	.word	0x20000300
 8001f34:	0800b660 	.word	0x0800b660
 8001f38:	0800b678 	.word	0x0800b678
 8001f3c:	0800b680 	.word	0x0800b680
 8001f40:	0800b694 	.word	0x0800b694
 8001f44:	40011000 	.word	0x40011000
 8001f48:	0800b6a0 	.word	0x0800b6a0
 8001f4c:	0800b6b0 	.word	0x0800b6b0
 8001f50:	0800b6c0 	.word	0x0800b6c0
 8001f54:	0800b6d0 	.word	0x0800b6d0
 8001f58:	0800b700 	.word	0x0800b700
 8001f5c:	0800b708 	.word	0x0800b708
 8001f60:	0800b718 	.word	0x0800b718
 8001f64:	0800b728 	.word	0x0800b728
 8001f68:	0800b738 	.word	0x0800b738
 8001f6c:	0800b748 	.word	0x0800b748
 8001f70:	0800b760 	.word	0x0800b760
 8001f74:	0800b768 	.word	0x0800b768
 8001f78:	0800b770 	.word	0x0800b770
 8001f7c:	0800b784 	.word	0x0800b784
 8001f80:	0800b78c 	.word	0x0800b78c
 8001f84:	0800b798 	.word	0x0800b798
 8001f88:	0800b7b0 	.word	0x0800b7b0
 8001f8c:	0800b7b8 	.word	0x0800b7b8
	  }
	  else if(MyStrNCmp(commandline, "eepr", 4) == 0)
 8001f90:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f94:	2204      	movs	r2, #4
 8001f96:	4931      	ldr	r1, [pc, #196]	; (800205c <main+0x7b4>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ffcd 	bl	8000f38 <MyStrNCmp>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d114      	bne.n	8001fce <main+0x726>
	  {
		  uint16_t addr;

	  	  sscanf(commandline, "%*s %x", &addr);
 8001fa4:	f107 020e 	add.w	r2, r7, #14
 8001fa8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fac:	492c      	ldr	r1, [pc, #176]	; (8002060 <main+0x7b8>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f006 fff4 	bl	8008f9c <siscanf>
	  	  printf("Addr[%x] data[%x]\n",addr, read_eeprom(addr));
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	461c      	mov	r4, r3
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fc2a 	bl	8001814 <read_eeprom>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	4827      	ldr	r0, [pc, #156]	; (8002064 <main+0x7bc>)
 8001fc8:	f006 ff5a 	bl	8008e80 <iprintf>
 8001fcc:	e536      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "eepw", 4) == 0)
 8001fce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4924      	ldr	r1, [pc, #144]	; (8002068 <main+0x7c0>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe ffae 	bl	8000f38 <MyStrNCmp>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <main+0x768>
	  {
		  uint16_t addr, data;

	  	  sscanf(commandline, "%*s %x %x", &addr, &data);
 8001fe2:	f107 030a 	add.w	r3, r7, #10
 8001fe6:	f107 020c 	add.w	r2, r7, #12
 8001fea:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8001fee:	491f      	ldr	r1, [pc, #124]	; (800206c <main+0x7c4>)
 8001ff0:	f006 ffd4 	bl	8008f9c <siscanf>
	  	  printf("addr = %x\ndata = %x\n", addr, data);
 8001ff4:	89bb      	ldrh	r3, [r7, #12]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <main+0x7c8>)
 8001ffe:	f006 ff3f 	bl	8008e80 <iprintf>
	  	  write_eeprom(addr, data);
 8002002:	89bb      	ldrh	r3, [r7, #12]
 8002004:	897a      	ldrh	r2, [r7, #10]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fc27 	bl	800185c <write_eeprom>
 800200e:	e515      	b.n	8001a3c <main+0x194>
	  }
	  else if(MyStrNCmp(commandline, "scan", 4) == 0)
 8002010:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002014:	2204      	movs	r2, #4
 8002016:	4917      	ldr	r1, [pc, #92]	; (8002074 <main+0x7cc>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ff8d 	bl	8000f38 <MyStrNCmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d117      	bne.n	8002054 <main+0x7ac>
	  {
		  uint16_t data1, data2, data3;

	  	  sscanf(commandline, "%*s %d %d %d", &data1, &data2, &data3);
 8002024:	1db9      	adds	r1, r7, #6
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	460b      	mov	r3, r1
 8002034:	4910      	ldr	r1, [pc, #64]	; (8002078 <main+0x7d0>)
 8002036:	f006 ffb1 	bl	8008f9c <siscanf>
	  	  printf("data1 = %x\ndata2 = %x\ndata3 = %x\n", data1, data2, data3);
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	1dbb      	adds	r3, r7, #6
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	480b      	ldr	r0, [pc, #44]	; (800207c <main+0x7d4>)
 800204e:	f006 ff17 	bl	8008e80 <iprintf>
 8002052:	e4f3      	b.n	8001a3c <main+0x194>
	  }
	  else
	  {
	  	  printf("command error\n");
 8002054:	480a      	ldr	r0, [pc, #40]	; (8002080 <main+0x7d8>)
 8002056:	f006 ff99 	bl	8008f8c <puts>
  {
 800205a:	e4ef      	b.n	8001a3c <main+0x194>
 800205c:	0800b7c0 	.word	0x0800b7c0
 8002060:	0800b768 	.word	0x0800b768
 8002064:	0800b7c8 	.word	0x0800b7c8
 8002068:	0800b7dc 	.word	0x0800b7dc
 800206c:	0800b78c 	.word	0x0800b78c
 8002070:	0800b798 	.word	0x0800b798
 8002074:	0800b7e4 	.word	0x0800b7e4
 8002078:	0800b7ec 	.word	0x0800b7ec
 800207c:	0800b7fc 	.word	0x0800b7fc
 8002080:	0800b820 	.word	0x0800b820

08002084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b096      	sub	sp, #88	; 0x58
 8002088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208e:	2228      	movs	r2, #40	; 0x28
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f006 feec 	bl	8008e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020b8:	2302      	movs	r3, #2
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020bc:	2301      	movs	r3, #1
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c0:	2310      	movs	r3, #16
 80020c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c4:	2302      	movs	r3, #2
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80020c8:	2300      	movs	r3, #0
 80020ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80020cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80020d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fc6a 	bl	80059b0 <HAL_RCC_OscConfig>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80020e2:	f000 f828 	bl	8002136 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e6:	230f      	movs	r3, #15
 80020e8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ea:	2302      	movs	r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	2102      	movs	r1, #2
 8002102:	4618      	mov	r0, r3
 8002104:	f003 ffc4 	bl	8006090 <HAL_RCC_ClockConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800210e:	f000 f812 	bl	8002136 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002112:	2302      	movs	r3, #2
 8002114:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4618      	mov	r0, r3
 8002120:	f004 f9f6 	bl	8006510 <HAL_RCCEx_PeriphCLKConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800212a:	f000 f804 	bl	8002136 <Error_Handler>
  }
}
 800212e:	bf00      	nop
 8002130:	3758      	adds	r7, #88	; 0x58
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
	...

08002158 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_SPI2_Init+0x64>)
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <MX_SPI2_Init+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <MX_SPI2_Init+0x64>)
 8002164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002168:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <MX_SPI2_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_SPI2_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_SPI2_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_SPI2_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_SPI2_Init+0x64>)
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_SPI2_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_SPI2_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_SPI2_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <MX_SPI2_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_SPI2_Init+0x64>)
 80021a4:	220a      	movs	r2, #10
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_SPI2_Init+0x64>)
 80021aa:	f004 fac7 	bl	800673c <HAL_SPI_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021b4:	f7ff ffbf 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200002a8 	.word	0x200002a8
 80021c0:	40003800 	.word	0x40003800

080021c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_SPI_MspInit+0x8c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d131      	bne.n	8002248 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_SPI_MspInit+0x90>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_SPI_MspInit+0x90>)
 80021ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ee:	61d3      	str	r3, [r2, #28]
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_SPI_MspInit+0x90>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_SPI_MspInit+0x90>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <HAL_SPI_MspInit+0x90>)
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_SPI_MspInit+0x90>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002214:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4619      	mov	r1, r3
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <HAL_SPI_MspInit+0x94>)
 800222a:	f002 f823 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800222e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4619      	mov	r1, r3
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <HAL_SPI_MspInit+0x94>)
 8002244:	f002 f816 	bl	8004274 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002248:	bf00      	nop
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40003800 	.word	0x40003800
 8002254:	40021000 	.word	0x40021000
 8002258:	40010c00 	.word	0x40010c00

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_MspInit+0x5c>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <HAL_MspInit+0x5c>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6193      	str	r3, [r2, #24]
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_MspInit+0x5c>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_MspInit+0x5c>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_MspInit+0x5c>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	61d3      	str	r3, [r2, #28]
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_MspInit+0x5c>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_MspInit+0x60>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_MspInit+0x60>)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <HardFault_Handler+0x4>

080022d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <MemManage_Handler+0x4>

080022d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <BusFault_Handler+0x4>

080022de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <UsageFault_Handler+0x4>

080022e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f000 fd60 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002318:	2001      	movs	r0, #1
 800231a:	f002 fa97 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}

08002322 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002326:	2002      	movs	r0, #2
 8002328:	f002 fa90 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}

08002330 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002334:	2004      	movs	r0, #4
 8002336:	f002 fa89 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <TIM3_IRQHandler+0x10>)
 8002346:	f005 f8a1 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000300 	.word	0x20000300

08002354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <USART2_IRQHandler+0x18>)
 800235a:	f006 fa1d 	bl	8008798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, nexMessage, 10);
 800235e:	220a      	movs	r2, #10
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <USART2_IRQHandler+0x1c>)
 8002362:	4802      	ldr	r0, [pc, #8]	; (800236c <USART2_IRQHandler+0x18>)
 8002364:	f006 f9c3 	bl	80086ee <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200003d0 	.word	0x200003d0
 8002370:	2000015c 	.word	0x2000015c

08002374 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002378:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800237c:	f002 fa66 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002380:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002384:	f002 fa62 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <DMA2_Channel3_IRQHandler+0x10>)
 8002392:	f001 fd33 	bl	8003dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200001a0 	.word	0x200001a0

080023a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e00a      	b.n	80023c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023b2:	f3af 8000 	nop.w
 80023b6:	4601      	mov	r1, r0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	60ba      	str	r2, [r7, #8]
 80023be:	b2ca      	uxtb	r2, r1
 80023c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dbf0      	blt.n	80023b2 <_read+0x12>
	}

return len;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e009      	b.n	8002400 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60ba      	str	r2, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fc6b 	bl	8002cd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	dbf1      	blt.n	80023ec <_write+0x12>
	}
	return len;
 8002408:	687b      	ldr	r3, [r7, #4]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_close>:

int _close(int file)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	return -1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002438:	605a      	str	r2, [r3, #4]
	return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <_isatty>:

int _isatty(int file)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
	return 1;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
	return 0;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <_sbrk+0x5c>)
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <_sbrk+0x60>)
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <_sbrk+0x64>)
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <_sbrk+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a4:	f006 fcba 	bl	8008e1c <__errno>
 80024a8:	4603      	mov	r3, r0
 80024aa:	220c      	movs	r2, #12
 80024ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e009      	b.n	80024c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <_sbrk+0x64>)
 80024c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20018000 	.word	0x20018000
 80024d4:	00001000 	.word	0x00001000
 80024d8:	20000150 	.word	0x20000150
 80024dc:	20000428 	.word	0x20000428

080024e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f2:	f107 0320 	add.w	r3, r7, #32
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <MX_TIM3_Init+0xac>)
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <MX_TIM3_Init+0xb0>)
 8002512:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <MX_TIM3_Init+0xac>)
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <MX_TIM3_Init+0xac>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <MX_TIM3_Init+0xac>)
 8002522:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002526:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_TIM3_Init+0xac>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_TIM3_Init+0xac>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002534:	4818      	ldr	r0, [pc, #96]	; (8002598 <MX_TIM3_Init+0xac>)
 8002536:	f004 fb77 	bl	8006c28 <HAL_TIM_PWM_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002540:	f7ff fdf9 	bl	8002136 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002544:	2320      	movs	r3, #32
 8002546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	4619      	mov	r1, r3
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <MX_TIM3_Init+0xac>)
 8002554:	f005 fdee 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800255e:	f7ff fdea 	bl	8002136 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	2360      	movs	r3, #96	; 0x60
 8002564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002566:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800256a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800256c:	2302      	movs	r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	2208      	movs	r2, #8
 8002578:	4619      	mov	r1, r3
 800257a:	4807      	ldr	r0, [pc, #28]	; (8002598 <MX_TIM3_Init+0xac>)
 800257c:	f005 f88e 	bl	800769c <HAL_TIM_PWM_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002586:	f7ff fdd6 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800258a:	4803      	ldr	r0, [pc, #12]	; (8002598 <MX_TIM3_Init+0xac>)
 800258c:	f000 f880 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000300 	.word	0x20000300
 800259c:	40000400 	.word	0x40000400

080025a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a6:	463b      	mov	r3, r7
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <MX_TIM6_Init+0x60>)
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <MX_TIM6_Init+0x64>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_TIM6_Init+0x60>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_TIM6_Init+0x60>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_TIM6_Init+0x60>)
 80025c2:	2263      	movs	r2, #99	; 0x63
 80025c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_TIM6_Init+0x60>)
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <MX_TIM6_Init+0x60>)
 80025ce:	f004 fa3b 	bl	8006a48 <HAL_TIM_Base_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80025d8:	f7ff fdad 	bl	8002136 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025dc:	2320      	movs	r3, #32
 80025de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025e4:	463b      	mov	r3, r7
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_TIM6_Init+0x60>)
 80025ea:	f005 fda3 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80025f4:	f7ff fd9f 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000348 	.word	0x20000348
 8002604:	40001000 	.word	0x40001000

08002608 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_TIM_PWM_MspInit+0x44>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d113      	bne.n	8002642 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_TIM_PWM_MspInit+0x48>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_TIM_PWM_MspInit+0x48>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_TIM_PWM_MspInit+0x48>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	201d      	movs	r0, #29
 8002638:	f001 f87a 	bl	8003730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263c:	201d      	movs	r0, #29
 800263e:	f001 f8a3 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40000400 	.word	0x40000400
 8002650:	40021000 	.word	0x40021000

08002654 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_TIM_Base_MspInit+0x34>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10b      	bne.n	800267e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_TIM_Base_MspInit+0x38>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_TIM_Base_MspInit+0x38>)
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_TIM_Base_MspInit+0x38>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40001000 	.word	0x40001000
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_TIM_MspPostInit+0x80>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12a      	bne.n	8002706 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_TIM_MspPostInit+0x84>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_TIM_MspPostInit+0x84>)
 80026b6:	f043 0310 	orr.w	r3, r3, #16
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_TIM_MspPostInit+0x84>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = M_STEP_Pin;
 80026c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(M_STEP_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	4619      	mov	r1, r3
 80026dc:	480e      	ldr	r0, [pc, #56]	; (8002718 <HAL_TIM_MspPostInit+0x88>)
 80026de:	f001 fdc9 	bl	8004274 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_MspPostInit+0x8c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <HAL_TIM_MspPostInit+0x8c>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40000400 	.word	0x40000400
 8002714:	40021000 	.word	0x40021000
 8002718:	40011000 	.word	0x40011000
 800271c:	40010000 	.word	0x40010000

08002720 <HAL_TIM_PWM_PulseFinishedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
//	printf("PulseFinishedCallback\n");
	if(htim->Instance == TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d126      	bne.n	8002780 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
	{
		if(tbl_index <90)
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	2b59      	cmp	r3, #89	; 0x59
 8002738:	d822      	bhi.n	8002780 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
		{
			htim3.Instance->CCR3 = (1000000/accel_tbl[tbl_index])/2;
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002742:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002746:	461a      	mov	r2, r3
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800274a:	fb93 f3f2 	sdiv	r3, r3, r2
 800274e:	0fda      	lsrs	r2, r3, #31
 8002750:	4413      	add	r3, r2
 8002752:	105b      	asrs	r3, r3, #1
 8002754:	461a      	mov	r2, r3
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->ARR = 1000000/accel_tbl[tbl_index++] - 1;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	b291      	uxth	r1, r2
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8002766:	8011      	strh	r1, [r2, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800276c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002770:	461a      	mov	r2, r3
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002774:	fb93 f3f2 	sdiv	r3, r3, r2
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40000400 	.word	0x40000400
 8002790:	2000015a 	.word	0x2000015a
 8002794:	20000098 	.word	0x20000098
 8002798:	000f4240 	.word	0x000f4240
 800279c:	20000300 	.word	0x20000300

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
//	printf("PeriodElapsedCallback\n");

}
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
//	printf("OC_DelayElapsedCallback\n");
	if(htim->Instance == TIM3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a37      	ldr	r2, [pc, #220]	; (800288c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d168      	bne.n	8002884 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
	{
		if(drv8880_state == 1)
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d164      	bne.n	8002884 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
		{
			if(dir == 0)
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11c      	bne.n	80027fc <HAL_TIM_OC_DelayElapsedCallback+0x5c>
			{
				if(cnt < step_cnt)
 80027c2:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b35      	ldr	r3, [pc, #212]	; (800289c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d205      	bcs.n	80027da <HAL_TIM_OC_DelayElapsedCallback+0x3a>
				{
					cnt++;
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	4a30      	ldr	r2, [pc, #192]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80027d6:	6013      	str	r3, [r2, #0]
					}
				}
			}
		}
	}
}
 80027d8:	e054      	b.n	8002884 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
					cnt = 0;
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
					dir = 1;
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
					tbl_index = 0;
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	801a      	strh	r2, [r3, #0]
					M_DIR_GPIO_Port->BSRR = M_DIR_Pin;
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	611a      	str	r2, [r3, #16]
					STATUS1_GPIO_Port->BRR = STATUS1_Pin;
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80027f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027f8:	615a      	str	r2, [r3, #20]
}
 80027fa:	e043      	b.n	8002884 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
				if(cnt < step_cnt)
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d205      	bcs.n	8002814 <HAL_TIM_OC_DelayElapsedCallback+0x74>
					cnt++;
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8002810:	6013      	str	r3, [r2, #0]
}
 8002812:	e037      	b.n	8002884 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
					cnt = 0;
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
					dir = 0;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
					tbl_index = 0;
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002822:	2200      	movs	r2, #0
 8002824:	801a      	strh	r2, [r3, #0]
					shot_cnt--;
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3b01      	subs	r3, #1
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 800282e:	6013      	str	r3, [r2, #0]
					M_DIR_GPIO_Port->BRR = M_DIR_Pin;
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	615a      	str	r2, [r3, #20]
					STATUS1_GPIO_Port->BSRR = STATUS1_Pin;
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800283c:	611a      	str	r2, [r3, #16]
					if(shot_cnt == 0)
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11e      	bne.n	8002884 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
						HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8002846:	2108      	movs	r1, #8
 8002848:	4818      	ldr	r0, [pc, #96]	; (80028ac <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800284a:	f004 fcab 	bl	80071a4 <HAL_TIM_PWM_Stop_IT>
						printf("drv8880 disable\n");
 800284e:	4818      	ldr	r0, [pc, #96]	; (80028b0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002850:	f006 fb9c 	bl	8008f8c <puts>
						drv8880_disable();
 8002854:	f7fe fccc 	bl	80011f0 <drv8880_disable>
						HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin,GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	4811      	ldr	r0, [pc, #68]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002860:	f001 ffc2 	bl	80047e8 <HAL_GPIO_WritePin>
						tbl_index = 0;
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002866:	2200      	movs	r2, #0
 8002868:	801a      	strh	r2, [r3, #0]
						htim3.Instance->CCR3 = 500;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002872:	63da      	str	r2, [r3, #60]	; 0x3c
						htim3.Instance->ARR = 999;
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
						shot_cnt = 1; //default value
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40000400 	.word	0x40000400
 8002890:	20000094 	.word	0x20000094
 8002894:	20000158 	.word	0x20000158
 8002898:	20000154 	.word	0x20000154
 800289c:	20000000 	.word	0x20000000
 80028a0:	2000015a 	.word	0x2000015a
 80028a4:	40011000 	.word	0x40011000
 80028a8:	20000004 	.word	0x20000004
 80028ac:	20000300 	.word	0x20000300
 80028b0:	0800b830 	.word	0x0800b830

080028b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <MX_USART1_UART_Init+0x50>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_USART1_UART_Init+0x4c>)
 80028ec:	f005 fd18 	bl	8008320 <HAL_UART_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028f6:	f7ff fc1e 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000390 	.word	0x20000390
 8002904:	40013800 	.word	0x40013800

08002908 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <MX_USART2_UART_Init+0x50>)
 8002910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 8002914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <MX_USART2_UART_Init+0x4c>)
 8002940:	f005 fcee 	bl	8008320 <HAL_UART_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800294a:	f7ff fbf4 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200003d0 	.word	0x200003d0
 8002958:	40004400 	.word	0x40004400

0800295c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a3b      	ldr	r2, [pc, #236]	; (8002a64 <HAL_UART_MspInit+0x108>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d132      	bne.n	80029e2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a39      	ldr	r2, [pc, #228]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 8002982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	4619      	mov	r1, r3
 80029c0:	482a      	ldr	r0, [pc, #168]	; (8002a6c <HAL_UART_MspInit+0x110>)
 80029c2:	f001 fc57 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0318 	add.w	r3, r7, #24
 80029d8:	4619      	mov	r1, r3
 80029da:	4824      	ldr	r0, [pc, #144]	; (8002a6c <HAL_UART_MspInit+0x110>)
 80029dc:	f001 fc4a 	bl	8004274 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029e0:	e03c      	b.n	8002a5c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <HAL_UART_MspInit+0x114>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d137      	bne.n	8002a5c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f6:	61d3      	str	r3, [r2, #28]
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_UART_MspInit+0x10c>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0318 	add.w	r3, r7, #24
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480f      	ldr	r0, [pc, #60]	; (8002a6c <HAL_UART_MspInit+0x110>)
 8002a30:	f001 fc20 	bl	8004274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a34:	2308      	movs	r3, #8
 8002a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 0318 	add.w	r3, r7, #24
 8002a44:	4619      	mov	r1, r3
 8002a46:	4809      	ldr	r0, [pc, #36]	; (8002a6c <HAL_UART_MspInit+0x110>)
 8002a48:	f001 fc14 	bl	8004274 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2101      	movs	r1, #1
 8002a50:	2026      	movs	r0, #38	; 0x26
 8002a52:	f000 fe6d 	bl	8003730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a56:	2026      	movs	r0, #38	; 0x26
 8002a58:	f000 fe96 	bl	8003788 <HAL_NVIC_EnableIRQ>
}
 8002a5c:	bf00      	nop
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010800 	.word	0x40010800
 8002a70:	40004400 	.word	0x40004400

08002a74 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a78:	b08c      	sub	sp, #48	; 0x30
 8002a7a:	af08      	add	r7, sp, #32
 8002a7c:	6078      	str	r0, [r7, #4]
	uint8_t cnt[2]={0};
 8002a7e:	2300      	movs	r3, #0
 8002a80:	81bb      	strh	r3, [r7, #12]

	if(huart->Instance == USART2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a64      	ldr	r2, [pc, #400]	; (8002c18 <HAL_UART_RxCpltCallback+0x1a4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 80c0 	bne.w	8002c0e <HAL_UART_RxCpltCallback+0x19a>
	{
		if(nexMessage[0]==0x00 && nexMessage[1]==0x00 && nexMessage[2]==0x00)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_RxCpltCallback+0x3a>
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <HAL_UART_RxCpltCallback+0x3a>
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_UART_RxCpltCallback+0x3a>
		{//Nextion Booting
			printf("Nextion LCD Booting complete!!\n");
 8002aa6:	485e      	ldr	r0, [pc, #376]	; (8002c20 <HAL_UART_RxCpltCallback+0x1ac>)
 8002aa8:	f006 fa70 	bl	8008f8c <puts>
		{//Nextion Booting
 8002aac:	e085      	b.n	8002bba <HAL_UART_RxCpltCallback+0x146>
		}
		else if(nexMessage[0]==0x65 && nexMessage[1]==0x00 && (nexMessage[2]==0x01 || nexMessage[2]==0x02))
 8002aae:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b65      	cmp	r3, #101	; 0x65
 8002ab4:	d125      	bne.n	8002b02 <HAL_UART_RxCpltCallback+0x8e>
 8002ab6:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d121      	bne.n	8002b02 <HAL_UART_RxCpltCallback+0x8e>
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ac0:	789b      	ldrb	r3, [r3, #2]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d003      	beq.n	8002ace <HAL_UART_RxCpltCallback+0x5a>
 8002ac6:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ac8:	789b      	ldrb	r3, [r3, #2]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d119      	bne.n	8002b02 <HAL_UART_RxCpltCallback+0x8e>
		{//UP DOWN
			cnt[0] = nexMessage[7];
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ad0:	79db      	ldrb	r3, [r3, #7]
 8002ad2:	733b      	strb	r3, [r7, #12]
			cnt[1] = nexMessage[8];
 8002ad4:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ad6:	7a1b      	ldrb	r3, [r3, #8]
 8002ad8:	737b      	strb	r3, [r7, #13]
			step_cnt = (nexMessage[8]<<8 | nexMessage[7])*800;
 8002ada:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002adc:	7a1b      	ldrb	r3, [r3, #8]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002ae2:	79d2      	ldrb	r2, [r2, #7]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_UART_RxCpltCallback+0x1b0>)
 8002af2:	601a      	str	r2, [r3, #0]
			printf("step_cnt value : %d\n",step_cnt);
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_UART_RxCpltCallback+0x1b0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	484b      	ldr	r0, [pc, #300]	; (8002c28 <HAL_UART_RxCpltCallback+0x1b4>)
 8002afc:	f006 f9c0 	bl	8008e80 <iprintf>
		{//UP DOWN
 8002b00:	e05b      	b.n	8002bba <HAL_UART_RxCpltCallback+0x146>
		}
		else if(nexMessage[0]==0x65 && nexMessage[1]==0x00 && nexMessage[2]==0x03)
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b65      	cmp	r3, #101	; 0x65
 8002b08:	d12c      	bne.n	8002b64 <HAL_UART_RxCpltCallback+0xf0>
 8002b0a:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d128      	bne.n	8002b64 <HAL_UART_RxCpltCallback+0xf0>
 8002b12:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b14:	789b      	ldrb	r3, [r3, #2]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d124      	bne.n	8002b64 <HAL_UART_RxCpltCallback+0xf0>
		{//START
			cnt[0] = nexMessage[7];
 8002b1a:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b1c:	79db      	ldrb	r3, [r3, #7]
 8002b1e:	733b      	strb	r3, [r7, #12]
			cnt[1] = nexMessage[8];
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b22:	7a1b      	ldrb	r3, [r3, #8]
 8002b24:	737b      	strb	r3, [r7, #13]
			shot_cnt = nexMessage[8]<<8 | nexMessage[7];
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b28:	7a1b      	ldrb	r3, [r3, #8]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b2e:	79d2      	ldrb	r2, [r2, #7]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_UART_RxCpltCallback+0x1b8>)
 8002b36:	601a      	str	r2, [r3, #0]
			printf("shot_cnt value : %d\n",shot_cnt);
 8002b38:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <HAL_UART_RxCpltCallback+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	483c      	ldr	r0, [pc, #240]	; (8002c30 <HAL_UART_RxCpltCallback+0x1bc>)
 8002b40:	f006 f99e 	bl	8008e80 <iprintf>
			printf("drv8880 enable\n");
 8002b44:	483b      	ldr	r0, [pc, #236]	; (8002c34 <HAL_UART_RxCpltCallback+0x1c0>)
 8002b46:	f006 fa21 	bl	8008f8c <puts>
			drv8880_enable();
 8002b4a:	f7fe fb3b 	bl	80011c4 <drv8880_enable>
			HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b54:	4838      	ldr	r0, [pc, #224]	; (8002c38 <HAL_UART_RxCpltCallback+0x1c4>)
 8002b56:	f001 fe47 	bl	80047e8 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3); //change USART2 interrupt priority 0 -> 1
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4837      	ldr	r0, [pc, #220]	; (8002c3c <HAL_UART_RxCpltCallback+0x1c8>)
 8002b5e:	f004 f953 	bl	8006e08 <HAL_TIM_PWM_Start_IT>
		{//START
 8002b62:	e02a      	b.n	8002bba <HAL_UART_RxCpltCallback+0x146>
		}
		else if(nexMessage[0]==0x65 && nexMessage[1]==0x00 && nexMessage[2]==0x04)
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b65      	cmp	r3, #101	; 0x65
 8002b6a:	d126      	bne.n	8002bba <HAL_UART_RxCpltCallback+0x146>
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d122      	bne.n	8002bba <HAL_UART_RxCpltCallback+0x146>
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002b76:	789b      	ldrb	r3, [r3, #2]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d11e      	bne.n	8002bba <HAL_UART_RxCpltCallback+0x146>
		{//STOP
	  		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8002b7c:	2108      	movs	r1, #8
 8002b7e:	482f      	ldr	r0, [pc, #188]	; (8002c3c <HAL_UART_RxCpltCallback+0x1c8>)
 8002b80:	f004 fb10 	bl	80071a4 <HAL_TIM_PWM_Stop_IT>
	  		printf("drv8880 disable\n");
 8002b84:	482e      	ldr	r0, [pc, #184]	; (8002c40 <HAL_UART_RxCpltCallback+0x1cc>)
 8002b86:	f006 fa01 	bl	8008f8c <puts>
	  		drv8880_disable();
 8002b8a:	f7fe fb31 	bl	80011f0 <drv8880_disable>
	  		HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin,GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b94:	4828      	ldr	r0, [pc, #160]	; (8002c38 <HAL_UART_RxCpltCallback+0x1c4>)
 8002b96:	f001 fe27 	bl	80047e8 <HAL_GPIO_WritePin>
	  		tbl_index = 0;
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_UART_RxCpltCallback+0x1d0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	801a      	strh	r2, [r3, #0]
	  		htim3.Instance->CCR3 = 500;
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_UART_RxCpltCallback+0x1c8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c
	  		htim3.Instance->ARR = 999;
 8002baa:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_UART_RxCpltCallback+0x1c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
	  		shot_cnt = 1; //default value
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_UART_RxCpltCallback+0x1b8>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
		}
		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	469c      	mov	ip, r3
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bc8:	789b      	ldrb	r3, [r3, #2]
 8002bca:	4698      	mov	r8, r3
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	4619      	mov	r1, r3
				nexMessage[5],nexMessage[6],nexMessage[7],nexMessage[8],nexMessage[9]);
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bda:	795b      	ldrb	r3, [r3, #5]
		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],
 8002bdc:	4618      	mov	r0, r3
				nexMessage[5],nexMessage[6],nexMessage[7],nexMessage[8],nexMessage[9]);
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002be0:	799b      	ldrb	r3, [r3, #6]
		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],
 8002be2:	461c      	mov	r4, r3
				nexMessage[5],nexMessage[6],nexMessage[7],nexMessage[8],nexMessage[9]);
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002be6:	79db      	ldrb	r3, [r3, #7]
		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],
 8002be8:	461d      	mov	r5, r3
				nexMessage[5],nexMessage[6],nexMessage[7],nexMessage[8],nexMessage[9]);
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bec:	7a1b      	ldrb	r3, [r3, #8]
		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],
 8002bee:	461e      	mov	r6, r3
				nexMessage[5],nexMessage[6],nexMessage[7],nexMessage[8],nexMessage[9]);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_UART_RxCpltCallback+0x1a8>)
 8002bf2:	7a5b      	ldrb	r3, [r3, #9]
		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],
 8002bf4:	9306      	str	r3, [sp, #24]
 8002bf6:	9605      	str	r6, [sp, #20]
 8002bf8:	9504      	str	r5, [sp, #16]
 8002bfa:	9403      	str	r4, [sp, #12]
 8002bfc:	9002      	str	r0, [sp, #8]
 8002bfe:	9101      	str	r1, [sp, #4]
 8002c00:	9200      	str	r2, [sp, #0]
 8002c02:	4643      	mov	r3, r8
 8002c04:	4672      	mov	r2, lr
 8002c06:	4661      	mov	r1, ip
 8002c08:	480f      	ldr	r0, [pc, #60]	; (8002c48 <HAL_UART_RxCpltCallback+0x1d4>)
 8002c0a:	f006 f939 	bl	8008e80 <iprintf>
	}
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	2000015c 	.word	0x2000015c
 8002c20:	0800b840 	.word	0x0800b840
 8002c24:	20000000 	.word	0x20000000
 8002c28:	0800b860 	.word	0x0800b860
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	0800b878 	.word	0x0800b878
 8002c34:	0800b890 	.word	0x0800b890
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	20000300 	.word	0x20000300
 8002c40:	0800b8a0 	.word	0x0800b8a0
 8002c44:	2000015a 	.word	0x2000015a
 8002c48:	0800b8b0 	.word	0x0800b8b0

08002c4c <DebugUart_GetChar>:

uint8_t DebugUart_GetChar(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    uint8_t data;

    /* Loop until the end of transmission */
    while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == RESET);
 8002c52:	bf00      	nop
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <DebugUart_GetChar+0x30>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d1f8      	bne.n	8002c54 <DebugUart_GetChar+0x8>

    /* Write a character to the USART */
    HAL_UART_Receive(&huart1, &data, 1, 0x100);
 8002c62:	1df9      	adds	r1, r7, #7
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4804      	ldr	r0, [pc, #16]	; (8002c7c <DebugUart_GetChar+0x30>)
 8002c6c:	f005 fca0 	bl	80085b0 <HAL_UART_Receive>

    return(data);
 8002c70:	79fb      	ldrb	r3, [r7, #7]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000390 	.word	0x20000390

08002c80 <DebugUart_PutChar>:

void DebugUart_PutChar(uint8_t ch)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002c8a:	1df9      	adds	r1, r7, #7
 8002c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c90:	2201      	movs	r2, #1
 8002c92:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <DebugUart_PutChar+0x20>)
 8002c94:	f005 fbfa 	bl	800848c <HAL_UART_Transmit>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000390 	.word	0x20000390

08002ca4 <DebugUart_PutStr>:

void DebugUart_PutStr(uint8_t *string)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    while(*string != '\0')
 8002cac:	e007      	b.n	8002cbe <DebugUart_PutStr+0x1a>
    {
        DebugUart_PutChar(*string);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ffe4 	bl	8002c80 <DebugUart_PutChar>
        string++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
    while(*string != '\0')
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f3      	bne.n	8002cae <DebugUart_PutStr+0xa>
    }
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b0a      	cmp	r3, #10
 8002cdc:	d102      	bne.n	8002ce4 <__io_putchar+0x14>
		DebugUart_PutChar('\r');
 8002cde:	200d      	movs	r0, #13
 8002ce0:	f7ff ffce 	bl	8002c80 <DebugUart_PutChar>

	DebugUart_PutChar( (uint8_t)ch );
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ffc9 	bl	8002c80 <DebugUart_PutChar>

	return ch;
 8002cee:	687b      	ldr	r3, [r7, #4]

//  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x01);
//  return ch;
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cfa:	e003      	b.n	8002d04 <LoopCopyDataInit>

08002cfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d02:	3104      	adds	r1, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d04:	480a      	ldr	r0, [pc, #40]	; (8002d30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d0c:	d3f6      	bcc.n	8002cfc <CopyDataInit>
  ldr r2, =_sbss
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d10:	e002      	b.n	8002d18 <LoopFillZerobss>

08002d12 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d14:	f842 3b04 	str.w	r3, [r2], #4

08002d18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d1c:	d3f9      	bcc.n	8002d12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d1e:	f7ff fbdf 	bl	80024e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d22:	f006 f881 	bl	8008e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d26:	f7fe fdbf 	bl	80018a8 <main>
  bx lr
 8002d2a:	4770      	bx	lr
  ldr r3, =_sidata
 8002d2c:	0800c168 	.word	0x0800c168
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d34:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002d38:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002d3c:	20000424 	.word	0x20000424

08002d40 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC1_2_IRQHandler>
	...

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_Init+0x28>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_Init+0x28>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f000 fccb 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f000 f808 	bl	8002d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d60:	f7ff fa7c 	bl	800225c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40022000 	.word	0x40022000

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x54>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_InitTick+0x58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd12 	bl	80037b8 <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00e      	b.n	8002dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d80a      	bhi.n	8002dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da4:	2200      	movs	r2, #0
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f000 fcc0 	bl	8003730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db0:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_InitTick+0x5c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_IncTick+0x1c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_IncTick+0x20>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_IncTick+0x20>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20000010 	.word	0x20000010
 8002df0:	20000410 	.word	0x20000410

08002df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <HAL_GetTick+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000410 	.word	0x20000410

08002e08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e188      	b.n	800313c <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a8c      	ldr	r2, [pc, #560]	; (8003060 <HAL_ADC_Init+0x258>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_ADC_Init+0x4a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a8a      	ldr	r2, [pc, #552]	; (8003064 <HAL_ADC_Init+0x25c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_ADC_Init+0x4a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a89      	ldr	r2, [pc, #548]	; (8003068 <HAL_ADC_Init+0x260>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_ADC_Init+0x4a>
 8002e48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002e4c:	4887      	ldr	r0, [pc, #540]	; (800306c <HAL_ADC_Init+0x264>)
 8002e4e:	f7ff f978 	bl	8002142 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_ADC_Init+0x66>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e62:	d004      	beq.n	8002e6e <HAL_ADC_Init+0x66>
 8002e64:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002e68:	4880      	ldr	r0, [pc, #512]	; (800306c <HAL_ADC_Init+0x264>)
 8002e6a:	f7ff f96a 	bl	8002142 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_ADC_Init+0x82>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Init+0x82>
 8002e80:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002e84:	4879      	ldr	r0, [pc, #484]	; (800306c <HAL_ADC_Init+0x264>)
 8002e86:	f7ff f95c 	bl	8002142 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7b1b      	ldrb	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_ADC_Init+0x9c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d004      	beq.n	8002ea4 <HAL_ADC_Init+0x9c>
 8002e9a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002e9e:	4873      	ldr	r0, [pc, #460]	; (800306c <HAL_ADC_Init+0x264>)
 8002ea0:	f7ff f94f 	bl	8002142 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d044      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eb4:	d03f      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002ebe:	d03a      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ec8:	d035      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002ed2:	d030      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002edc:	d02b      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d027      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eee:	d022      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002ef8:	d01d      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002f02:	d018      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f0c:	d013      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f16:	d00e      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f20:	d009      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f2a:	d004      	beq.n	8002f36 <HAL_ADC_Init+0x12e>
 8002f2c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002f30:	484e      	ldr	r0, [pc, #312]	; (800306c <HAL_ADC_Init+0x264>)
 8002f32:	f7ff f906 	bl	8002142 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02a      	beq.n	8002f94 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_ADC_Init+0x146>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d904      	bls.n	8002f58 <HAL_ADC_Init+0x150>
 8002f4e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002f52:	4846      	ldr	r0, [pc, #280]	; (800306c <HAL_ADC_Init+0x264>)
 8002f54:	f7ff f8f5 	bl	8002142 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7d1b      	ldrb	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_ADC_Init+0x16a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d004      	beq.n	8002f72 <HAL_ADC_Init+0x16a>
 8002f68:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002f6c:	483f      	ldr	r0, [pc, #252]	; (800306c <HAL_ADC_Init+0x264>)
 8002f6e:	f7ff f8e8 	bl	8002142 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7d1b      	ldrb	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00c      	beq.n	8002f94 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_ADC_Init+0x182>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d904      	bls.n	8002f94 <HAL_ADC_Init+0x18c>
 8002f8a:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002f8e:	4837      	ldr	r0, [pc, #220]	; (800306c <HAL_ADC_Init+0x264>)
 8002f90:	f7ff f8d7 	bl	8002142 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd ff36 	bl	8000e1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa97 	bl	80034e4 <ADC_ConversionStop_Disable>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 80b1 	bne.w	800312a <HAL_ADC_Init+0x322>
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 80ad 	bne.w	800312a <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fd8:	f023 0302 	bic.w	r3, r3, #2
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	491e      	ldr	r1, [pc, #120]	; (8003068 <HAL_ADC_Init+0x260>)
 8002fee:	428b      	cmp	r3, r1
 8002ff0:	d10a      	bne.n	8003008 <HAL_ADC_Init+0x200>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ffa:	d002      	beq.n	8003002 <HAL_ADC_Init+0x1fa>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	e004      	b.n	800300c <HAL_ADC_Init+0x204>
 8003002:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003006:	e001      	b.n	800300c <HAL_ADC_Init+0x204>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800300c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7b1b      	ldrb	r3, [r3, #12]
 8003012:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003014:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003024:	d003      	beq.n	800302e <HAL_ADC_Init+0x226>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_ADC_Init+0x22c>
 800302e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003032:	e000      	b.n	8003036 <HAL_ADC_Init+0x22e>
 8003034:	2300      	movs	r3, #0
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7d1b      	ldrb	r3, [r3, #20]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d121      	bne.n	8003088 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7b1b      	ldrb	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	3b01      	subs	r3, #1
 8003052:	035a      	lsls	r2, r3, #13
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e013      	b.n	8003088 <HAL_ADC_Init+0x280>
 8003060:	40012400 	.word	0x40012400
 8003064:	40012800 	.word	0x40012800
 8003068:	40013c00 	.word	0x40013c00
 800306c:	0800b8d0 	.word	0x0800b8d0
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_ADC_Init+0x33c>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d003      	beq.n	80030c2 <HAL_ADC_Init+0x2ba>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d104      	bne.n	80030cc <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	430a      	orrs	r2, r1
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_ADC_Init+0x340>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10b      	bne.n	8003108 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003106:	e018      	b.n	800313a <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f023 0312 	bic.w	r3, r3, #18
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003128:	e007      	b.n	800313a <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	ffe1f7fd 	.word	0xffe1f7fd
 8003148:	ff1f0efe 	.word	0xff1f0efe

0800314c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a8b      	ldr	r2, [pc, #556]	; (8003390 <HAL_ADC_ConfigChannel+0x244>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x3a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a89      	ldr	r2, [pc, #548]	; (8003394 <HAL_ADC_ConfigChannel+0x248>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x3a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a88      	ldr	r2, [pc, #544]	; (8003398 <HAL_ADC_ConfigChannel+0x24c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x3a>
 800317c:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8003180:	4886      	ldr	r0, [pc, #536]	; (800339c <HAL_ADC_ConfigChannel+0x250>)
 8003182:	f7fe ffde 	bl	8002142 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d048      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d044      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d040      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d03c      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d038      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d034      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d030      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b07      	cmp	r3, #7
 80031c4:	d02c      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d028      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d024      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b0a      	cmp	r3, #10
 80031dc:	d020      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b0b      	cmp	r3, #11
 80031e4:	d01c      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d018      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b0d      	cmp	r3, #13
 80031f4:	d014      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b0e      	cmp	r3, #14
 80031fc:	d010      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d00c      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d008      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b11      	cmp	r3, #17
 8003214:	d004      	beq.n	8003220 <HAL_ADC_ConfigChannel+0xd4>
 8003216:	f240 71d2 	movw	r1, #2002	; 0x7d2
 800321a:	4860      	ldr	r0, [pc, #384]	; (800339c <HAL_ADC_ConfigChannel+0x250>)
 800321c:	f7fe ff91 	bl	8002142 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d040      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d03c      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d038      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d034      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d030      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d02c      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b07      	cmp	r3, #7
 8003256:	d028      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d024      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d020      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b0a      	cmp	r3, #10
 800326e:	d01c      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b0b      	cmp	r3, #11
 8003276:	d018      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d014      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b0d      	cmp	r3, #13
 8003286:	d010      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b0e      	cmp	r3, #14
 800328e:	d00c      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d008      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b10      	cmp	r3, #16
 800329e:	d004      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x15e>
 80032a0:	f240 71d3 	movw	r1, #2003	; 0x7d3
 80032a4:	483d      	ldr	r0, [pc, #244]	; (800339c <HAL_ADC_ConfigChannel+0x250>)
 80032a6:	f7fe ff4c 	bl	8002142 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d01c      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d018      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d014      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d010      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d00c      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d008      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d004      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x1a8>
 80032ea:	f240 71d4 	movw	r1, #2004	; 0x7d4
 80032ee:	482b      	ldr	r0, [pc, #172]	; (800339c <HAL_ADC_ConfigChannel+0x250>)
 80032f0:	f7fe ff27 	bl	8002142 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x1b6>
 80032fe:	2302      	movs	r3, #2
 8003300:	e0e5      	b.n	80034ce <HAL_ADC_ConfigChannel+0x382>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d81c      	bhi.n	800334c <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b05      	subs	r3, #5
 8003324:	221f      	movs	r2, #31
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	4019      	ands	r1, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	3b05      	subs	r3, #5
 800333e:	fa00 f203 	lsl.w	r2, r0, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
 800334a:	e045      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d825      	bhi.n	80033a0 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b23      	subs	r3, #35	; 0x23
 8003366:	221f      	movs	r2, #31
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	4019      	ands	r1, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	3b23      	subs	r3, #35	; 0x23
 8003380:	fa00 f203 	lsl.w	r2, r0, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
 800338c:	e024      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x28c>
 800338e:	bf00      	nop
 8003390:	40012400 	.word	0x40012400
 8003394:	40012800 	.word	0x40012800
 8003398:	40013c00 	.word	0x40013c00
 800339c:	0800b8d0 	.word	0x0800b8d0
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	3b41      	subs	r3, #65	; 0x41
 80033b2:	221f      	movs	r2, #31
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4019      	ands	r1, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b41      	subs	r3, #65	; 0x41
 80033cc:	fa00 f203 	lsl.w	r2, r0, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d91c      	bls.n	800341a <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	3b1e      	subs	r3, #30
 80033f2:	2207      	movs	r2, #7
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	4019      	ands	r1, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6898      	ldr	r0, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	3b1e      	subs	r3, #30
 800340c:	fa00 f203 	lsl.w	r2, r0, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	e019      	b.n	800344e <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6919      	ldr	r1, [r3, #16]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	2207      	movs	r2, #7
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	4019      	ands	r1, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6898      	ldr	r0, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	fa00 f203 	lsl.w	r2, r0, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b10      	cmp	r3, #16
 8003454:	d003      	beq.n	800345e <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800345a:	2b11      	cmp	r3, #17
 800345c:	d132      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_ADC_ConfigChannel+0x38c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d125      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d126      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003484:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b10      	cmp	r3, #16
 800348c:	d11a      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_ADC_ConfigChannel+0x390>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <HAL_ADC_ConfigChannel+0x394>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	0c9a      	lsrs	r2, r3, #18
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034a4:	e002      	b.n	80034ac <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f9      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x35a>
 80034b2:	e007      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40012400 	.word	0x40012400
 80034dc:	20000008 	.word	0x20000008
 80034e0:	431bde83 	.word	0x431bde83

080034e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d127      	bne.n	800354e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800350e:	f7ff fc71 	bl	8002df4 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003514:	e014      	b.n	8003540 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003516:	f7ff fc6d 	bl	8002df4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d90d      	bls.n	8003540 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	f043 0210 	orr.w	r2, r3, #16
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e007      	b.n	8003550 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d0e3      	beq.n	8003516 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4906      	ldr	r1, [pc, #24]	; (80035f0 <__NVIC_EnableIRQ+0x34>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
         );
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f7ff ff90 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d00f      	beq.n	800371e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d00c      	beq.n	800371e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d009      	beq.n	800371e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d006      	beq.n	800371e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d003      	beq.n	800371e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003716:	2192      	movs	r1, #146	; 0x92
 8003718:	4804      	ldr	r0, [pc, #16]	; (800372c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800371a:	f7fe fd12 	bl	8002142 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff1a 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	0800b908 	.word	0x0800b908

08003730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d903      	bls.n	8003750 <HAL_NVIC_SetPriority+0x20>
 8003748:	21aa      	movs	r1, #170	; 0xaa
 800374a:	480e      	ldr	r0, [pc, #56]	; (8003784 <HAL_NVIC_SetPriority+0x54>)
 800374c:	f7fe fcf9 	bl	8002142 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d903      	bls.n	800375e <HAL_NVIC_SetPriority+0x2e>
 8003756:	21ab      	movs	r1, #171	; 0xab
 8003758:	480a      	ldr	r0, [pc, #40]	; (8003784 <HAL_NVIC_SetPriority+0x54>)
 800375a:	f7fe fcf2 	bl	8002142 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375e:	f7ff ff1f 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003762:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	6978      	ldr	r0, [r7, #20]
 800376a:	f7ff ff6d 	bl	8003648 <NVIC_EncodePriority>
 800376e:	4602      	mov	r2, r0
 8003770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff3c 	bl	80035f4 <__NVIC_SetPriority>
}
 800377c:	bf00      	nop
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	0800b908 	.word	0x0800b908

08003788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da03      	bge.n	80037a2 <HAL_NVIC_EnableIRQ+0x1a>
 800379a:	21be      	movs	r1, #190	; 0xbe
 800379c:	4805      	ldr	r0, [pc, #20]	; (80037b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800379e:	f7fe fcd0 	bl	8002142 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ff08 	bl	80035bc <__NVIC_EnableIRQ>
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	0800b908 	.word	0x0800b908

080037b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff73 	bl	80036ac <SysTick_Config>
 80037c6:	4603      	mov	r3, r0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e01e      	b.n	8003820 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_DAC_Init+0x58>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_DAC_Init+0x26>
 80037ec:	f44f 7199 	mov.w	r1, #306	; 0x132
 80037f0:	480e      	ldr	r0, [pc, #56]	; (800382c <HAL_DAC_Init+0x5c>)
 80037f2:	f7fe fca6 	bl	8002142 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fbf4 	bl	8000ff4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40007400 	.word	0x40007400
 800382c:	0800b944 	.word	0x0800b944

08003830 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d024      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d020      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d01c      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b14      	cmp	r3, #20
 800385a:	d018      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b1c      	cmp	r3, #28
 8003862:	d014      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b24      	cmp	r3, #36	; 0x24
 800386a:	d010      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b2c      	cmp	r3, #44	; 0x2c
 8003872:	d00c      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b34      	cmp	r3, #52	; 0x34
 800387a:	d008      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b3c      	cmp	r3, #60	; 0x3c
 8003882:	d004      	beq.n	800388e <HAL_DAC_ConfigChannel+0x5e>
 8003884:	f240 31c3 	movw	r1, #963	; 0x3c3
 8003888:	4837      	ldr	r0, [pc, #220]	; (8003968 <HAL_DAC_ConfigChannel+0x138>)
 800388a:	f7fe fc5a 	bl	8002142 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_DAC_ConfigChannel+0x78>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d004      	beq.n	80038a8 <HAL_DAC_ConfigChannel+0x78>
 800389e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80038a2:	4831      	ldr	r0, [pc, #196]	; (8003968 <HAL_DAC_ConfigChannel+0x138>)
 80038a4:	f7fe fc4d 	bl	8002142 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_DAC_ConfigChannel+0x8e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d004      	beq.n	80038be <HAL_DAC_ConfigChannel+0x8e>
 80038b4:	f240 31c5 	movw	r1, #965	; 0x3c5
 80038b8:	482b      	ldr	r0, [pc, #172]	; (8003968 <HAL_DAC_ConfigChannel+0x138>)
 80038ba:	f7fe fc42 	bl	8002142 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	795b      	ldrb	r3, [r3, #5]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_DAC_ConfigChannel+0x9a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e04a      	b.n	8003960 <HAL_DAC_ConfigChannel+0x130>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4013      	ands	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	22c0      	movs	r2, #192	; 0xc0
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43da      	mvns	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	22c0      	movs	r2, #192	; 0xc0
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43da      	mvns	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	0800b944 	.word	0x0800b944

0800396c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e109      	b.n	8003b96 <HAL_DMA_Init+0x22a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a86      	ldr	r2, [pc, #536]	; (8003ba0 <HAL_DMA_Init+0x234>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d03a      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a84      	ldr	r2, [pc, #528]	; (8003ba4 <HAL_DMA_Init+0x238>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d035      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a83      	ldr	r2, [pc, #524]	; (8003ba8 <HAL_DMA_Init+0x23c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d030      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a81      	ldr	r2, [pc, #516]	; (8003bac <HAL_DMA_Init+0x240>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02b      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a80      	ldr	r2, [pc, #512]	; (8003bb0 <HAL_DMA_Init+0x244>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d026      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a7e      	ldr	r2, [pc, #504]	; (8003bb4 <HAL_DMA_Init+0x248>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d021      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7d      	ldr	r2, [pc, #500]	; (8003bb8 <HAL_DMA_Init+0x24c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d01c      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7b      	ldr	r2, [pc, #492]	; (8003bbc <HAL_DMA_Init+0x250>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d017      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7a      	ldr	r2, [pc, #488]	; (8003bc0 <HAL_DMA_Init+0x254>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d012      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a78      	ldr	r2, [pc, #480]	; (8003bc4 <HAL_DMA_Init+0x258>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00d      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a77      	ldr	r2, [pc, #476]	; (8003bc8 <HAL_DMA_Init+0x25c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d008      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_DMA_Init+0x260>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <HAL_DMA_Init+0x96>
 80039fa:	219a      	movs	r1, #154	; 0x9a
 80039fc:	4874      	ldr	r0, [pc, #464]	; (8003bd0 <HAL_DMA_Init+0x264>)
 80039fe:	f7fe fba0 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_DMA_Init+0xb8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d008      	beq.n	8003a24 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1a:	d003      	beq.n	8003a24 <HAL_DMA_Init+0xb8>
 8003a1c:	219b      	movs	r1, #155	; 0x9b
 8003a1e:	486c      	ldr	r0, [pc, #432]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003a20:	f7fe fb8f 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d007      	beq.n	8003a3c <HAL_DMA_Init+0xd0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_DMA_Init+0xd0>
 8003a34:	219c      	movs	r1, #156	; 0x9c
 8003a36:	4866      	ldr	r0, [pc, #408]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003a38:	f7fe fb83 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d007      	beq.n	8003a54 <HAL_DMA_Init+0xe8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_DMA_Init+0xe8>
 8003a4c:	219d      	movs	r1, #157	; 0x9d
 8003a4e:	4860      	ldr	r0, [pc, #384]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003a50:	f7fe fb77 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <HAL_DMA_Init+0x10c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a64:	d008      	beq.n	8003a78 <HAL_DMA_Init+0x10c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6e:	d003      	beq.n	8003a78 <HAL_DMA_Init+0x10c>
 8003a70:	219e      	movs	r1, #158	; 0x9e
 8003a72:	4857      	ldr	r0, [pc, #348]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003a74:	f7fe fb65 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_DMA_Init+0x130>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Init+0x130>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d003      	beq.n	8003a9c <HAL_DMA_Init+0x130>
 8003a94:	219f      	movs	r1, #159	; 0x9f
 8003a96:	484e      	ldr	r0, [pc, #312]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003a98:	f7fe fb53 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_DMA_Init+0x148>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_Init+0x148>
 8003aac:	21a0      	movs	r1, #160	; 0xa0
 8003aae:	4848      	ldr	r0, [pc, #288]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003ab0:	f7fe fb47 	bl	8002142 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d012      	beq.n	8003ae2 <HAL_DMA_Init+0x176>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_DMA_Init+0x176>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d008      	beq.n	8003ae2 <HAL_DMA_Init+0x176>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ad8:	d003      	beq.n	8003ae2 <HAL_DMA_Init+0x176>
 8003ada:	21a1      	movs	r1, #161	; 0xa1
 8003adc:	483c      	ldr	r0, [pc, #240]	; (8003bd0 <HAL_DMA_Init+0x264>)
 8003ade:	f7fe fb30 	bl	8002142 <assert_failed>

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <HAL_DMA_Init+0x268>)
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d80f      	bhi.n	8003b0e <HAL_DMA_Init+0x1a2>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <HAL_DMA_Init+0x26c>)
 8003af6:	4413      	add	r3, r2
 8003af8:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_DMA_Init+0x270>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	009a      	lsls	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <HAL_DMA_Init+0x274>)
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b0c:	e00e      	b.n	8003b2c <HAL_DMA_Init+0x1c0>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <HAL_DMA_Init+0x278>)
 8003b16:	4413      	add	r3, r2
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <HAL_DMA_Init+0x270>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2f      	ldr	r2, [pc, #188]	; (8003be8 <HAL_DMA_Init+0x27c>)
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40020008 	.word	0x40020008
 8003ba4:	4002001c 	.word	0x4002001c
 8003ba8:	40020030 	.word	0x40020030
 8003bac:	40020044 	.word	0x40020044
 8003bb0:	40020058 	.word	0x40020058
 8003bb4:	4002006c 	.word	0x4002006c
 8003bb8:	40020080 	.word	0x40020080
 8003bbc:	40020408 	.word	0x40020408
 8003bc0:	4002041c 	.word	0x4002041c
 8003bc4:	40020430 	.word	0x40020430
 8003bc8:	40020444 	.word	0x40020444
 8003bcc:	40020458 	.word	0x40020458
 8003bd0:	0800b97c 	.word	0x0800b97c
 8003bd4:	40020407 	.word	0x40020407
 8003bd8:	bffdfff8 	.word	0xbffdfff8
 8003bdc:	cccccccd 	.word	0xcccccccd
 8003be0:	40020000 	.word	0x40020000
 8003be4:	bffdfbf8 	.word	0xbffdfbf8
 8003be8:	40020400 	.word	0x40020400

08003bec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d005      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2204      	movs	r2, #4
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e0d6      	b.n	8003dbc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 020e 	bic.w	r2, r2, #14
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d958      	bls.n	8003cec <HAL_DMA_Abort_IT+0x100>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_DMA_Abort_IT+0x1e0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04f      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0xf8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a61      	ldr	r2, [pc, #388]	; (8003dd0 <HAL_DMA_Abort_IT+0x1e4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d048      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xf4>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a60      	ldr	r2, [pc, #384]	; (8003dd4 <HAL_DMA_Abort_IT+0x1e8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_Abort_IT+0xee>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <HAL_DMA_Abort_IT+0x1ec>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d038      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xe8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a5d      	ldr	r2, [pc, #372]	; (8003ddc <HAL_DMA_Abort_IT+0x1f0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d030      	beq.n	8003cce <HAL_DMA_Abort_IT+0xe2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5b      	ldr	r2, [pc, #364]	; (8003de0 <HAL_DMA_Abort_IT+0x1f4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d028      	beq.n	8003cc8 <HAL_DMA_Abort_IT+0xdc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a53      	ldr	r2, [pc, #332]	; (8003dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d020      	beq.n	8003cc2 <HAL_DMA_Abort_IT+0xd6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a57      	ldr	r2, [pc, #348]	; (8003de4 <HAL_DMA_Abort_IT+0x1f8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_DMA_Abort_IT+0xd2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_DMA_Abort_IT+0x1fc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d012      	beq.n	8003cba <HAL_DMA_Abort_IT+0xce>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a54      	ldr	r2, [pc, #336]	; (8003dec <HAL_DMA_Abort_IT+0x200>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a53      	ldr	r2, [pc, #332]	; (8003df0 <HAL_DMA_Abort_IT+0x204>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d102      	bne.n	8003cae <HAL_DMA_Abort_IT+0xc2>
 8003ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cac:	e01b      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	e018      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb8:	e015      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cba:	2310      	movs	r3, #16
 8003cbc:	e013      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e011      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc6:	e00e      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ccc:	e00b      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cd2:	e008      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd8:	e005      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cde:	e002      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	e000      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_DMA_Abort_IT+0x208>)
 8003ce8:	6053      	str	r3, [r2, #4]
 8003cea:	e057      	b.n	8003d9c <HAL_DMA_Abort_IT+0x1b0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <HAL_DMA_Abort_IT+0x1e0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d04f      	beq.n	8003d96 <HAL_DMA_Abort_IT+0x1aa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a35      	ldr	r2, [pc, #212]	; (8003dd0 <HAL_DMA_Abort_IT+0x1e4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d048      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x1a6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_DMA_Abort_IT+0x1e8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d040      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x1a0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a32      	ldr	r2, [pc, #200]	; (8003dd8 <HAL_DMA_Abort_IT+0x1ec>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d038      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x19a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_DMA_Abort_IT+0x1f0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d030      	beq.n	8003d80 <HAL_DMA_Abort_IT+0x194>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <HAL_DMA_Abort_IT+0x1f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d028      	beq.n	8003d7a <HAL_DMA_Abort_IT+0x18e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d020      	beq.n	8003d74 <HAL_DMA_Abort_IT+0x188>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_DMA_Abort_IT+0x1f8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d019      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x184>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <HAL_DMA_Abort_IT+0x1fc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d012      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x180>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a28      	ldr	r2, [pc, #160]	; (8003dec <HAL_DMA_Abort_IT+0x200>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00a      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x17a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <HAL_DMA_Abort_IT+0x204>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d102      	bne.n	8003d60 <HAL_DMA_Abort_IT+0x174>
 8003d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d5e:	e01b      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d64:	e018      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d6a:	e015      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	e013      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e011      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d78:	e00e      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d7e:	e00b      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d84:	e008      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d8a:	e005      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d90:	e002      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d92:	2310      	movs	r3, #16
 8003d94:	e000      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_DMA_Abort_IT+0x20c>)
 8003d9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
    } 
  }
  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020080 	.word	0x40020080
 8003dcc:	40020008 	.word	0x40020008
 8003dd0:	4002001c 	.word	0x4002001c
 8003dd4:	40020030 	.word	0x40020030
 8003dd8:	40020044 	.word	0x40020044
 8003ddc:	40020058 	.word	0x40020058
 8003de0:	4002006c 	.word	0x4002006c
 8003de4:	40020408 	.word	0x40020408
 8003de8:	4002041c 	.word	0x4002041c
 8003dec:	40020430 	.word	0x40020430
 8003df0:	40020444 	.word	0x40020444
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020000 	.word	0x40020000

08003dfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2204      	movs	r2, #4
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80d6 	beq.w	8003fd2 <HAL_DMA_IRQHandler+0x1d6>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80d0 	beq.w	8003fd2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b9b      	ldr	r3, [pc, #620]	; (80040c4 <HAL_DMA_IRQHandler+0x2c8>)
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d958      	bls.n	8003f0e <HAL_DMA_IRQHandler+0x112>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a99      	ldr	r2, [pc, #612]	; (80040c8 <HAL_DMA_IRQHandler+0x2cc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d04f      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x10a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a98      	ldr	r2, [pc, #608]	; (80040cc <HAL_DMA_IRQHandler+0x2d0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d048      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x106>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a96      	ldr	r2, [pc, #600]	; (80040d0 <HAL_DMA_IRQHandler+0x2d4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d040      	beq.n	8003efc <HAL_DMA_IRQHandler+0x100>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a95      	ldr	r2, [pc, #596]	; (80040d4 <HAL_DMA_IRQHandler+0x2d8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d038      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xfa>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a93      	ldr	r2, [pc, #588]	; (80040d8 <HAL_DMA_IRQHandler+0x2dc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d030      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0xf4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a92      	ldr	r2, [pc, #584]	; (80040dc <HAL_DMA_IRQHandler+0x2e0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d028      	beq.n	8003eea <HAL_DMA_IRQHandler+0xee>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a89      	ldr	r2, [pc, #548]	; (80040c4 <HAL_DMA_IRQHandler+0x2c8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d020      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0xe8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a8e      	ldr	r2, [pc, #568]	; (80040e0 <HAL_DMA_IRQHandler+0x2e4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d019      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0xe4>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a8c      	ldr	r2, [pc, #560]	; (80040e4 <HAL_DMA_IRQHandler+0x2e8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d012      	beq.n	8003edc <HAL_DMA_IRQHandler+0xe0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a8b      	ldr	r2, [pc, #556]	; (80040e8 <HAL_DMA_IRQHandler+0x2ec>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xda>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a89      	ldr	r2, [pc, #548]	; (80040ec <HAL_DMA_IRQHandler+0x2f0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0xd4>
 8003eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ece:	e01b      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ed4:	e018      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eda:	e015      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003edc:	2340      	movs	r3, #64	; 0x40
 8003ede:	e013      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	e011      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003ee4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ee8:	e00e      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eee:	e00b      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003ef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ef4:	e008      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003ef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003efa:	e005      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f00:	e002      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003f02:	2340      	movs	r3, #64	; 0x40
 8003f04:	e000      	b.n	8003f08 <HAL_DMA_IRQHandler+0x10c>
 8003f06:	2304      	movs	r3, #4
 8003f08:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_DMA_IRQHandler+0x2f4>)
 8003f0a:	6053      	str	r3, [r2, #4]
 8003f0c:	e057      	b.n	8003fbe <HAL_DMA_IRQHandler+0x1c2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6d      	ldr	r2, [pc, #436]	; (80040c8 <HAL_DMA_IRQHandler+0x2cc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d04f      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x1bc>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6b      	ldr	r2, [pc, #428]	; (80040cc <HAL_DMA_IRQHandler+0x2d0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d048      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x1b8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6a      	ldr	r2, [pc, #424]	; (80040d0 <HAL_DMA_IRQHandler+0x2d4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d040      	beq.n	8003fae <HAL_DMA_IRQHandler+0x1b2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_DMA_IRQHandler+0x2d8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d038      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x1ac>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_DMA_IRQHandler+0x2dc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d030      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x1a6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_DMA_IRQHandler+0x2e0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d028      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x1a0>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5d      	ldr	r2, [pc, #372]	; (80040c4 <HAL_DMA_IRQHandler+0x2c8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d020      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x19a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a61      	ldr	r2, [pc, #388]	; (80040e0 <HAL_DMA_IRQHandler+0x2e4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d019      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x196>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a60      	ldr	r2, [pc, #384]	; (80040e4 <HAL_DMA_IRQHandler+0x2e8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d012      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x192>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a5e      	ldr	r2, [pc, #376]	; (80040e8 <HAL_DMA_IRQHandler+0x2ec>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00a      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x18c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a5d      	ldr	r2, [pc, #372]	; (80040ec <HAL_DMA_IRQHandler+0x2f0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d102      	bne.n	8003f82 <HAL_DMA_IRQHandler+0x186>
 8003f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f80:	e01b      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003f82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f86:	e018      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f8c:	e015      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003f8e:	2340      	movs	r3, #64	; 0x40
 8003f90:	e013      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003f92:	2304      	movs	r3, #4
 8003f94:	e011      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f9a:	e00e      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003f9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fa0:	e00b      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003fa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fa6:	e008      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fac:	e005      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb2:	e002      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	e000      	b.n	8003fba <HAL_DMA_IRQHandler+0x1be>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	4a4e      	ldr	r2, [pc, #312]	; (80040f4 <HAL_DMA_IRQHandler+0x2f8>)
 8003fbc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8136 	beq.w	8004234 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	e130      	b.n	8004234 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80f8 	beq.w	80041d4 <HAL_DMA_IRQHandler+0x3d8>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80f2 	beq.w	80041d4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 020a 	bic.w	r2, r2, #10
 800400c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <HAL_DMA_IRQHandler+0x2c8>)
 800401e:	429a      	cmp	r2, r3
 8004020:	d973      	bls.n	800410a <HAL_DMA_IRQHandler+0x30e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <HAL_DMA_IRQHandler+0x2cc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d06a      	beq.n	8004102 <HAL_DMA_IRQHandler+0x306>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <HAL_DMA_IRQHandler+0x2d0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d063      	beq.n	80040fe <HAL_DMA_IRQHandler+0x302>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <HAL_DMA_IRQHandler+0x2d4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d05b      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2fc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <HAL_DMA_IRQHandler+0x2d8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d038      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2c0>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <HAL_DMA_IRQHandler+0x2dc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d030      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x2ba>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <HAL_DMA_IRQHandler+0x2e0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d028      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x2b4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_DMA_IRQHandler+0x2c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d020      	beq.n	80040aa <HAL_DMA_IRQHandler+0x2ae>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <HAL_DMA_IRQHandler+0x2e4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x2aa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_DMA_IRQHandler+0x2e8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d012      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x2a6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_DMA_IRQHandler+0x2ec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00a      	beq.n	800409c <HAL_DMA_IRQHandler+0x2a0>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_DMA_IRQHandler+0x2f0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d102      	bne.n	8004096 <HAL_DMA_IRQHandler+0x29a>
 8004090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004094:	e036      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 8004096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800409a:	e033      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 800409c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a0:	e030      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040a2:	2320      	movs	r3, #32
 80040a4:	e02e      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e02c      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ae:	e029      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040b4:	e026      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ba:	e023      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c0:	e020      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040c2:	bf00      	nop
 80040c4:	40020080 	.word	0x40020080
 80040c8:	40020008 	.word	0x40020008
 80040cc:	4002001c 	.word	0x4002001c
 80040d0:	40020030 	.word	0x40020030
 80040d4:	40020044 	.word	0x40020044
 80040d8:	40020058 	.word	0x40020058
 80040dc:	4002006c 	.word	0x4002006c
 80040e0:	40020408 	.word	0x40020408
 80040e4:	4002041c 	.word	0x4002041c
 80040e8:	40020430 	.word	0x40020430
 80040ec:	40020444 	.word	0x40020444
 80040f0:	40020400 	.word	0x40020400
 80040f4:	40020000 	.word	0x40020000
 80040f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040fc:	e002      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 80040fe:	2320      	movs	r3, #32
 8004100:	e000      	b.n	8004104 <HAL_DMA_IRQHandler+0x308>
 8004102:	2302      	movs	r3, #2
 8004104:	4a4e      	ldr	r2, [pc, #312]	; (8004240 <HAL_DMA_IRQHandler+0x444>)
 8004106:	6053      	str	r3, [r2, #4]
 8004108:	e057      	b.n	80041ba <HAL_DMA_IRQHandler+0x3be>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a4d      	ldr	r2, [pc, #308]	; (8004244 <HAL_DMA_IRQHandler+0x448>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d04f      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x3b8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <HAL_DMA_IRQHandler+0x44c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d048      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x3b4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4a      	ldr	r2, [pc, #296]	; (800424c <HAL_DMA_IRQHandler+0x450>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d040      	beq.n	80041aa <HAL_DMA_IRQHandler+0x3ae>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a48      	ldr	r2, [pc, #288]	; (8004250 <HAL_DMA_IRQHandler+0x454>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d038      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x3a8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a47      	ldr	r2, [pc, #284]	; (8004254 <HAL_DMA_IRQHandler+0x458>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d030      	beq.n	800419e <HAL_DMA_IRQHandler+0x3a2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a45      	ldr	r2, [pc, #276]	; (8004258 <HAL_DMA_IRQHandler+0x45c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d028      	beq.n	8004198 <HAL_DMA_IRQHandler+0x39c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a44      	ldr	r2, [pc, #272]	; (800425c <HAL_DMA_IRQHandler+0x460>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d020      	beq.n	8004192 <HAL_DMA_IRQHandler+0x396>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a42      	ldr	r2, [pc, #264]	; (8004260 <HAL_DMA_IRQHandler+0x464>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d019      	beq.n	800418e <HAL_DMA_IRQHandler+0x392>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a41      	ldr	r2, [pc, #260]	; (8004264 <HAL_DMA_IRQHandler+0x468>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d012      	beq.n	800418a <HAL_DMA_IRQHandler+0x38e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <HAL_DMA_IRQHandler+0x46c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00a      	beq.n	8004184 <HAL_DMA_IRQHandler+0x388>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3e      	ldr	r2, [pc, #248]	; (800426c <HAL_DMA_IRQHandler+0x470>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d102      	bne.n	800417e <HAL_DMA_IRQHandler+0x382>
 8004178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417c:	e01b      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 800417e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004182:	e018      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 8004184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004188:	e015      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 800418a:	2320      	movs	r3, #32
 800418c:	e013      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 800418e:	2302      	movs	r3, #2
 8004190:	e011      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 8004192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004196:	e00e      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 8004198:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800419c:	e00b      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 800419e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a2:	e008      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 80041a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041a8:	e005      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 80041aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ae:	e002      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 80041b0:	2320      	movs	r3, #32
 80041b2:	e000      	b.n	80041b6 <HAL_DMA_IRQHandler+0x3ba>
 80041b4:	2302      	movs	r3, #2
 80041b6:	4a2e      	ldr	r2, [pc, #184]	; (8004270 <HAL_DMA_IRQHandler+0x474>)
 80041b8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d034      	beq.n	8004234 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041d2:	e02f      	b.n	8004234 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2208      	movs	r2, #8
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d028      	beq.n	8004236 <HAL_DMA_IRQHandler+0x43a>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d023      	beq.n	8004236 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 020e 	bic.w	r2, r2, #14
 80041fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	2101      	movs	r1, #1
 8004208:	fa01 f202 	lsl.w	r2, r1, r2
 800420c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
    }
  }
  return;
 8004234:	bf00      	nop
 8004236:	bf00      	nop
}
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40020400 	.word	0x40020400
 8004244:	40020008 	.word	0x40020008
 8004248:	4002001c 	.word	0x4002001c
 800424c:	40020030 	.word	0x40020030
 8004250:	40020044 	.word	0x40020044
 8004254:	40020058 	.word	0x40020058
 8004258:	4002006c 	.word	0x4002006c
 800425c:	40020080 	.word	0x40020080
 8004260:	40020408 	.word	0x40020408
 8004264:	4002041c 	.word	0x4002041c
 8004268:	40020430 	.word	0x40020430
 800426c:	40020444 	.word	0x40020444
 8004270:	40020000 	.word	0x40020000

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4aa9      	ldr	r2, [pc, #676]	; (8004530 <HAL_GPIO_Init+0x2bc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01b      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4aa8      	ldr	r2, [pc, #672]	; (8004534 <HAL_GPIO_Init+0x2c0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d017      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4aa7      	ldr	r2, [pc, #668]	; (8004538 <HAL_GPIO_Init+0x2c4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4aa6      	ldr	r2, [pc, #664]	; (800453c <HAL_GPIO_Init+0x2c8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00f      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4aa5      	ldr	r2, [pc, #660]	; (8004540 <HAL_GPIO_Init+0x2cc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00b      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4aa4      	ldr	r2, [pc, #656]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d007      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4aa3      	ldr	r2, [pc, #652]	; (8004548 <HAL_GPIO_Init+0x2d4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
 80042be:	21bd      	movs	r1, #189	; 0xbd
 80042c0:	48a2      	ldr	r0, [pc, #648]	; (800454c <HAL_GPIO_Init+0x2d8>)
 80042c2:	f7fd ff3e 	bl	8002142 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_GPIO_Init+0x68>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x70>
 80042dc:	21be      	movs	r1, #190	; 0xbe
 80042de:	489b      	ldr	r0, [pc, #620]	; (800454c <HAL_GPIO_Init+0x2d8>)
 80042e0:	f7fd ff2f 	bl	8002142 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8235 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f000 8230 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b11      	cmp	r3, #17
 80042fe:	f000 822b 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	f000 8226 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b12      	cmp	r3, #18
 8004312:	f000 8221 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a8d      	ldr	r2, [pc, #564]	; (8004550 <HAL_GPIO_Init+0x2dc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	f000 821b 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a8b      	ldr	r2, [pc, #556]	; (8004554 <HAL_GPIO_Init+0x2e0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	f000 8215 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4a89      	ldr	r2, [pc, #548]	; (8004558 <HAL_GPIO_Init+0x2e4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	f000 820f 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a87      	ldr	r2, [pc, #540]	; (800455c <HAL_GPIO_Init+0x2e8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	f000 8209 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4a85      	ldr	r2, [pc, #532]	; (8004560 <HAL_GPIO_Init+0x2ec>)
 800434c:	4293      	cmp	r3, r2
 800434e:	f000 8203 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4a83      	ldr	r2, [pc, #524]	; (8004564 <HAL_GPIO_Init+0x2f0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	f000 81fd 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b03      	cmp	r3, #3
 8004364:	f000 81f8 	beq.w	8004758 <HAL_GPIO_Init+0x4e4>
 8004368:	21bf      	movs	r1, #191	; 0xbf
 800436a:	4878      	ldr	r0, [pc, #480]	; (800454c <HAL_GPIO_Init+0x2d8>)
 800436c:	f7fd fee9 	bl	8002142 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004370:	e1f2      	b.n	8004758 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004372:	2201      	movs	r2, #1
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	429a      	cmp	r2, r3
 800438c:	f040 81e1 	bne.w	8004752 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a67      	ldr	r2, [pc, #412]	; (8004530 <HAL_GPIO_Init+0x2bc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01b      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a66      	ldr	r2, [pc, #408]	; (8004534 <HAL_GPIO_Init+0x2c0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d017      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_GPIO_Init+0x2c4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a64      	ldr	r2, [pc, #400]	; (800453c <HAL_GPIO_Init+0x2c8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00f      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a63      	ldr	r2, [pc, #396]	; (8004540 <HAL_GPIO_Init+0x2cc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a62      	ldr	r2, [pc, #392]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a61      	ldr	r2, [pc, #388]	; (8004548 <HAL_GPIO_Init+0x2d4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x15c>
 80043c8:	21cd      	movs	r1, #205	; 0xcd
 80043ca:	4860      	ldr	r0, [pc, #384]	; (800454c <HAL_GPIO_Init+0x2d8>)
 80043cc:	f7fd feb9 	bl	8002142 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a63      	ldr	r2, [pc, #396]	; (8004564 <HAL_GPIO_Init+0x2f0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f000 80c6 	beq.w	8004568 <HAL_GPIO_Init+0x2f4>
 80043dc:	4a61      	ldr	r2, [pc, #388]	; (8004564 <HAL_GPIO_Init+0x2f0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f200 80ec 	bhi.w	80045bc <HAL_GPIO_Init+0x348>
 80043e4:	4a5c      	ldr	r2, [pc, #368]	; (8004558 <HAL_GPIO_Init+0x2e4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f000 80be 	beq.w	8004568 <HAL_GPIO_Init+0x2f4>
 80043ec:	4a5a      	ldr	r2, [pc, #360]	; (8004558 <HAL_GPIO_Init+0x2e4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f200 80e4 	bhi.w	80045bc <HAL_GPIO_Init+0x348>
 80043f4:	4a5a      	ldr	r2, [pc, #360]	; (8004560 <HAL_GPIO_Init+0x2ec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f000 80b6 	beq.w	8004568 <HAL_GPIO_Init+0x2f4>
 80043fc:	4a58      	ldr	r2, [pc, #352]	; (8004560 <HAL_GPIO_Init+0x2ec>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f200 80dc 	bhi.w	80045bc <HAL_GPIO_Init+0x348>
 8004404:	4a53      	ldr	r2, [pc, #332]	; (8004554 <HAL_GPIO_Init+0x2e0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	f000 80ae 	beq.w	8004568 <HAL_GPIO_Init+0x2f4>
 800440c:	4a51      	ldr	r2, [pc, #324]	; (8004554 <HAL_GPIO_Init+0x2e0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f200 80d4 	bhi.w	80045bc <HAL_GPIO_Init+0x348>
 8004414:	4a51      	ldr	r2, [pc, #324]	; (800455c <HAL_GPIO_Init+0x2e8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f000 80a6 	beq.w	8004568 <HAL_GPIO_Init+0x2f4>
 800441c:	4a4f      	ldr	r2, [pc, #316]	; (800455c <HAL_GPIO_Init+0x2e8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f200 80cc 	bhi.w	80045bc <HAL_GPIO_Init+0x348>
 8004424:	2b12      	cmp	r3, #18
 8004426:	d82b      	bhi.n	8004480 <HAL_GPIO_Init+0x20c>
 8004428:	2b12      	cmp	r3, #18
 800442a:	f200 80c7 	bhi.w	80045bc <HAL_GPIO_Init+0x348>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <HAL_GPIO_Init+0x1c0>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004569 	.word	0x08004569
 8004438:	08004489 	.word	0x08004489
 800443c:	080044db 	.word	0x080044db
 8004440:	080045b7 	.word	0x080045b7
 8004444:	080045bd 	.word	0x080045bd
 8004448:	080045bd 	.word	0x080045bd
 800444c:	080045bd 	.word	0x080045bd
 8004450:	080045bd 	.word	0x080045bd
 8004454:	080045bd 	.word	0x080045bd
 8004458:	080045bd 	.word	0x080045bd
 800445c:	080045bd 	.word	0x080045bd
 8004460:	080045bd 	.word	0x080045bd
 8004464:	080045bd 	.word	0x080045bd
 8004468:	080045bd 	.word	0x080045bd
 800446c:	080045bd 	.word	0x080045bd
 8004470:	080045bd 	.word	0x080045bd
 8004474:	080045bd 	.word	0x080045bd
 8004478:	080044b1 	.word	0x080044b1
 800447c:	08004505 	.word	0x08004505
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <HAL_GPIO_Init+0x2dc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d070      	beq.n	8004568 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004486:	e099      	b.n	80045bc <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d00b      	beq.n	80044a8 <HAL_GPIO_Init+0x234>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d007      	beq.n	80044a8 <HAL_GPIO_Init+0x234>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x234>
 80044a0:	21d5      	movs	r1, #213	; 0xd5
 80044a2:	482a      	ldr	r0, [pc, #168]	; (800454c <HAL_GPIO_Init+0x2d8>)
 80044a4:	f7fd fe4d 	bl	8002142 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	623b      	str	r3, [r7, #32]
          break;
 80044ae:	e086      	b.n	80045be <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d00b      	beq.n	80044d0 <HAL_GPIO_Init+0x25c>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d007      	beq.n	80044d0 <HAL_GPIO_Init+0x25c>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x25c>
 80044c8:	21dc      	movs	r1, #220	; 0xdc
 80044ca:	4820      	ldr	r0, [pc, #128]	; (800454c <HAL_GPIO_Init+0x2d8>)
 80044cc:	f7fd fe39 	bl	8002142 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	623b      	str	r3, [r7, #32]
          break;
 80044d8:	e071      	b.n	80045be <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d00b      	beq.n	80044fa <HAL_GPIO_Init+0x286>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x286>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x286>
 80044f2:	21e3      	movs	r1, #227	; 0xe3
 80044f4:	4815      	ldr	r0, [pc, #84]	; (800454c <HAL_GPIO_Init+0x2d8>)
 80044f6:	f7fd fe24 	bl	8002142 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	3308      	adds	r3, #8
 8004500:	623b      	str	r3, [r7, #32]
          break;
 8004502:	e05c      	b.n	80045be <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d00b      	beq.n	8004524 <HAL_GPIO_Init+0x2b0>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d007      	beq.n	8004524 <HAL_GPIO_Init+0x2b0>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x2b0>
 800451c:	21ea      	movs	r1, #234	; 0xea
 800451e:	480b      	ldr	r0, [pc, #44]	; (800454c <HAL_GPIO_Init+0x2d8>)
 8004520:	f7fd fe0f 	bl	8002142 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	330c      	adds	r3, #12
 800452a:	623b      	str	r3, [r7, #32]
          break;
 800452c:	e047      	b.n	80045be <HAL_GPIO_Init+0x34a>
 800452e:	bf00      	nop
 8004530:	40010800 	.word	0x40010800
 8004534:	40010c00 	.word	0x40010c00
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	40011800 	.word	0x40011800
 8004544:	40011c00 	.word	0x40011c00
 8004548:	40012000 	.word	0x40012000
 800454c:	0800b9b4 	.word	0x0800b9b4
 8004550:	10110000 	.word	0x10110000
 8004554:	10210000 	.word	0x10210000
 8004558:	10310000 	.word	0x10310000
 800455c:	10120000 	.word	0x10120000
 8004560:	10220000 	.word	0x10220000
 8004564:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_GPIO_Init+0x314>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d007      	beq.n	8004588 <HAL_GPIO_Init+0x314>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x314>
 8004580:	21f7      	movs	r1, #247	; 0xf7
 8004582:	487c      	ldr	r0, [pc, #496]	; (8004774 <HAL_GPIO_Init+0x500>)
 8004584:	f7fd fddd 	bl	8002142 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004590:	2304      	movs	r3, #4
 8004592:	623b      	str	r3, [r7, #32]
          break;
 8004594:	e013      	b.n	80045be <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800459e:	2308      	movs	r3, #8
 80045a0:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	611a      	str	r2, [r3, #16]
          break;
 80045a8:	e009      	b.n	80045be <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045aa:	2308      	movs	r3, #8
 80045ac:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	615a      	str	r2, [r3, #20]
          break;
 80045b4:	e003      	b.n	80045be <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
          break;
 80045ba:	e000      	b.n	80045be <HAL_GPIO_Init+0x34a>
          break;
 80045bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2bff      	cmp	r3, #255	; 0xff
 80045c2:	d801      	bhi.n	80045c8 <HAL_GPIO_Init+0x354>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	e001      	b.n	80045cc <HAL_GPIO_Init+0x358>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2bff      	cmp	r3, #255	; 0xff
 80045d2:	d802      	bhi.n	80045da <HAL_GPIO_Init+0x366>
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	e002      	b.n	80045e0 <HAL_GPIO_Init+0x36c>
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	3b08      	subs	r3, #8
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	210f      	movs	r1, #15
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	401a      	ands	r2, r3
 80045f2:	6a39      	ldr	r1, [r7, #32]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	431a      	orrs	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a2 	beq.w	8004752 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800460e:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <HAL_GPIO_Init+0x504>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	4a59      	ldr	r2, [pc, #356]	; (8004778 <HAL_GPIO_Init+0x504>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	6193      	str	r3, [r2, #24]
 800461a:	4b57      	ldr	r3, [pc, #348]	; (8004778 <HAL_GPIO_Init+0x504>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004626:	4a55      	ldr	r2, [pc, #340]	; (800477c <HAL_GPIO_Init+0x508>)
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	3302      	adds	r3, #2
 800462e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004632:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	220f      	movs	r2, #15
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4c      	ldr	r2, [pc, #304]	; (8004780 <HAL_GPIO_Init+0x50c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01f      	beq.n	8004692 <HAL_GPIO_Init+0x41e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4b      	ldr	r2, [pc, #300]	; (8004784 <HAL_GPIO_Init+0x510>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d019      	beq.n	800468e <HAL_GPIO_Init+0x41a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_GPIO_Init+0x514>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_GPIO_Init+0x416>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a49      	ldr	r2, [pc, #292]	; (800478c <HAL_GPIO_Init+0x518>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00d      	beq.n	8004686 <HAL_GPIO_Init+0x412>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a48      	ldr	r2, [pc, #288]	; (8004790 <HAL_GPIO_Init+0x51c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <HAL_GPIO_Init+0x40e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a47      	ldr	r2, [pc, #284]	; (8004794 <HAL_GPIO_Init+0x520>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_GPIO_Init+0x40a>
 800467a:	2305      	movs	r3, #5
 800467c:	e00a      	b.n	8004694 <HAL_GPIO_Init+0x420>
 800467e:	2306      	movs	r3, #6
 8004680:	e008      	b.n	8004694 <HAL_GPIO_Init+0x420>
 8004682:	2304      	movs	r3, #4
 8004684:	e006      	b.n	8004694 <HAL_GPIO_Init+0x420>
 8004686:	2303      	movs	r3, #3
 8004688:	e004      	b.n	8004694 <HAL_GPIO_Init+0x420>
 800468a:	2302      	movs	r3, #2
 800468c:	e002      	b.n	8004694 <HAL_GPIO_Init+0x420>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_GPIO_Init+0x420>
 8004692:	2300      	movs	r3, #0
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	f002 0203 	and.w	r2, r2, #3
 800469a:	0092      	lsls	r2, r2, #2
 800469c:	4093      	lsls	r3, r2
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046a4:	4935      	ldr	r1, [pc, #212]	; (800477c <HAL_GPIO_Init+0x508>)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4935      	ldr	r1, [pc, #212]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
 80046ca:	e006      	b.n	80046da <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046cc:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	4930      	ldr	r1, [pc, #192]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d006      	beq.n	80046f4 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046e6:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	492b      	ldr	r1, [pc, #172]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]
 80046f2:	e006      	b.n	8004702 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046f4:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	4926      	ldr	r1, [pc, #152]	; (8004798 <HAL_GPIO_Init+0x524>)
 80046fe:	4013      	ands	r3, r2
 8004700:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_GPIO_Init+0x524>)
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	4921      	ldr	r1, [pc, #132]	; (8004798 <HAL_GPIO_Init+0x524>)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
 800471a:	e006      	b.n	800472a <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800471c:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <HAL_GPIO_Init+0x524>)
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	43db      	mvns	r3, r3
 8004724:	491c      	ldr	r1, [pc, #112]	; (8004798 <HAL_GPIO_Init+0x524>)
 8004726:	4013      	ands	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <HAL_GPIO_Init+0x524>)
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	4917      	ldr	r1, [pc, #92]	; (8004798 <HAL_GPIO_Init+0x524>)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	60cb      	str	r3, [r1, #12]
 8004742:	e006      	b.n	8004752 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <HAL_GPIO_Init+0x524>)
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	43db      	mvns	r3, r3
 800474c:	4912      	ldr	r1, [pc, #72]	; (8004798 <HAL_GPIO_Init+0x524>)
 800474e:	4013      	ands	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	f47f ae05 	bne.w	8004372 <HAL_GPIO_Init+0xfe>
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	0800b9b4 	.word	0x0800b9b4
 8004778:	40021000 	.word	0x40021000
 800477c:	40010000 	.word	0x40010000
 8004780:	40010800 	.word	0x40010800
 8004784:	40010c00 	.word	0x40010c00
 8004788:	40011000 	.word	0x40011000
 800478c:	40011400 	.word	0x40011400
 8004790:	40011800 	.word	0x40011800
 8004794:	40011c00 	.word	0x40011c00
 8004798:	40010400 	.word	0x40010400

0800479c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_GPIO_ReadPin+0x1c>
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_GPIO_ReadPin+0x26>
 80047b8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80047bc:	4809      	ldr	r0, [pc, #36]	; (80047e4 <HAL_GPIO_ReadPin+0x48>)
 80047be:	f7fd fcc0 	bl	8002142 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e001      	b.n	80047d8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047d4:	2300      	movs	r3, #0
 80047d6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	0800b9b4 	.word	0x0800b9b4

080047e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
 80047f4:	4613      	mov	r3, r2
 80047f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_GPIO_WritePin+0x20>
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_GPIO_WritePin+0x2a>
 8004808:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800480c:	480e      	ldr	r0, [pc, #56]	; (8004848 <HAL_GPIO_WritePin+0x60>)
 800480e:	f7fd fc98 	bl	8002142 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004812:	787b      	ldrb	r3, [r7, #1]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_GPIO_WritePin+0x40>
 8004818:	787b      	ldrb	r3, [r7, #1]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d004      	beq.n	8004828 <HAL_GPIO_WritePin+0x40>
 800481e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004822:	4809      	ldr	r0, [pc, #36]	; (8004848 <HAL_GPIO_WritePin+0x60>)
 8004824:	f7fd fc8d 	bl	8002142 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004828:	787b      	ldrb	r3, [r7, #1]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004834:	e003      	b.n	800483e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	041a      	lsls	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	611a      	str	r2, [r3, #16]
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	0800b9b4 	.word	0x0800b9b4

0800484c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fc fe06 	bl	800147c <HAL_GPIO_EXTI_Callback>
  }
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40010400 	.word	0x40010400

0800487c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e1b7      	b.n	8004bfe <HAL_I2C_Init+0x382>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4aa6      	ldr	r2, [pc, #664]	; (8004b2c <HAL_I2C_Init+0x2b0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_I2C_Init+0x30>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4aa4      	ldr	r2, [pc, #656]	; (8004b30 <HAL_I2C_Init+0x2b4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_I2C_Init+0x30>
 80048a2:	f240 11d1 	movw	r1, #465	; 0x1d1
 80048a6:	48a3      	ldr	r0, [pc, #652]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 80048a8:	f7fd fc4b 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_I2C_Init+0x42>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a9f      	ldr	r2, [pc, #636]	; (8004b38 <HAL_I2C_Init+0x2bc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d904      	bls.n	80048c8 <HAL_I2C_Init+0x4c>
 80048be:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80048c2:	489c      	ldr	r0, [pc, #624]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 80048c4:	f7fd fc3d 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <HAL_I2C_Init+0x68>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d8:	d004      	beq.n	80048e4 <HAL_I2C_Init+0x68>
 80048da:	f240 11d3 	movw	r1, #467	; 0x1d3
 80048de:	4895      	ldr	r0, [pc, #596]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 80048e0:	f7fd fc2f 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048ec:	f023 0303 	bic.w	r3, r3, #3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_I2C_Init+0x82>
 80048f4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80048f8:	488e      	ldr	r0, [pc, #568]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 80048fa:	f7fd fc22 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004906:	d009      	beq.n	800491c <HAL_I2C_Init+0xa0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004910:	d004      	beq.n	800491c <HAL_I2C_Init+0xa0>
 8004912:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004916:	4887      	ldr	r0, [pc, #540]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 8004918:	f7fd fc13 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_I2C_Init+0xba>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d004      	beq.n	8004936 <HAL_I2C_Init+0xba>
 800492c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004930:	4880      	ldr	r0, [pc, #512]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 8004932:	f7fd fc06 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_I2C_Init+0xd0>
 8004942:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004946:	487b      	ldr	r0, [pc, #492]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 8004948:	f7fd fbfb 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_I2C_Init+0xea>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d004      	beq.n	8004966 <HAL_I2C_Init+0xea>
 800495c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004960:	4874      	ldr	r0, [pc, #464]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 8004962:	f7fd fbee 	bl	8002142 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_I2C_Init+0x104>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d004      	beq.n	8004980 <HAL_I2C_Init+0x104>
 8004976:	f240 11d9 	movw	r1, #473	; 0x1d9
 800497a:	486e      	ldr	r0, [pc, #440]	; (8004b34 <HAL_I2C_Init+0x2b8>)
 800497c:	f7fd fbe1 	bl	8002142 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fc fe41 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2224      	movs	r2, #36	; 0x24
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d0:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049d2:	f001 fd57 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 80049d6:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a57      	ldr	r2, [pc, #348]	; (8004b3c <HAL_I2C_Init+0x2c0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d807      	bhi.n	80049f2 <HAL_I2C_Init+0x176>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a56      	ldr	r2, [pc, #344]	; (8004b40 <HAL_I2C_Init+0x2c4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bf94      	ite	ls
 80049ea:	2301      	movls	r3, #1
 80049ec:	2300      	movhi	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e006      	b.n	8004a00 <HAL_I2C_Init+0x184>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <HAL_I2C_Init+0x2c8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bf94      	ite	ls
 80049fa:	2301      	movls	r3, #1
 80049fc:	2300      	movhi	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0fa      	b.n	8004bfe <HAL_I2C_Init+0x382>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a4f      	ldr	r2, [pc, #316]	; (8004b48 <HAL_I2C_Init+0x2cc>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	0c9b      	lsrs	r3, r3, #18
 8004a12:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <HAL_I2C_Init+0x2c0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d802      	bhi.n	8004a42 <HAL_I2C_Init+0x1c6>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	e009      	b.n	8004a56 <HAL_I2C_Init+0x1da>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	; (8004b4c <HAL_I2C_Init+0x2d0>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	3301      	adds	r3, #1
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a68:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4932      	ldr	r1, [pc, #200]	; (8004b3c <HAL_I2C_Init+0x2c0>)
 8004a72:	428b      	cmp	r3, r1
 8004a74:	d819      	bhi.n	8004aaa <HAL_I2C_Init+0x22e>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1e59      	subs	r1, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a84:	1c59      	adds	r1, r3, #1
 8004a86:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_I2C_Init+0x22a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1e59      	subs	r1, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	e064      	b.n	8004b70 <HAL_I2C_Init+0x2f4>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e062      	b.n	8004b70 <HAL_I2C_Init+0x2f4>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d111      	bne.n	8004ad6 <HAL_I2C_Init+0x25a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1e58      	subs	r0, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	440b      	add	r3, r1
 8004ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e012      	b.n	8004afc <HAL_I2C_Init+0x280>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1e58      	subs	r0, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6859      	ldr	r1, [r3, #4]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	0099      	lsls	r1, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aec:	3301      	adds	r3, #1
 8004aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Init+0x288>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e035      	b.n	8004b70 <HAL_I2C_Init+0x2f4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d121      	bne.n	8004b50 <HAL_I2C_Init+0x2d4>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1e58      	subs	r0, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b28:	e022      	b.n	8004b70 <HAL_I2C_Init+0x2f4>
 8004b2a:	bf00      	nop
 8004b2c:	40005400 	.word	0x40005400
 8004b30:	40005800 	.word	0x40005800
 8004b34:	0800b9f0 	.word	0x0800b9f0
 8004b38:	00061a80 	.word	0x00061a80
 8004b3c:	000186a0 	.word	0x000186a0
 8004b40:	001e847f 	.word	0x001e847f
 8004b44:	003d08ff 	.word	0x003d08ff
 8004b48:	431bde83 	.word	0x431bde83
 8004b4c:	10624dd3 	.word	0x10624dd3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	0099      	lsls	r1, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6911      	ldr	r1, [r2, #16]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68d2      	ldr	r2, [r2, #12]
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop

08004c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	817b      	strh	r3, [r7, #10]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	813b      	strh	r3, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c22:	f7fe f8e7 	bl	8002df4 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d007      	beq.n	8004c3e <HAL_I2C_Mem_Write+0x36>
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d004      	beq.n	8004c3e <HAL_I2C_Mem_Write+0x36>
 8004c34:	f640 11ae 	movw	r1, #2478	; 0x9ae
 8004c38:	4873      	ldr	r0, [pc, #460]	; (8004e08 <HAL_I2C_Mem_Write+0x200>)
 8004c3a:	f7fd fa82 	bl	8002142 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	f040 80d9 	bne.w	8004dfe <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	2319      	movs	r3, #25
 8004c52:	2201      	movs	r2, #1
 8004c54:	496d      	ldr	r1, [pc, #436]	; (8004e0c <HAL_I2C_Mem_Write+0x204>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fcce 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0cc      	b.n	8004e00 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_I2C_Mem_Write+0x6c>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e0c5      	b.n	8004e00 <HAL_I2C_Mem_Write+0x1f8>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d007      	beq.n	8004c9a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2221      	movs	r2, #33	; 0x21
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2240      	movs	r2, #64	; 0x40
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a4d      	ldr	r2, [pc, #308]	; (8004e10 <HAL_I2C_Mem_Write+0x208>)
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cdc:	88f8      	ldrh	r0, [r7, #6]
 8004cde:	893a      	ldrh	r2, [r7, #8]
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4603      	mov	r3, r0
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fb05 	bl	80052fc <I2C_RequestMemoryWrite>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d052      	beq.n	8004d9e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e081      	b.n	8004e00 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fd4f 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d107      	bne.n	8004d24 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e06b      	b.n	8004e00 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d11b      	bne.n	8004d9e <HAL_I2C_Mem_Write+0x196>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d017      	beq.n	8004d9e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1aa      	bne.n	8004cfc <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fd3b 	bl	8005826 <I2C_WaitOnBTFFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e016      	b.n	8004e00 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
  }
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	0800b9f0 	.word	0x0800b9f0
 8004e0c:	00100002 	.word	0x00100002
 8004e10:	ffff0000 	.word	0xffff0000

08004e14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4603      	mov	r3, r0
 8004e24:	817b      	strh	r3, [r7, #10]
 8004e26:	460b      	mov	r3, r1
 8004e28:	813b      	strh	r3, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e32:	f7fd ffdf 	bl	8002df4 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d007      	beq.n	8004e4e <HAL_I2C_Mem_Read+0x3a>
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d004      	beq.n	8004e4e <HAL_I2C_Mem_Read+0x3a>
 8004e44:	f640 212b 	movw	r1, #2603	; 0xa2b
 8004e48:	4888      	ldr	r0, [pc, #544]	; (800506c <HAL_I2C_Mem_Read+0x258>)
 8004e4a:	f7fd f97a 	bl	8002142 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	f040 8245 	bne.w	80052e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2319      	movs	r3, #25
 8004e62:	2201      	movs	r2, #1
 8004e64:	4982      	ldr	r1, [pc, #520]	; (8005070 <HAL_I2C_Mem_Read+0x25c>)
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fbc6 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Mem_Read+0x62>
    {
      return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
 8004e74:	e238      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_I2C_Mem_Read+0x70>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e231      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d007      	beq.n	8004eaa <HAL_I2C_Mem_Read+0x96>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2222      	movs	r2, #34	; 0x22
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2240      	movs	r2, #64	; 0x40
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a62      	ldr	r2, [pc, #392]	; (8005074 <HAL_I2C_Mem_Read+0x260>)
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eec:	88f8      	ldrh	r0, [r7, #6]
 8004eee:	893a      	ldrh	r2, [r7, #8]
 8004ef0:	8979      	ldrh	r1, [r7, #10]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4603      	mov	r3, r0
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fa93 	bl	8005428 <I2C_RequestMemoryRead>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e1ed      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <HAL_I2C_Mem_Read+0x128>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e1c1      	b.n	80052c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d11e      	bne.n	8004f82 <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f54:	b672      	cpsid	i
}
 8004f56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f7e:	b662      	cpsie	i
}
 8004f80:	e035      	b.n	8004fee <HAL_I2C_Mem_Read+0x1da>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d11e      	bne.n	8004fc8 <HAL_I2C_Mem_Read+0x1b4>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f9a:	b672      	cpsid	i
}
 8004f9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004fc4:	b662      	cpsie	i
}
 8004fc6:	e012      	b.n	8004fee <HAL_I2C_Mem_Read+0x1da>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd6:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004fee:	e167      	b.n	80052c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	f200 8120 	bhi.w	800523a <HAL_I2C_Mem_Read+0x426>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d123      	bne.n	800504a <HAL_I2C_Mem_Read+0x236>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fc4e 	bl	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Mem_Read+0x202>
          {
            return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e168      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005048:	e13a      	b.n	80052c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	2b02      	cmp	r3, #2
 8005050:	d153      	bne.n	80050fa <HAL_I2C_Mem_Read+0x2e6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	2200      	movs	r2, #0
 800505a:	4907      	ldr	r1, [pc, #28]	; (8005078 <HAL_I2C_Mem_Read+0x264>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 facb 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <HAL_I2C_Mem_Read+0x268>
          {
            return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e13d      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
 800506c:	0800b9f0 	.word	0x0800b9f0
 8005070:	00100002 	.word	0x00100002
 8005074:	ffff0000 	.word	0xffff0000
 8005078:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800507c:	b672      	cpsid	i
}
 800507e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050c2:	b662      	cpsie	i
}
 80050c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050f8:	e0e2      	b.n	80052c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2200      	movs	r2, #0
 8005102:	497b      	ldr	r1, [pc, #492]	; (80052f0 <HAL_I2C_Mem_Read+0x4dc>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fa77 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Read+0x300>
          {
            return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0e9      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005124:	b672      	cpsid	i
}
 8005126:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800515a:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <HAL_I2C_Mem_Read+0x4e0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	08db      	lsrs	r3, r3, #3
 8005160:	4a65      	ldr	r2, [pc, #404]	; (80052f8 <HAL_I2C_Mem_Read+0x4e4>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	0a1a      	lsrs	r2, r3, #8
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	00da      	lsls	r2, r3, #3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	3b01      	subs	r3, #1
 8005178:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d118      	bne.n	80051b2 <HAL_I2C_Mem_Read+0x39e>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0220 	orr.w	r2, r3, #32
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80051a2:	b662      	cpsie	i
}
 80051a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e09a      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d1d9      	bne.n	8005174 <HAL_I2C_Mem_Read+0x360>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005202:	b662      	cpsie	i
}
 8005204:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005238:	e042      	b.n	80052c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fb32 	bl	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Mem_Read+0x43a>
        {
          return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04c      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d118      	bne.n	80052c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f ae93 	bne.w	8004ff0 <HAL_I2C_Mem_Read+0x1dc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00010004 	.word	0x00010004
 80052f4:	20000008 	.word	0x20000008
 80052f8:	14f8b589 	.word	0x14f8b589

080052fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	2200      	movs	r2, #0
 800532e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f960 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d103      	bne.n	8005356 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e05f      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	492d      	ldr	r1, [pc, #180]	; (8005424 <I2C_RequestMemoryWrite+0x128>)
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f998 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e04c      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	6a39      	ldr	r1, [r7, #32]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fa02 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d107      	bne.n	80053be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e02b      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]
 80053d2:	e021      	b.n	8005418 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053d4:	893b      	ldrh	r3, [r7, #8]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	b29b      	uxth	r3, r3
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f9dc 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d107      	bne.n	800540a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e005      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	00010002 	.word	0x00010002

08005428 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	461a      	mov	r2, r3
 8005436:	4603      	mov	r3, r0
 8005438:	817b      	strh	r3, [r7, #10]
 800543a:	460b      	mov	r3, r1
 800543c:	813b      	strh	r3, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005460:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2200      	movs	r2, #0
 800546a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f8c2 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005488:	d103      	bne.n	8005492 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e0aa      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005496:	897b      	ldrh	r3, [r7, #10]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	4952      	ldr	r1, [pc, #328]	; (80055f4 <I2C_RequestMemoryRead+0x1cc>)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f8fa 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e097      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	6a39      	ldr	r1, [r7, #32]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f964 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d107      	bne.n	80054fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e076      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]
 800550e:	e021      	b.n	8005554 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005510:	893b      	ldrh	r3, [r7, #8]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	b29b      	uxth	r3, r3
 8005516:	b2da      	uxtb	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005520:	6a39      	ldr	r1, [r7, #32]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f93e 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b04      	cmp	r3, #4
 8005534:	d107      	bne.n	8005546 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005544:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e050      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	6a39      	ldr	r1, [r7, #32]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f923 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	2b04      	cmp	r3, #4
 800556a:	d107      	bne.n	800557c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e035      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2200      	movs	r2, #0
 8005598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f82b 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b6:	d103      	bne.n	80055c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e013      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055c4:	897b      	ldrh	r3, [r7, #10]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	4906      	ldr	r1, [pc, #24]	; (80055f4 <I2C_RequestMemoryRead+0x1cc>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f863 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	00010002 	.word	0x00010002

080055f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005608:	e025      	b.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d021      	beq.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005612:	f7fd fbef 	bl	8002df4 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e023      	b.n	800569e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10d      	bne.n	800567c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	43da      	mvns	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4013      	ands	r3, r2
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf0c      	ite	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	2300      	movne	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	e00c      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	429a      	cmp	r2, r3
 800569a:	d0b6      	beq.n	800560a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056b4:	e051      	b.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c4:	d123      	bne.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f043 0204 	orr.w	r2, r3, #4
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e046      	b.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d021      	beq.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fd fb6d 	bl	8002df4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d116      	bne.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e020      	b.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10c      	bne.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	43da      	mvns	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	e00b      	b.n	8005796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	43da      	mvns	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d18d      	bne.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b0:	e02d      	b.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f8ce 	bl	8005954 <I2C_IsAcknowledgeFailed>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e02d      	b.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d021      	beq.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fd fb13 	bl	8002df4 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d116      	bne.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e007      	b.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b80      	cmp	r3, #128	; 0x80
 800581a:	d1ca      	bne.n	80057b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005832:	e02d      	b.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f88d 	bl	8005954 <I2C_IsAcknowledgeFailed>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e02d      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d021      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fd fad2 	bl	8002df4 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d116      	bne.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e007      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d1ca      	bne.n	8005834 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b4:	e042      	b.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d119      	bne.n	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0210 	mvn.w	r2, #16
 80058cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e029      	b.n	800594c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fd fa7c 	bl	8002df4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e007      	b.n	800594c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d1b5      	bne.n	80058b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596a:	d11b      	bne.n	80059a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005974:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f043 0204 	orr.w	r2, r3, #4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e35c      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01c      	beq.n	8005a04 <HAL_RCC_OscConfig+0x54>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d116      	bne.n	8005a04 <HAL_RCC_OscConfig+0x54>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d110      	bne.n	8005a04 <HAL_RCC_OscConfig+0x54>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <HAL_RCC_OscConfig+0x54>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_RCC_OscConfig+0x54>
 80059fa:	f240 1167 	movw	r1, #359	; 0x167
 80059fe:	48a5      	ldr	r0, [pc, #660]	; (8005c94 <HAL_RCC_OscConfig+0x2e4>)
 8005a00:	f7fc fb9f 	bl	8002142 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 809a 	beq.w	8005b46 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00e      	beq.n	8005a38 <HAL_RCC_OscConfig+0x88>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a22:	d009      	beq.n	8005a38 <HAL_RCC_OscConfig+0x88>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2c:	d004      	beq.n	8005a38 <HAL_RCC_OscConfig+0x88>
 8005a2e:	f240 116d 	movw	r1, #365	; 0x16d
 8005a32:	4898      	ldr	r0, [pc, #608]	; (8005c94 <HAL_RCC_OscConfig+0x2e4>)
 8005a34:	f7fc fb85 	bl	8002142 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a38:	4b97      	ldr	r3, [pc, #604]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d00c      	beq.n	8005a5e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a44:	4b94      	ldr	r3, [pc, #592]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d112      	bne.n	8005a76 <HAL_RCC_OscConfig+0xc6>
 8005a50:	4b91      	ldr	r3, [pc, #580]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d10b      	bne.n	8005a76 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5e:	4b8e      	ldr	r3, [pc, #568]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d06c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x194>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d168      	bne.n	8005b44 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e302      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_OscConfig+0xde>
 8005a80:	4b85      	ldr	r3, [pc, #532]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a84      	ldr	r2, [pc, #528]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e02e      	b.n	8005aec <HAL_RCC_OscConfig+0x13c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x100>
 8005a96:	4b80      	ldr	r3, [pc, #512]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a7f      	ldr	r2, [pc, #508]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b7d      	ldr	r3, [pc, #500]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a7c      	ldr	r2, [pc, #496]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e01d      	b.n	8005aec <HAL_RCC_OscConfig+0x13c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x124>
 8005aba:	4b77      	ldr	r3, [pc, #476]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a76      	ldr	r2, [pc, #472]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a73      	ldr	r2, [pc, #460]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0x13c>
 8005ad4:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a6f      	ldr	r2, [pc, #444]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6c      	ldr	r2, [pc, #432]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fd f97e 	bl	8002df4 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fd f97a 	bl	8002df4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e2b6      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	4b62      	ldr	r3, [pc, #392]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x14c>
 8005b1a:	e014      	b.n	8005b46 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd f96a 	bl	8002df4 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fd f966 	bl	8002df4 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	; 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e2a2      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b36:	4b58      	ldr	r3, [pc, #352]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x174>
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d079      	beq.n	8005c46 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_RCC_OscConfig+0x1bc>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d004      	beq.n	8005b6c <HAL_RCC_OscConfig+0x1bc>
 8005b62:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005b66:	484b      	ldr	r0, [pc, #300]	; (8005c94 <HAL_RCC_OscConfig+0x2e4>)
 8005b68:	f7fc faeb 	bl	8002142 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	2b1f      	cmp	r3, #31
 8005b72:	d904      	bls.n	8005b7e <HAL_RCC_OscConfig+0x1ce>
 8005b74:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005b78:	4846      	ldr	r0, [pc, #280]	; (8005c94 <HAL_RCC_OscConfig+0x2e4>)
 8005b7a:	f7fc fae2 	bl	8002142 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b7e:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d11c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x220>
 8005b96:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_RCC_OscConfig+0x20a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e260      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4933      	ldr	r1, [pc, #204]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bce:	e03a      	b.n	8005c46 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d020      	beq.n	8005c1a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <HAL_RCC_OscConfig+0x2ec>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bde:	f7fd f909 	bl	8002df4 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be6:	f7fd f905 	bl	8002df4 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e241      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf8:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4921      	ldr	r1, [pc, #132]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]
 8005c18:	e015      	b.n	8005c46 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c1a:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <HAL_RCC_OscConfig+0x2ec>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c20:	f7fd f8e8 	bl	8002df4 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c28:	f7fd f8e4 	bl	8002df4 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e220      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3a:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <HAL_RCC_OscConfig+0x2e8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d048      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_RCC_OscConfig+0x2bc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d004      	beq.n	8005c6c <HAL_RCC_OscConfig+0x2bc>
 8005c62:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8005c66:	480b      	ldr	r0, [pc, #44]	; (8005c94 <HAL_RCC_OscConfig+0x2e4>)
 8005c68:	f7fc fa6b 	bl	8002142 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d021      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c74:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_RCC_OscConfig+0x2f0>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7a:	f7fd f8bb 	bl	8002df4 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c80:	e010      	b.n	8005ca4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fd f8b7 	bl	8002df4 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d909      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e1f3      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
 8005c94:	0800ba28 	.word	0x0800ba28
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	42420000 	.word	0x42420000
 8005ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca4:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0e8      	beq.n	8005c82 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f000 fc0f 	bl	80064d4 <RCC_Delay>
 8005cb6:	e015      	b.n	8005ce4 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb8:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCC_OscConfig+0x498>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cbe:	f7fd f899 	bl	8002df4 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc6:	f7fd f895 	bl	8002df4 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e1d1      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd8:	4b5a      	ldr	r3, [pc, #360]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80c0 	beq.w	8005e72 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <HAL_RCC_OscConfig+0x368>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d008      	beq.n	8005d18 <HAL_RCC_OscConfig+0x368>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d004      	beq.n	8005d18 <HAL_RCC_OscConfig+0x368>
 8005d0e:	f240 2111 	movw	r1, #529	; 0x211
 8005d12:	484e      	ldr	r0, [pc, #312]	; (8005e4c <HAL_RCC_OscConfig+0x49c>)
 8005d14:	f7fc fa15 	bl	8002142 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d18:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10d      	bne.n	8005d40 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d24:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4a46      	ldr	r2, [pc, #280]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	61d3      	str	r3, [r2, #28]
 8005d30:	4b44      	ldr	r3, [pc, #272]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d40:	4b43      	ldr	r3, [pc, #268]	; (8005e50 <HAL_RCC_OscConfig+0x4a0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d118      	bne.n	8005d7e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4c:	4b40      	ldr	r3, [pc, #256]	; (8005e50 <HAL_RCC_OscConfig+0x4a0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <HAL_RCC_OscConfig+0x4a0>)
 8005d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d58:	f7fd f84c 	bl	8002df4 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d60:	f7fd f848 	bl	8002df4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e184      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d72:	4b37      	ldr	r3, [pc, #220]	; (8005e50 <HAL_RCC_OscConfig+0x4a0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d106      	bne.n	8005d94 <HAL_RCC_OscConfig+0x3e4>
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	4a2e      	ldr	r2, [pc, #184]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	6213      	str	r3, [r2, #32]
 8005d92:	e02d      	b.n	8005df0 <HAL_RCC_OscConfig+0x440>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCC_OscConfig+0x406>
 8005d9c:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	4a28      	ldr	r2, [pc, #160]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	6213      	str	r3, [r2, #32]
 8005da8:	4b26      	ldr	r3, [pc, #152]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	4a25      	ldr	r2, [pc, #148]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dae:	f023 0304 	bic.w	r3, r3, #4
 8005db2:	6213      	str	r3, [r2, #32]
 8005db4:	e01c      	b.n	8005df0 <HAL_RCC_OscConfig+0x440>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x428>
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	6213      	str	r3, [r2, #32]
 8005dca:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6213      	str	r3, [r2, #32]
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0x440>
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	4a19      	ldr	r2, [pc, #100]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	6213      	str	r3, [r2, #32]
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005dea:	f023 0304 	bic.w	r3, r3, #4
 8005dee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df8:	f7fc fffc 	bl	8002df4 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fc fff8 	bl	8002df4 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e132      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_RCC_OscConfig+0x494>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0ee      	beq.n	8005e00 <HAL_RCC_OscConfig+0x450>
 8005e22:	e01d      	b.n	8005e60 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e24:	f7fc ffe6 	bl	8002df4 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2a:	e013      	b.n	8005e54 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e2c:	f7fc ffe2 	bl	8002df4 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d90a      	bls.n	8005e54 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e11c      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
 8005e48:	42420480 	.word	0x42420480
 8005e4c:	0800ba28 	.word	0x0800ba28
 8005e50:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e54:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e5      	bne.n	8005e2c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d105      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e66:	4b87      	ldr	r3, [pc, #540]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	4a86      	ldr	r2, [pc, #536]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e70:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4e4>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d008      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4e4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d004      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4e4>
 8005e8a:	f240 21af 	movw	r1, #687	; 0x2af
 8005e8e:	487e      	ldr	r0, [pc, #504]	; (8006088 <HAL_RCC_OscConfig+0x6d8>)
 8005e90:	f7fc f957 	bl	8002142 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80ee 	beq.w	800607a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9e:	4b79      	ldr	r3, [pc, #484]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	f000 80ce 	beq.w	8006048 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	f040 80b2 	bne.w	800601a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x522>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d004      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x522>
 8005ec8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8005ecc:	486e      	ldr	r0, [pc, #440]	; (8006088 <HAL_RCC_OscConfig+0x6d8>)
 8005ece:	f7fc f938 	bl	8002142 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04a      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee2:	d045      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eec:	d040      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ef6:	d03b      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f00:	d036      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005f0a:	d031      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005f14:	d02c      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005f1e:	d027      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f28:	d022      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005f32:	d01d      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005f3c:	d018      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005f46:	d013      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f50:	d00e      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005f5a:	d009      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005f64:	d004      	beq.n	8005f70 <HAL_RCC_OscConfig+0x5c0>
 8005f66:	f240 21b9 	movw	r1, #697	; 0x2b9
 8005f6a:	4847      	ldr	r0, [pc, #284]	; (8006088 <HAL_RCC_OscConfig+0x6d8>)
 8005f6c:	f7fc f8e9 	bl	8002142 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f70:	4b46      	ldr	r3, [pc, #280]	; (800608c <HAL_RCC_OscConfig+0x6dc>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f76:	f7fc ff3d 	bl	8002df4 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7e:	f7fc ff39 	bl	8002df4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e075      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f90:	4b3c      	ldr	r3, [pc, #240]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f0      	bne.n	8005f7e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d116      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x612>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x612>
 8005fb8:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005fbc:	4832      	ldr	r0, [pc, #200]	; (8006088 <HAL_RCC_OscConfig+0x6d8>)
 8005fbe:	f7fc f8c0 	bl	8002142 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fc2:	4b30      	ldr	r3, [pc, #192]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	492d      	ldr	r1, [pc, #180]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a19      	ldr	r1, [r3, #32]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	4927      	ldr	r1, [pc, #156]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fec:	4b27      	ldr	r3, [pc, #156]	; (800608c <HAL_RCC_OscConfig+0x6dc>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fc feff 	bl	8002df4 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffa:	f7fc fefb 	bl	8002df4 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e037      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f0      	beq.n	8005ffa <HAL_RCC_OscConfig+0x64a>
 8006018:	e02f      	b.n	800607a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601a:	4b1c      	ldr	r3, [pc, #112]	; (800608c <HAL_RCC_OscConfig+0x6dc>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fc fee8 	bl	8002df4 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006028:	f7fc fee4 	bl	8002df4 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e020      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x678>
 8006046:	e018      	b.n	800607a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e013      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCC_OscConfig+0x6d4>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	429a      	cmp	r2, r3
 8006066:	d106      	bne.n	8006076 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006072:	429a      	cmp	r2, r3
 8006074:	d001      	beq.n	800607a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40021000 	.word	0x40021000
 8006088:	0800ba28 	.word	0x0800ba28
 800608c:	42420060 	.word	0x42420060

08006090 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e176      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d116      	bne.n	80060de <HAL_RCC_ClockConfig+0x4e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d110      	bne.n	80060de <HAL_RCC_ClockConfig+0x4e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <HAL_RCC_ClockConfig+0x4e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <HAL_RCC_ClockConfig+0x4e>
 80060d4:	f44f 714e 	mov.w	r1, #824	; 0x338
 80060d8:	4874      	ldr	r0, [pc, #464]	; (80062ac <HAL_RCC_ClockConfig+0x21c>)
 80060da:	f7fc f832 	bl	8002142 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <HAL_RCC_ClockConfig+0x6a>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d007      	beq.n	80060fa <HAL_RCC_ClockConfig+0x6a>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d004      	beq.n	80060fa <HAL_RCC_ClockConfig+0x6a>
 80060f0:	f240 3139 	movw	r1, #825	; 0x339
 80060f4:	486d      	ldr	r0, [pc, #436]	; (80062ac <HAL_RCC_ClockConfig+0x21c>)
 80060f6:	f7fc f824 	bl	8002142 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060fa:	4b6d      	ldr	r3, [pc, #436]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d910      	bls.n	800612a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006108:	4b69      	ldr	r3, [pc, #420]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 0207 	bic.w	r2, r3, #7
 8006110:	4967      	ldr	r1, [pc, #412]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006118:	4b65      	ldr	r3, [pc, #404]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e133      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d049      	beq.n	80061ca <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006142:	4b5c      	ldr	r3, [pc, #368]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4a5b      	ldr	r2, [pc, #364]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 8006148:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800614c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800615a:	4b56      	ldr	r3, [pc, #344]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4a55      	ldr	r2, [pc, #340]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 8006160:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006164:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d024      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d020      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b90      	cmp	r3, #144	; 0x90
 800617c:	d01c      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2ba0      	cmp	r3, #160	; 0xa0
 8006184:	d018      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2bb0      	cmp	r3, #176	; 0xb0
 800618c:	d014      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2bc0      	cmp	r3, #192	; 0xc0
 8006194:	d010      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2bd0      	cmp	r3, #208	; 0xd0
 800619c:	d00c      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2be0      	cmp	r3, #224	; 0xe0
 80061a4:	d008      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2bf0      	cmp	r3, #240	; 0xf0
 80061ac:	d004      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x128>
 80061ae:	f240 315f 	movw	r1, #863	; 0x35f
 80061b2:	483e      	ldr	r0, [pc, #248]	; (80062ac <HAL_RCC_ClockConfig+0x21c>)
 80061b4:	f7fb ffc5 	bl	8002142 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b8:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	493b      	ldr	r1, [pc, #236]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d051      	beq.n	800627a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x168>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d008      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x168>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d004      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x168>
 80061ee:	f240 3166 	movw	r1, #870	; 0x366
 80061f2:	482e      	ldr	r0, [pc, #184]	; (80062ac <HAL_RCC_ClockConfig+0x21c>)
 80061f4:	f7fb ffa5 	bl	8002142 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d107      	bne.n	8006210 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006200:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d115      	bne.n	8006238 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0c0      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d107      	bne.n	8006228 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006218:	4b26      	ldr	r3, [pc, #152]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d109      	bne.n	8006238 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0b4      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006228:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0ac      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f023 0203 	bic.w	r2, r3, #3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	491b      	ldr	r1, [pc, #108]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 8006246:	4313      	orrs	r3, r2
 8006248:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800624a:	f7fc fdd3 	bl	8002df4 <HAL_GetTick>
 800624e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006250:	e00a      	b.n	8006268 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006252:	f7fc fdcf 	bl	8002df4 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e094      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <HAL_RCC_ClockConfig+0x224>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f003 020c 	and.w	r2, r3, #12
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	429a      	cmp	r2, r3
 8006278:	d1eb      	bne.n	8006252 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800627a:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d217      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f023 0207 	bic.w	r2, r3, #7
 8006290:	4907      	ldr	r1, [pc, #28]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_ClockConfig+0x220>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d008      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e073      	b.n	8006392 <HAL_RCC_ClockConfig+0x302>
 80062aa:	bf00      	nop
 80062ac:	0800ba28 	.word	0x0800ba28
 80062b0:	40022000 	.word	0x40022000
 80062b4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d025      	beq.n	8006310 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d018      	beq.n	80062fe <HAL_RCC_ClockConfig+0x26e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d013      	beq.n	80062fe <HAL_RCC_ClockConfig+0x26e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80062de:	d00e      	beq.n	80062fe <HAL_RCC_ClockConfig+0x26e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062e8:	d009      	beq.n	80062fe <HAL_RCC_ClockConfig+0x26e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062f2:	d004      	beq.n	80062fe <HAL_RCC_ClockConfig+0x26e>
 80062f4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80062f8:	4828      	ldr	r0, [pc, #160]	; (800639c <HAL_RCC_ClockConfig+0x30c>)
 80062fa:	f7fb ff22 	bl	8002142 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <HAL_RCC_ClockConfig+0x310>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4925      	ldr	r1, [pc, #148]	; (80063a0 <HAL_RCC_ClockConfig+0x310>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d026      	beq.n	800636a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d018      	beq.n	8006356 <HAL_RCC_ClockConfig+0x2c6>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d013      	beq.n	8006356 <HAL_RCC_ClockConfig+0x2c6>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006336:	d00e      	beq.n	8006356 <HAL_RCC_ClockConfig+0x2c6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006340:	d009      	beq.n	8006356 <HAL_RCC_ClockConfig+0x2c6>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800634a:	d004      	beq.n	8006356 <HAL_RCC_ClockConfig+0x2c6>
 800634c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8006350:	4812      	ldr	r0, [pc, #72]	; (800639c <HAL_RCC_ClockConfig+0x30c>)
 8006352:	f7fb fef6 	bl	8002142 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <HAL_RCC_ClockConfig+0x310>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	490e      	ldr	r1, [pc, #56]	; (80063a0 <HAL_RCC_ClockConfig+0x310>)
 8006366:	4313      	orrs	r3, r2
 8006368:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800636a:	f000 f821 	bl	80063b0 <HAL_RCC_GetSysClockFreq>
 800636e:	4602      	mov	r2, r0
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCC_ClockConfig+0x310>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	490a      	ldr	r1, [pc, #40]	; (80063a4 <HAL_RCC_ClockConfig+0x314>)
 800637c:	5ccb      	ldrb	r3, [r1, r3]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <HAL_RCC_ClockConfig+0x318>)
 8006384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <HAL_RCC_ClockConfig+0x31c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc fcf0 	bl	8002d70 <HAL_InitTick>

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	0800ba28 	.word	0x0800ba28
 80063a0:	40021000 	.word	0x40021000
 80063a4:	0800bbb0 	.word	0x0800bbb0
 80063a8:	20000008 	.word	0x20000008
 80063ac:	2000000c 	.word	0x2000000c

080063b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b0:	b490      	push	{r4, r7}
 80063b2:	b08a      	sub	sp, #40	; 0x28
 80063b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb0>)
 80063b8:	1d3c      	adds	r4, r7, #4
 80063ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063c0:	f240 2301 	movw	r3, #513	; 0x201
 80063c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	2300      	movs	r3, #0
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	2300      	movs	r3, #0
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063da:	4b22      	ldr	r3, [pc, #136]	; (8006464 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d002      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x40>
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d003      	beq.n	80063f6 <HAL_RCC_GetSysClockFreq+0x46>
 80063ee:	e02d      	b.n	800644c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063f0:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063f2:	623b      	str	r3, [r7, #32]
      break;
 80063f4:	e02d      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	0c9b      	lsrs	r3, r3, #18
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006402:	4413      	add	r3, r2
 8006404:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006408:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006414:	4b13      	ldr	r3, [pc, #76]	; (8006464 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	0c5b      	lsrs	r3, r3, #17
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006422:	4413      	add	r3, r2
 8006424:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006428:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800642e:	fb02 f203 	mul.w	r2, r2, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
 800643a:	e004      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4a0b      	ldr	r2, [pc, #44]	; (800646c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	623b      	str	r3, [r7, #32]
      break;
 800644a:	e002      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800644e:	623b      	str	r3, [r7, #32]
      break;
 8006450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006452:	6a3b      	ldr	r3, [r7, #32]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3728      	adds	r7, #40	; 0x28
 8006458:	46bd      	mov	sp, r7
 800645a:	bc90      	pop	{r4, r7}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	0800ba60 	.word	0x0800ba60
 8006464:	40021000 	.word	0x40021000
 8006468:	007a1200 	.word	0x007a1200
 800646c:	003d0900 	.word	0x003d0900

08006470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <HAL_RCC_GetHCLKFreq+0x10>)
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	20000008 	.word	0x20000008

08006484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006488:	f7ff fff2 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 800648c:	4602      	mov	r2, r0
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	4903      	ldr	r1, [pc, #12]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800649a:	5ccb      	ldrb	r3, [r1, r3]
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40021000 	.word	0x40021000
 80064a8:	0800bbc0 	.word	0x0800bbc0

080064ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064b0:	f7ff ffde 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	0adb      	lsrs	r3, r3, #11
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4903      	ldr	r1, [pc, #12]	; (80064d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40021000 	.word	0x40021000
 80064d0:	0800bbc0 	.word	0x0800bbc0

080064d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <RCC_Delay+0x34>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0a      	ldr	r2, [pc, #40]	; (800650c <RCC_Delay+0x38>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	0a5b      	lsrs	r3, r3, #9
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064f0:	bf00      	nop
  }
  while (Delay --);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1e5a      	subs	r2, r3, #1
 80064f6:	60fa      	str	r2, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f9      	bne.n	80064f0 <RCC_Delay+0x1c>
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr
 8006508:	20000008 	.word	0x20000008
 800650c:	10624dd3 	.word	0x10624dd3

08006510 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d11b      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d115      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10f      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800655c:	216c      	movs	r1, #108	; 0x6c
 800655e:	4873      	ldr	r0, [pc, #460]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006560:	f7fb fdef 	bl	8002142 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8095 	beq.w	800669c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d012      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d00d      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658c:	d008      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006596:	d003      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006598:	2172      	movs	r1, #114	; 0x72
 800659a:	4864      	ldr	r0, [pc, #400]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800659c:	f7fb fdd1 	bl	8002142 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80065a0:	2300      	movs	r3, #0
 80065a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a4:	4b62      	ldr	r3, [pc, #392]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b0:	4b5f      	ldr	r3, [pc, #380]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4a5e      	ldr	r2, [pc, #376]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80065b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ba:	61d3      	str	r3, [r2, #28]
 80065bc:	4b5c      	ldr	r3, [pc, #368]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065cc:	4b59      	ldr	r3, [pc, #356]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d118      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d8:	4b56      	ldr	r3, [pc, #344]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a55      	ldr	r2, [pc, #340]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e4:	f7fc fc06 	bl	8002df4 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ea:	e008      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fc fc02 	bl	8002df4 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e092      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4b4d      	ldr	r3, [pc, #308]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660a:	4b49      	ldr	r3, [pc, #292]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d02e      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	429a      	cmp	r2, r3
 8006626:	d027      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006628:	4b41      	ldr	r3, [pc, #260]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006630:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006638:	4b3f      	ldr	r3, [pc, #252]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800663e:	4a3c      	ldr	r2, [pc, #240]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d014      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664e:	f7fc fbd1 	bl	8002df4 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006654:	e00a      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006656:	f7fc fbcd 	bl	8002df4 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f241 3288 	movw	r2, #5000	; 0x1388
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e05b      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666c:	4b30      	ldr	r3, [pc, #192]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ee      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006678:	4b2d      	ldr	r3, [pc, #180]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	492a      	ldr	r1, [pc, #168]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006686:	4313      	orrs	r3, r2
 8006688:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4a26      	ldr	r2, [pc, #152]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01f      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b8:	d00d      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c2:	d008      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066cc:	d003      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80066ce:	21b9      	movs	r1, #185	; 0xb9
 80066d0:	4816      	ldr	r0, [pc, #88]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80066d2:	f7fb fd36 	bl	8002142 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d6:	4b16      	ldr	r3, [pc, #88]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4913      	ldr	r1, [pc, #76]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d016      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fc:	d008      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006706:	f240 1115 	movw	r1, #277	; 0x115
 800670a:	4808      	ldr	r0, [pc, #32]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800670c:	f7fb fd19 	bl	8002142 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	4904      	ldr	r1, [pc, #16]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	0800ba70 	.word	0x0800ba70
 8006730:	40021000 	.word	0x40021000
 8006734:	40007000 	.word	0x40007000
 8006738:	42420440 	.word	0x42420440

0800673c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e175      	b.n	8006a3a <HAL_SPI_Init+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a6e      	ldr	r2, [pc, #440]	; (800690c <HAL_SPI_Init+0x1d0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_SPI_Init+0x3a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a6c      	ldr	r2, [pc, #432]	; (8006910 <HAL_SPI_Init+0x1d4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_SPI_Init+0x3a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6b      	ldr	r2, [pc, #428]	; (8006914 <HAL_SPI_Init+0x1d8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_SPI_Init+0x3a>
 800676c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006770:	4869      	ldr	r0, [pc, #420]	; (8006918 <HAL_SPI_Init+0x1dc>)
 8006772:	f7fb fce6 	bl	8002142 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <HAL_SPI_Init+0x56>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006786:	d004      	beq.n	8006792 <HAL_SPI_Init+0x56>
 8006788:	f240 1159 	movw	r1, #345	; 0x159
 800678c:	4862      	ldr	r0, [pc, #392]	; (8006918 <HAL_SPI_Init+0x1dc>)
 800678e:	f7fb fcd8 	bl	8002142 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <HAL_SPI_Init+0x7c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d009      	beq.n	80067b8 <HAL_SPI_Init+0x7c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ac:	d004      	beq.n	80067b8 <HAL_SPI_Init+0x7c>
 80067ae:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80067b2:	4859      	ldr	r0, [pc, #356]	; (8006918 <HAL_SPI_Init+0x1dc>)
 80067b4:	f7fb fcc5 	bl	8002142 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d008      	beq.n	80067d4 <HAL_SPI_Init+0x98>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <HAL_SPI_Init+0x98>
 80067ca:	f240 115b 	movw	r1, #347	; 0x15b
 80067ce:	4852      	ldr	r0, [pc, #328]	; (8006918 <HAL_SPI_Init+0x1dc>)
 80067d0:	f7fb fcb7 	bl	8002142 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067dc:	d00d      	beq.n	80067fa <HAL_SPI_Init+0xbe>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_SPI_Init+0xbe>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067ee:	d004      	beq.n	80067fa <HAL_SPI_Init+0xbe>
 80067f0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80067f4:	4848      	ldr	r0, [pc, #288]	; (8006918 <HAL_SPI_Init+0x1dc>)
 80067f6:	f7fb fca4 	bl	8002142 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d020      	beq.n	8006844 <HAL_SPI_Init+0x108>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	2b08      	cmp	r3, #8
 8006808:	d01c      	beq.n	8006844 <HAL_SPI_Init+0x108>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b10      	cmp	r3, #16
 8006810:	d018      	beq.n	8006844 <HAL_SPI_Init+0x108>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	2b18      	cmp	r3, #24
 8006818:	d014      	beq.n	8006844 <HAL_SPI_Init+0x108>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	2b20      	cmp	r3, #32
 8006820:	d010      	beq.n	8006844 <HAL_SPI_Init+0x108>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b28      	cmp	r3, #40	; 0x28
 8006828:	d00c      	beq.n	8006844 <HAL_SPI_Init+0x108>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	2b30      	cmp	r3, #48	; 0x30
 8006830:	d008      	beq.n	8006844 <HAL_SPI_Init+0x108>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	2b38      	cmp	r3, #56	; 0x38
 8006838:	d004      	beq.n	8006844 <HAL_SPI_Init+0x108>
 800683a:	f240 115d 	movw	r1, #349	; 0x15d
 800683e:	4836      	ldr	r0, [pc, #216]	; (8006918 <HAL_SPI_Init+0x1dc>)
 8006840:	f7fb fc7f 	bl	8002142 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_SPI_Init+0x122>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	2b80      	cmp	r3, #128	; 0x80
 8006852:	d004      	beq.n	800685e <HAL_SPI_Init+0x122>
 8006854:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006858:	482f      	ldr	r0, [pc, #188]	; (8006918 <HAL_SPI_Init+0x1dc>)
 800685a:	f7fb fc72 	bl	8002142 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_SPI_Init+0x134>
 8006866:	f240 1161 	movw	r1, #353	; 0x161
 800686a:	482b      	ldr	r0, [pc, #172]	; (8006918 <HAL_SPI_Init+0x1dc>)
 800686c:	f7fb fc69 	bl	8002142 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d151      	bne.n	800691c <HAL_SPI_Init+0x1e0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_SPI_Init+0x156>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d004      	beq.n	8006892 <HAL_SPI_Init+0x156>
 8006888:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800688c:	4822      	ldr	r0, [pc, #136]	; (8006918 <HAL_SPI_Init+0x1dc>)
 800688e:	f7fb fc58 	bl	8002142 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <HAL_SPI_Init+0x170>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d004      	beq.n	80068ac <HAL_SPI_Init+0x170>
 80068a2:	f240 1165 	movw	r1, #357	; 0x165
 80068a6:	481c      	ldr	r0, [pc, #112]	; (8006918 <HAL_SPI_Init+0x1dc>)
 80068a8:	f7fb fc4b 	bl	8002142 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b4:	d125      	bne.n	8006902 <HAL_SPI_Init+0x1c6>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d059      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d055      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d051      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b18      	cmp	r3, #24
 80068d4:	d04d      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d049      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	2b28      	cmp	r3, #40	; 0x28
 80068e4:	d045      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	2b30      	cmp	r3, #48	; 0x30
 80068ec:	d041      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	2b38      	cmp	r3, #56	; 0x38
 80068f4:	d03d      	beq.n	8006972 <HAL_SPI_Init+0x236>
 80068f6:	f240 1169 	movw	r1, #361	; 0x169
 80068fa:	4807      	ldr	r0, [pc, #28]	; (8006918 <HAL_SPI_Init+0x1dc>)
 80068fc:	f7fb fc21 	bl	8002142 <assert_failed>
 8006900:	e037      	b.n	8006972 <HAL_SPI_Init+0x236>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	61da      	str	r2, [r3, #28]
 8006908:	e033      	b.n	8006972 <HAL_SPI_Init+0x236>
 800690a:	bf00      	nop
 800690c:	40013000 	.word	0x40013000
 8006910:	40003800 	.word	0x40003800
 8006914:	40003c00 	.word	0x40003c00
 8006918:	0800babc 	.word	0x0800babc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d020      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d01c      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	2b10      	cmp	r3, #16
 8006932:	d018      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	2b18      	cmp	r3, #24
 800693a:	d014      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	2b20      	cmp	r3, #32
 8006942:	d010      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	2b28      	cmp	r3, #40	; 0x28
 800694a:	d00c      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	2b30      	cmp	r3, #48	; 0x30
 8006952:	d008      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	2b38      	cmp	r3, #56	; 0x38
 800695a:	d004      	beq.n	8006966 <HAL_SPI_Init+0x22a>
 800695c:	f240 1173 	movw	r1, #371	; 0x173
 8006960:	4838      	ldr	r0, [pc, #224]	; (8006a44 <HAL_SPI_Init+0x308>)
 8006962:	f7fb fbee 	bl	8002142 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d106      	bne.n	8006992 <HAL_SPI_Init+0x256>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fb fc19 	bl	80021c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f6:	ea42 0103 	orr.w	r1, r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	0c1a      	lsrs	r2, r3, #16
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f002 0204 	and.w	r2, r2, #4
 8006a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	0800babc 	.word	0x0800babc

08006a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e0c5      	b.n	8006be6 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a64      	ldr	r2, [pc, #400]	; (8006bf0 <HAL_TIM_Base_Init+0x1a8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d045      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a62      	ldr	r2, [pc, #392]	; (8006bf4 <HAL_TIM_Base_Init+0x1ac>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d040      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a76:	d03b      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5e      	ldr	r2, [pc, #376]	; (8006bf8 <HAL_TIM_Base_Init+0x1b0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d036      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a5d      	ldr	r2, [pc, #372]	; (8006bfc <HAL_TIM_Base_Init+0x1b4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d031      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5b      	ldr	r2, [pc, #364]	; (8006c00 <HAL_TIM_Base_Init+0x1b8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d02c      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a5a      	ldr	r2, [pc, #360]	; (8006c04 <HAL_TIM_Base_Init+0x1bc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d027      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a58      	ldr	r2, [pc, #352]	; (8006c08 <HAL_TIM_Base_Init+0x1c0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d022      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a57      	ldr	r2, [pc, #348]	; (8006c0c <HAL_TIM_Base_Init+0x1c4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d01d      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a55      	ldr	r2, [pc, #340]	; (8006c10 <HAL_TIM_Base_Init+0x1c8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d018      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a54      	ldr	r2, [pc, #336]	; (8006c14 <HAL_TIM_Base_Init+0x1cc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a52      	ldr	r2, [pc, #328]	; (8006c18 <HAL_TIM_Base_Init+0x1d0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a51      	ldr	r2, [pc, #324]	; (8006c1c <HAL_TIM_Base_Init+0x1d4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a4f      	ldr	r2, [pc, #316]	; (8006c20 <HAL_TIM_Base_Init+0x1d8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIM_Base_Init+0xa8>
 8006ae6:	f240 1113 	movw	r1, #275	; 0x113
 8006aea:	484e      	ldr	r0, [pc, #312]	; (8006c24 <HAL_TIM_Base_Init+0x1dc>)
 8006aec:	f7fb fb29 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d014      	beq.n	8006b22 <HAL_TIM_Base_Init+0xda>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d010      	beq.n	8006b22 <HAL_TIM_Base_Init+0xda>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d00c      	beq.n	8006b22 <HAL_TIM_Base_Init+0xda>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d008      	beq.n	8006b22 <HAL_TIM_Base_Init+0xda>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b60      	cmp	r3, #96	; 0x60
 8006b16:	d004      	beq.n	8006b22 <HAL_TIM_Base_Init+0xda>
 8006b18:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006b1c:	4841      	ldr	r0, [pc, #260]	; (8006c24 <HAL_TIM_Base_Init+0x1dc>)
 8006b1e:	f7fb fb10 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00e      	beq.n	8006b48 <HAL_TIM_Base_Init+0x100>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b32:	d009      	beq.n	8006b48 <HAL_TIM_Base_Init+0x100>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIM_Base_Init+0x100>
 8006b3e:	f240 1115 	movw	r1, #277	; 0x115
 8006b42:	4838      	ldr	r0, [pc, #224]	; (8006c24 <HAL_TIM_Base_Init+0x1dc>)
 8006b44:	f7fb fafd 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_TIM_Base_Init+0x11a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	2b80      	cmp	r3, #128	; 0x80
 8006b56:	d004      	beq.n	8006b62 <HAL_TIM_Base_Init+0x11a>
 8006b58:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006b5c:	4831      	ldr	r0, [pc, #196]	; (8006c24 <HAL_TIM_Base_Init+0x1dc>)
 8006b5e:	f7fb faf0 	bl	8002142 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fb fd6c 	bl	8002654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f000 ff74 	bl	8007a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	40013400 	.word	0x40013400
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40000800 	.word	0x40000800
 8006c00:	40000c00 	.word	0x40000c00
 8006c04:	40001000 	.word	0x40001000
 8006c08:	40001400 	.word	0x40001400
 8006c0c:	40014c00 	.word	0x40014c00
 8006c10:	40015000 	.word	0x40015000
 8006c14:	40015400 	.word	0x40015400
 8006c18:	40001800 	.word	0x40001800
 8006c1c:	40001c00 	.word	0x40001c00
 8006c20:	40002000 	.word	0x40002000
 8006c24:	0800baf4 	.word	0x0800baf4

08006c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e0c5      	b.n	8006dc6 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a64      	ldr	r2, [pc, #400]	; (8006dd0 <HAL_TIM_PWM_Init+0x1a8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d045      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a62      	ldr	r2, [pc, #392]	; (8006dd4 <HAL_TIM_PWM_Init+0x1ac>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d040      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c56:	d03b      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a5e      	ldr	r2, [pc, #376]	; (8006dd8 <HAL_TIM_PWM_Init+0x1b0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d036      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a5d      	ldr	r2, [pc, #372]	; (8006ddc <HAL_TIM_PWM_Init+0x1b4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d031      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5b      	ldr	r2, [pc, #364]	; (8006de0 <HAL_TIM_PWM_Init+0x1b8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d02c      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5a      	ldr	r2, [pc, #360]	; (8006de4 <HAL_TIM_PWM_Init+0x1bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d027      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a58      	ldr	r2, [pc, #352]	; (8006de8 <HAL_TIM_PWM_Init+0x1c0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d022      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a57      	ldr	r2, [pc, #348]	; (8006dec <HAL_TIM_PWM_Init+0x1c4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d01d      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a55      	ldr	r2, [pc, #340]	; (8006df0 <HAL_TIM_PWM_Init+0x1c8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d018      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a54      	ldr	r2, [pc, #336]	; (8006df4 <HAL_TIM_PWM_Init+0x1cc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a52      	ldr	r2, [pc, #328]	; (8006df8 <HAL_TIM_PWM_Init+0x1d0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00e      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a51      	ldr	r2, [pc, #324]	; (8006dfc <HAL_TIM_PWM_Init+0x1d4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a4f      	ldr	r2, [pc, #316]	; (8006e00 <HAL_TIM_PWM_Init+0x1d8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_TIM_PWM_Init+0xa8>
 8006cc6:	f240 510e 	movw	r1, #1294	; 0x50e
 8006cca:	484e      	ldr	r0, [pc, #312]	; (8006e04 <HAL_TIM_PWM_Init+0x1dc>)
 8006ccc:	f7fb fa39 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d014      	beq.n	8006d02 <HAL_TIM_PWM_Init+0xda>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d010      	beq.n	8006d02 <HAL_TIM_PWM_Init+0xda>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d00c      	beq.n	8006d02 <HAL_TIM_PWM_Init+0xda>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d008      	beq.n	8006d02 <HAL_TIM_PWM_Init+0xda>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b60      	cmp	r3, #96	; 0x60
 8006cf6:	d004      	beq.n	8006d02 <HAL_TIM_PWM_Init+0xda>
 8006cf8:	f240 510f 	movw	r1, #1295	; 0x50f
 8006cfc:	4841      	ldr	r0, [pc, #260]	; (8006e04 <HAL_TIM_PWM_Init+0x1dc>)
 8006cfe:	f7fb fa20 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x100>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x100>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x100>
 8006d1e:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8006d22:	4838      	ldr	r0, [pc, #224]	; (8006e04 <HAL_TIM_PWM_Init+0x1dc>)
 8006d24:	f7fb fa0d 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_TIM_PWM_Init+0x11a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b80      	cmp	r3, #128	; 0x80
 8006d36:	d004      	beq.n	8006d42 <HAL_TIM_PWM_Init+0x11a>
 8006d38:	f240 5111 	movw	r1, #1297	; 0x511
 8006d3c:	4831      	ldr	r0, [pc, #196]	; (8006e04 <HAL_TIM_PWM_Init+0x1dc>)
 8006d3e:	f7fb fa00 	bl	8002142 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb fc56 	bl	8002608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f000 fe84 	bl	8007a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40013400 	.word	0x40013400
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800
 8006de0:	40000c00 	.word	0x40000c00
 8006de4:	40001000 	.word	0x40001000
 8006de8:	40001400 	.word	0x40001400
 8006dec:	40014c00 	.word	0x40014c00
 8006df0:	40015000 	.word	0x40015000
 8006df4:	40015400 	.word	0x40015400
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40001c00 	.word	0x40001c00
 8006e00:	40002000 	.word	0x40002000
 8006e04:	0800baf4 	.word	0x0800baf4

08006e08 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a9d      	ldr	r2, [pc, #628]	; (800708c <HAL_TIM_PWM_Start_IT+0x284>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10f      	bne.n	8006e3c <HAL_TIM_PWM_Start_IT+0x34>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 809f 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	f000 809b 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	f000 8097 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b0c      	cmp	r3, #12
 8006e38:	f000 8093 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a93      	ldr	r2, [pc, #588]	; (8007090 <HAL_TIM_PWM_Start_IT+0x288>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d10e      	bne.n	8006e64 <HAL_TIM_PWM_Start_IT+0x5c>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 808a 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	f000 8086 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	f000 8082 	beq.w	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	d07e      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d10b      	bne.n	8006e86 <HAL_TIM_PWM_Start_IT+0x7e>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d076      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d073      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d070      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b0c      	cmp	r3, #12
 8006e84:	d06d      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a82      	ldr	r2, [pc, #520]	; (8007094 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_TIM_PWM_Start_IT+0xa0>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d065      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d062      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d05f      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b0c      	cmp	r3, #12
 8006ea6:	d05c      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a7a      	ldr	r2, [pc, #488]	; (8007098 <HAL_TIM_PWM_Start_IT+0x290>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d10b      	bne.n	8006eca <HAL_TIM_PWM_Start_IT+0xc2>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d054      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d051      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d04e      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b0c      	cmp	r3, #12
 8006ec8:	d04b      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a73      	ldr	r2, [pc, #460]	; (800709c <HAL_TIM_PWM_Start_IT+0x294>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10b      	bne.n	8006eec <HAL_TIM_PWM_Start_IT+0xe4>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d043      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d040      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d03d      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b0c      	cmp	r3, #12
 8006eea:	d03a      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a6b      	ldr	r2, [pc, #428]	; (80070a0 <HAL_TIM_PWM_Start_IT+0x298>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d105      	bne.n	8006f02 <HAL_TIM_PWM_Start_IT+0xfa>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d032      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d02f      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a67      	ldr	r2, [pc, #412]	; (80070a4 <HAL_TIM_PWM_Start_IT+0x29c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d102      	bne.n	8006f12 <HAL_TIM_PWM_Start_IT+0x10a>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d027      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a64      	ldr	r2, [pc, #400]	; (80070a8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d102      	bne.n	8006f22 <HAL_TIM_PWM_Start_IT+0x11a>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01f      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a61      	ldr	r2, [pc, #388]	; (80070ac <HAL_TIM_PWM_Start_IT+0x2a4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d105      	bne.n	8006f38 <HAL_TIM_PWM_Start_IT+0x130>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d014      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a5c      	ldr	r2, [pc, #368]	; (80070b0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d102      	bne.n	8006f48 <HAL_TIM_PWM_Start_IT+0x140>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00c      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a59      	ldr	r2, [pc, #356]	; (80070b4 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d102      	bne.n	8006f58 <HAL_TIM_PWM_Start_IT+0x150>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_TIM_PWM_Start_IT+0x15a>
 8006f58:	f240 51ec 	movw	r1, #1516	; 0x5ec
 8006f5c:	4856      	ldr	r0, [pc, #344]	; (80070b8 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8006f5e:	f7fb f8f0 	bl	8002142 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <HAL_TIM_PWM_Start_IT+0x174>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e022      	b.n	8006fc2 <HAL_TIM_PWM_Start_IT+0x1ba>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d109      	bne.n	8006f96 <HAL_TIM_PWM_Start_IT+0x18e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	e015      	b.n	8006fc2 <HAL_TIM_PWM_Start_IT+0x1ba>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d109      	bne.n	8006fb0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	bf14      	ite	ne
 8006fa8:	2301      	movne	r3, #1
 8006faa:	2300      	moveq	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	e008      	b.n	8006fc2 <HAL_TIM_PWM_Start_IT+0x1ba>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <HAL_TIM_PWM_Start_IT+0x1c2>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e0da      	b.n	8007180 <HAL_TIM_PWM_Start_IT+0x378>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <HAL_TIM_PWM_Start_IT+0x1d2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fd8:	e013      	b.n	8007002 <HAL_TIM_PWM_Start_IT+0x1fa>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_PWM_Start_IT+0x1e2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fe8:	e00b      	b.n	8007002 <HAL_TIM_PWM_Start_IT+0x1fa>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_PWM_Start_IT+0x1f2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff8:	e003      	b.n	8007002 <HAL_TIM_PWM_Start_IT+0x1fa>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b0c      	cmp	r3, #12
 8007006:	d859      	bhi.n	80070bc <HAL_TIM_PWM_Start_IT+0x2b4>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_TIM_PWM_Start_IT+0x208>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007045 	.word	0x08007045
 8007014:	080070bd 	.word	0x080070bd
 8007018:	080070bd 	.word	0x080070bd
 800701c:	080070bd 	.word	0x080070bd
 8007020:	08007057 	.word	0x08007057
 8007024:	080070bd 	.word	0x080070bd
 8007028:	080070bd 	.word	0x080070bd
 800702c:	080070bd 	.word	0x080070bd
 8007030:	08007069 	.word	0x08007069
 8007034:	080070bd 	.word	0x080070bd
 8007038:	080070bd 	.word	0x080070bd
 800703c:	080070bd 	.word	0x080070bd
 8007040:	0800707b 	.word	0x0800707b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0202 	orr.w	r2, r2, #2
 8007052:	60da      	str	r2, [r3, #12]
      break;
 8007054:	e033      	b.n	80070be <HAL_TIM_PWM_Start_IT+0x2b6>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0204 	orr.w	r2, r2, #4
 8007064:	60da      	str	r2, [r3, #12]
      break;
 8007066:	e02a      	b.n	80070be <HAL_TIM_PWM_Start_IT+0x2b6>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0208 	orr.w	r2, r2, #8
 8007076:	60da      	str	r2, [r3, #12]
      break;
 8007078:	e021      	b.n	80070be <HAL_TIM_PWM_Start_IT+0x2b6>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0210 	orr.w	r2, r2, #16
 8007088:	60da      	str	r2, [r3, #12]
      break;
 800708a:	e018      	b.n	80070be <HAL_TIM_PWM_Start_IT+0x2b6>
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40013400 	.word	0x40013400
 8007094:	40000400 	.word	0x40000400
 8007098:	40000800 	.word	0x40000800
 800709c:	40000c00 	.word	0x40000c00
 80070a0:	40014c00 	.word	0x40014c00
 80070a4:	40015000 	.word	0x40015000
 80070a8:	40015400 	.word	0x40015400
 80070ac:	40001800 	.word	0x40001800
 80070b0:	40001c00 	.word	0x40001c00
 80070b4:	40002000 	.word	0x40002000
 80070b8:	0800baf4 	.word	0x0800baf4
    }

    default:
      break;
 80070bc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 ffb0 	bl	800802c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2d      	ldr	r2, [pc, #180]	; (8007188 <HAL_TIM_PWM_Start_IT+0x380>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIM_PWM_Start_IT+0x2d8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2c      	ldr	r2, [pc, #176]	; (800718c <HAL_TIM_PWM_Start_IT+0x384>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_PWM_Start_IT+0x2dc>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <HAL_TIM_PWM_Start_IT+0x2de>
 80070e4:	2300      	movs	r3, #0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a22      	ldr	r2, [pc, #136]	; (8007188 <HAL_TIM_PWM_Start_IT+0x380>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a20      	ldr	r2, [pc, #128]	; (800718c <HAL_TIM_PWM_Start_IT+0x384>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01d      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007116:	d018      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1c      	ldr	r2, [pc, #112]	; (8007190 <HAL_TIM_PWM_Start_IT+0x388>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <HAL_TIM_PWM_Start_IT+0x38c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a19      	ldr	r2, [pc, #100]	; (8007198 <HAL_TIM_PWM_Start_IT+0x390>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <HAL_TIM_PWM_Start_IT+0x394>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_TIM_PWM_Start_IT+0x342>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <HAL_TIM_PWM_Start_IT+0x398>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d111      	bne.n	800716e <HAL_TIM_PWM_Start_IT+0x366>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b06      	cmp	r3, #6
 800715a:	d010      	beq.n	800717e <HAL_TIM_PWM_Start_IT+0x376>
    {
      __HAL_TIM_ENABLE(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	e007      	b.n	800717e <HAL_TIM_PWM_Start_IT+0x376>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40014c00 	.word	0x40014c00
 80071a0:	40001800 	.word	0x40001800

080071a4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4aa1      	ldr	r2, [pc, #644]	; (8007438 <HAL_TIM_PWM_Stop_IT+0x294>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d10f      	bne.n	80071d8 <HAL_TIM_PWM_Stop_IT+0x34>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 809f 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	f000 809b 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	f000 8097 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b0c      	cmp	r3, #12
 80071d4:	f000 8093 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a97      	ldr	r2, [pc, #604]	; (800743c <HAL_TIM_PWM_Stop_IT+0x298>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10e      	bne.n	8007200 <HAL_TIM_PWM_Stop_IT+0x5c>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 808a 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	f000 8086 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	f000 8082 	beq.w	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d07e      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007208:	d10b      	bne.n	8007222 <HAL_TIM_PWM_Stop_IT+0x7e>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d076      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b04      	cmp	r3, #4
 8007214:	d073      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d070      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b0c      	cmp	r3, #12
 8007220:	d06d      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a86      	ldr	r2, [pc, #536]	; (8007440 <HAL_TIM_PWM_Stop_IT+0x29c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10b      	bne.n	8007244 <HAL_TIM_PWM_Stop_IT+0xa0>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d065      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b04      	cmp	r3, #4
 8007236:	d062      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b08      	cmp	r3, #8
 800723c:	d05f      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d05c      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a7e      	ldr	r2, [pc, #504]	; (8007444 <HAL_TIM_PWM_Stop_IT+0x2a0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d10b      	bne.n	8007266 <HAL_TIM_PWM_Stop_IT+0xc2>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d054      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b04      	cmp	r3, #4
 8007258:	d051      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b08      	cmp	r3, #8
 800725e:	d04e      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b0c      	cmp	r3, #12
 8007264:	d04b      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a77      	ldr	r2, [pc, #476]	; (8007448 <HAL_TIM_PWM_Stop_IT+0x2a4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10b      	bne.n	8007288 <HAL_TIM_PWM_Stop_IT+0xe4>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d043      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b04      	cmp	r3, #4
 800727a:	d040      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b08      	cmp	r3, #8
 8007280:	d03d      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b0c      	cmp	r3, #12
 8007286:	d03a      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a6f      	ldr	r2, [pc, #444]	; (800744c <HAL_TIM_PWM_Stop_IT+0x2a8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d105      	bne.n	800729e <HAL_TIM_PWM_Stop_IT+0xfa>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d032      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b04      	cmp	r3, #4
 800729c:	d02f      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a6b      	ldr	r2, [pc, #428]	; (8007450 <HAL_TIM_PWM_Stop_IT+0x2ac>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d102      	bne.n	80072ae <HAL_TIM_PWM_Stop_IT+0x10a>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d027      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a68      	ldr	r2, [pc, #416]	; (8007454 <HAL_TIM_PWM_Stop_IT+0x2b0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d102      	bne.n	80072be <HAL_TIM_PWM_Stop_IT+0x11a>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01f      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a65      	ldr	r2, [pc, #404]	; (8007458 <HAL_TIM_PWM_Stop_IT+0x2b4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d105      	bne.n	80072d4 <HAL_TIM_PWM_Stop_IT+0x130>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d014      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a60      	ldr	r2, [pc, #384]	; (800745c <HAL_TIM_PWM_Stop_IT+0x2b8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d102      	bne.n	80072e4 <HAL_TIM_PWM_Stop_IT+0x140>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00c      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a5d      	ldr	r2, [pc, #372]	; (8007460 <HAL_TIM_PWM_Stop_IT+0x2bc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d102      	bne.n	80072f4 <HAL_TIM_PWM_Stop_IT+0x150>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <HAL_TIM_PWM_Stop_IT+0x15a>
 80072f4:	f240 6142 	movw	r1, #1602	; 0x642
 80072f8:	485a      	ldr	r0, [pc, #360]	; (8007464 <HAL_TIM_PWM_Stop_IT+0x2c0>)
 80072fa:	f7fa ff22 	bl	8002142 <assert_failed>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b0c      	cmp	r3, #12
 8007302:	d841      	bhi.n	8007388 <HAL_TIM_PWM_Stop_IT+0x1e4>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <HAL_TIM_PWM_Stop_IT+0x168>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007341 	.word	0x08007341
 8007310:	08007389 	.word	0x08007389
 8007314:	08007389 	.word	0x08007389
 8007318:	08007389 	.word	0x08007389
 800731c:	08007353 	.word	0x08007353
 8007320:	08007389 	.word	0x08007389
 8007324:	08007389 	.word	0x08007389
 8007328:	08007389 	.word	0x08007389
 800732c:	08007365 	.word	0x08007365
 8007330:	08007389 	.word	0x08007389
 8007334:	08007389 	.word	0x08007389
 8007338:	08007389 	.word	0x08007389
 800733c:	08007377 	.word	0x08007377
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0202 	bic.w	r2, r2, #2
 800734e:	60da      	str	r2, [r3, #12]
      break;
 8007350:	e01b      	b.n	800738a <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0204 	bic.w	r2, r2, #4
 8007360:	60da      	str	r2, [r3, #12]
      break;
 8007362:	e012      	b.n	800738a <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0208 	bic.w	r2, r2, #8
 8007372:	60da      	str	r2, [r3, #12]
      break;
 8007374:	e009      	b.n	800738a <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0210 	bic.w	r2, r2, #16
 8007384:	60da      	str	r2, [r3, #12]
      break;
 8007386:	e000      	b.n	800738a <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    default:
      break;
 8007388:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2200      	movs	r2, #0
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fe4a 	bl	800802c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a26      	ldr	r2, [pc, #152]	; (8007438 <HAL_TIM_PWM_Stop_IT+0x294>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_PWM_Stop_IT+0x208>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a25      	ldr	r2, [pc, #148]	; (800743c <HAL_TIM_PWM_Stop_IT+0x298>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_PWM_Stop_IT+0x20c>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <HAL_TIM_PWM_Stop_IT+0x20e>
 80073b0:	2300      	movs	r3, #0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d017      	beq.n	80073e6 <HAL_TIM_PWM_Stop_IT+0x242>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a1a      	ldr	r2, [r3, #32]
 80073bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10f      	bne.n	80073e6 <HAL_TIM_PWM_Stop_IT+0x242>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	f240 4344 	movw	r3, #1092	; 0x444
 80073d0:	4013      	ands	r3, r2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <HAL_TIM_PWM_Stop_IT+0x242>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a1a      	ldr	r2, [r3, #32]
 80073ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_TIM_PWM_Stop_IT+0x272>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6a1a      	ldr	r2, [r3, #32]
 80073fc:	f240 4344 	movw	r3, #1092	; 0x444
 8007400:	4013      	ands	r3, r2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <HAL_TIM_PWM_Stop_IT+0x272>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <HAL_TIM_PWM_Stop_IT+0x282>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007424:	e02c      	b.n	8007480 <HAL_TIM_PWM_Stop_IT+0x2dc>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d11d      	bne.n	8007468 <HAL_TIM_PWM_Stop_IT+0x2c4>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007434:	e024      	b.n	8007480 <HAL_TIM_PWM_Stop_IT+0x2dc>
 8007436:	bf00      	nop
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40013400 	.word	0x40013400
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40014c00 	.word	0x40014c00
 8007450:	40015000 	.word	0x40015000
 8007454:	40015400 	.word	0x40015400
 8007458:	40001800 	.word	0x40001800
 800745c:	40001c00 	.word	0x40001c00
 8007460:	40002000 	.word	0x40002000
 8007464:	0800baf4 	.word	0x0800baf4
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b08      	cmp	r3, #8
 800746c:	d104      	bne.n	8007478 <HAL_TIM_PWM_Stop_IT+0x2d4>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007476:	e003      	b.n	8007480 <HAL_TIM_PWM_Stop_IT+0x2dc>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop

0800748c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d122      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d11b      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0202 	mvn.w	r2, #2
 80074b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fac1 	bl	8007a56 <HAL_TIM_IC_CaptureCallback>
 80074d4:	e005      	b.n	80074e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb f962 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fb f91f 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d122      	bne.n	800753c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b04      	cmp	r3, #4
 8007502:	d11b      	bne.n	800753c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0204 	mvn.w	r2, #4
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa97 	bl	8007a56 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fb f938 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fb f8f5 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b08      	cmp	r3, #8
 8007548:	d122      	bne.n	8007590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d11b      	bne.n	8007590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0208 	mvn.w	r2, #8
 8007560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2204      	movs	r2, #4
 8007566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa6d 	bl	8007a56 <HAL_TIM_IC_CaptureCallback>
 800757c:	e005      	b.n	800758a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb f90e 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fb f8cb 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b10      	cmp	r3, #16
 800759c:	d122      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d11b      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0210 	mvn.w	r2, #16
 80075b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2208      	movs	r2, #8
 80075ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa43 	bl	8007a56 <HAL_TIM_IC_CaptureCallback>
 80075d0:	e005      	b.n	80075de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fb f8e4 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fb f8a1 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d107      	bne.n	8007610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0201 	mvn.w	r2, #1
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa1a 	bl	8007a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d10e      	bne.n	800763c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d107      	bne.n	800763c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fe69 	bl	800830e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d10e      	bne.n	8007668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d107      	bne.n	8007668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa00 	bl	8007a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d10e      	bne.n	8007694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b20      	cmp	r3, #32
 8007682:	d107      	bne.n	8007694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0220 	mvn.w	r2, #32
 800768c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fe34 	bl	80082fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d010      	beq.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d00d      	beq.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d00a      	beq.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b0c      	cmp	r3, #12
 80076be:	d007      	beq.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b3c      	cmp	r3, #60	; 0x3c
 80076c4:	d004      	beq.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80076c6:	f241 0112 	movw	r1, #4114	; 0x1012
 80076ca:	4883      	ldr	r0, [pc, #524]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80076cc:	f7fa fd39 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b60      	cmp	r3, #96	; 0x60
 80076d6:	d008      	beq.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x4e>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b70      	cmp	r3, #112	; 0x70
 80076de:	d004      	beq.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x4e>
 80076e0:	f241 0113 	movw	r1, #4115	; 0x1013
 80076e4:	487c      	ldr	r0, [pc, #496]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80076e6:	f7fa fd2c 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x68>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d004      	beq.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x68>
 80076fa:	f241 0114 	movw	r1, #4116	; 0x1014
 80076fe:	4876      	ldr	r0, [pc, #472]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007700:	f7fa fd1f 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_TIM_PWM_ConfigChannel+0x82>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b04      	cmp	r3, #4
 8007712:	d004      	beq.n	800771e <HAL_TIM_PWM_ConfigChannel+0x82>
 8007714:	f241 0115 	movw	r1, #4117	; 0x1015
 8007718:	486f      	ldr	r0, [pc, #444]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800771a:	f7fa fd12 	bl	8002142 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIM_PWM_ConfigChannel+0x90>
 8007728:	2302      	movs	r3, #2
 800772a:	e17a      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x386>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b0c      	cmp	r3, #12
 8007738:	f200 816d 	bhi.w	8007a16 <HAL_TIM_PWM_ConfigChannel+0x37a>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007779 	.word	0x08007779
 8007748:	08007a17 	.word	0x08007a17
 800774c:	08007a17 	.word	0x08007a17
 8007750:	08007a17 	.word	0x08007a17
 8007754:	0800783b 	.word	0x0800783b
 8007758:	08007a17 	.word	0x08007a17
 800775c:	08007a17 	.word	0x08007a17
 8007760:	08007a17 	.word	0x08007a17
 8007764:	08007909 	.word	0x08007909
 8007768:	08007a17 	.word	0x08007a17
 800776c:	08007a17 	.word	0x08007a17
 8007770:	08007a17 	.word	0x08007a17
 8007774:	0800798f 	.word	0x0800798f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a57      	ldr	r2, [pc, #348]	; (80078dc <HAL_TIM_PWM_ConfigChannel+0x240>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d03b      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a56      	ldr	r2, [pc, #344]	; (80078e0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d036      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007794:	d031      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a52      	ldr	r2, [pc, #328]	; (80078e4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d02c      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a50      	ldr	r2, [pc, #320]	; (80078e8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d027      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a4f      	ldr	r2, [pc, #316]	; (80078ec <HAL_TIM_PWM_ConfigChannel+0x250>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d022      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a4d      	ldr	r2, [pc, #308]	; (80078f0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01d      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a4c      	ldr	r2, [pc, #304]	; (80078f4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d018      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a4a      	ldr	r2, [pc, #296]	; (80078f8 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a49      	ldr	r2, [pc, #292]	; (80078fc <HAL_TIM_PWM_ConfigChannel+0x260>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00e      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a47      	ldr	r2, [pc, #284]	; (8007900 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d009      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a46      	ldr	r2, [pc, #280]	; (8007904 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d004      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x15e>
 80077f0:	f241 011f 	movw	r1, #4127	; 0x101f
 80077f4:	4838      	ldr	r0, [pc, #224]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80077f6:	f7fa fca4 	bl	8002142 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f9d9 	bl	8007bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0208 	orr.w	r2, r2, #8
 8007814:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699a      	ldr	r2, [r3, #24]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0204 	bic.w	r2, r2, #4
 8007824:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6999      	ldr	r1, [r3, #24]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	619a      	str	r2, [r3, #24]
      break;
 8007838:	e0ee      	b.n	8007a18 <HAL_TIM_PWM_ConfigChannel+0x37c>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a27      	ldr	r2, [pc, #156]	; (80078dc <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d027      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007856:	d01d      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a21      	ldr	r2, [pc, #132]	; (80078e4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1e      	ldr	r2, [pc, #120]	; (80078ec <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1d      	ldr	r2, [pc, #116]	; (80078f0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800788a:	f241 0130 	movw	r1, #4144	; 0x1030
 800788e:	4812      	ldr	r0, [pc, #72]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007890:	f7fa fc57 	bl	8002142 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa26 	bl	8007cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6999      	ldr	r1, [r3, #24]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	021a      	lsls	r2, r3, #8
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	619a      	str	r2, [r3, #24]
      break;
 80078d4:	e0a0      	b.n	8007a18 <HAL_TIM_PWM_ConfigChannel+0x37c>
 80078d6:	bf00      	nop
 80078d8:	0800baf4 	.word	0x0800baf4
 80078dc:	40012c00 	.word	0x40012c00
 80078e0:	40013400 	.word	0x40013400
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40014c00 	.word	0x40014c00
 80078f4:	40015000 	.word	0x40015000
 80078f8:	40015400 	.word	0x40015400
 80078fc:	40001800 	.word	0x40001800
 8007900:	40001c00 	.word	0x40001c00
 8007904:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a47      	ldr	r2, [pc, #284]	; (8007a2c <HAL_TIM_PWM_ConfigChannel+0x390>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d01d      	beq.n	800794e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a46      	ldr	r2, [pc, #280]	; (8007a30 <HAL_TIM_PWM_ConfigChannel+0x394>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d018      	beq.n	800794e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007924:	d013      	beq.n	800794e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a42      	ldr	r2, [pc, #264]	; (8007a34 <HAL_TIM_PWM_ConfigChannel+0x398>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a40      	ldr	r2, [pc, #256]	; (8007a38 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a3f      	ldr	r2, [pc, #252]	; (8007a3c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007944:	f241 0141 	movw	r1, #4161	; 0x1041
 8007948:	483d      	ldr	r0, [pc, #244]	; (8007a40 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800794a:	f7fa fbfa 	bl	8002142 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fa67 	bl	8007e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0208 	orr.w	r2, r2, #8
 8007968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69da      	ldr	r2, [r3, #28]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0204 	bic.w	r2, r2, #4
 8007978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69d9      	ldr	r1, [r3, #28]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	61da      	str	r2, [r3, #28]
      break;
 800798c:	e044      	b.n	8007a18 <HAL_TIM_PWM_ConfigChannel+0x37c>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a26      	ldr	r2, [pc, #152]	; (8007a2c <HAL_TIM_PWM_ConfigChannel+0x390>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d01d      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x338>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a24      	ldr	r2, [pc, #144]	; (8007a30 <HAL_TIM_PWM_ConfigChannel+0x394>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d018      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x338>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d013      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x338>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x338>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x338>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x338>
 80079ca:	f241 0152 	movw	r1, #4178	; 0x1052
 80079ce:	481c      	ldr	r0, [pc, #112]	; (8007a40 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80079d0:	f7fa fbb7 	bl	8002142 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fac2 	bl	8007f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69da      	ldr	r2, [r3, #28]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69d9      	ldr	r1, [r3, #28]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	021a      	lsls	r2, r3, #8
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	61da      	str	r2, [r3, #28]
      break;
 8007a14:	e000      	b.n	8007a18 <HAL_TIM_PWM_ConfigChannel+0x37c>
    }

    default:
      break;
 8007a16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40012c00 	.word	0x40012c00
 8007a30:	40013400 	.word	0x40013400
 8007a34:	40000400 	.word	0x40000400
 8007a38:	40000800 	.word	0x40000800
 8007a3c:	40000c00 	.word	0x40000c00
 8007a40:	0800baf4 	.word	0x0800baf4

08007a44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
	...

08007a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3f      	ldr	r2, [pc, #252]	; (8007b8c <TIM_Base_SetConfig+0x110>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d013      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3e      	ldr	r2, [pc, #248]	; (8007b90 <TIM_Base_SetConfig+0x114>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00f      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa2:	d00b      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a3b      	ldr	r2, [pc, #236]	; (8007b94 <TIM_Base_SetConfig+0x118>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d007      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a3a      	ldr	r2, [pc, #232]	; (8007b98 <TIM_Base_SetConfig+0x11c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a39      	ldr	r2, [pc, #228]	; (8007b9c <TIM_Base_SetConfig+0x120>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d108      	bne.n	8007ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2e      	ldr	r2, [pc, #184]	; (8007b8c <TIM_Base_SetConfig+0x110>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d02b      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a2d      	ldr	r2, [pc, #180]	; (8007b90 <TIM_Base_SetConfig+0x114>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d027      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae4:	d023      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2a      	ldr	r2, [pc, #168]	; (8007b94 <TIM_Base_SetConfig+0x118>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01f      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a29      	ldr	r2, [pc, #164]	; (8007b98 <TIM_Base_SetConfig+0x11c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01b      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <TIM_Base_SetConfig+0x120>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d017      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a27      	ldr	r2, [pc, #156]	; (8007ba0 <TIM_Base_SetConfig+0x124>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a26      	ldr	r2, [pc, #152]	; (8007ba4 <TIM_Base_SetConfig+0x128>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00f      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a25      	ldr	r2, [pc, #148]	; (8007ba8 <TIM_Base_SetConfig+0x12c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00b      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a24      	ldr	r2, [pc, #144]	; (8007bac <TIM_Base_SetConfig+0x130>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d007      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a23      	ldr	r2, [pc, #140]	; (8007bb0 <TIM_Base_SetConfig+0x134>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d003      	beq.n	8007b2e <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a22      	ldr	r2, [pc, #136]	; (8007bb4 <TIM_Base_SetConfig+0x138>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d108      	bne.n	8007b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a09      	ldr	r2, [pc, #36]	; (8007b8c <TIM_Base_SetConfig+0x110>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d003      	beq.n	8007b74 <TIM_Base_SetConfig+0xf8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a08      	ldr	r2, [pc, #32]	; (8007b90 <TIM_Base_SetConfig+0x114>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d103      	bne.n	8007b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	615a      	str	r2, [r3, #20]
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40014c00 	.word	0x40014c00
 8007ba4:	40015000 	.word	0x40015000
 8007ba8:	40015400 	.word	0x40015400
 8007bac:	40001800 	.word	0x40001800
 8007bb0:	40001c00 	.word	0x40001c00
 8007bb4:	40002000 	.word	0x40002000

08007bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f023 0201 	bic.w	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f023 0302 	bic.w	r3, r3, #2
 8007c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a34      	ldr	r2, [pc, #208]	; (8007ce0 <TIM_OC1_SetConfig+0x128>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_OC1_SetConfig+0x64>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a33      	ldr	r2, [pc, #204]	; (8007ce4 <TIM_OC1_SetConfig+0x12c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d119      	bne.n	8007c50 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d008      	beq.n	8007c36 <TIM_OC1_SetConfig+0x7e>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d004      	beq.n	8007c36 <TIM_OC1_SetConfig+0x7e>
 8007c2c:	f641 2103 	movw	r1, #6659	; 0x1a03
 8007c30:	482d      	ldr	r0, [pc, #180]	; (8007ce8 <TIM_OC1_SetConfig+0x130>)
 8007c32:	f7fa fa86 	bl	8002142 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f023 0308 	bic.w	r3, r3, #8
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f023 0304 	bic.w	r3, r3, #4
 8007c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a23      	ldr	r2, [pc, #140]	; (8007ce0 <TIM_OC1_SetConfig+0x128>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_OC1_SetConfig+0xa8>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a22      	ldr	r2, [pc, #136]	; (8007ce4 <TIM_OC1_SetConfig+0x12c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d12d      	bne.n	8007cbc <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c68:	d008      	beq.n	8007c7c <TIM_OC1_SetConfig+0xc4>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <TIM_OC1_SetConfig+0xc4>
 8007c72:	f641 2110 	movw	r1, #6672	; 0x1a10
 8007c76:	481c      	ldr	r0, [pc, #112]	; (8007ce8 <TIM_OC1_SetConfig+0x130>)
 8007c78:	f7fa fa63 	bl	8002142 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c84:	d008      	beq.n	8007c98 <TIM_OC1_SetConfig+0xe0>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d004      	beq.n	8007c98 <TIM_OC1_SetConfig+0xe0>
 8007c8e:	f641 2111 	movw	r1, #6673	; 0x1a11
 8007c92:	4815      	ldr	r0, [pc, #84]	; (8007ce8 <TIM_OC1_SetConfig+0x130>)
 8007c94:	f7fa fa55 	bl	8002142 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	0800baf4 	.word	0x0800baf4

08007cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	f023 0210 	bic.w	r2, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0320 	bic.w	r3, r3, #32
 8007d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a35      	ldr	r2, [pc, #212]	; (8007e1c <TIM_OC2_SetConfig+0x130>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_OC2_SetConfig+0x68>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a34      	ldr	r2, [pc, #208]	; (8007e20 <TIM_OC2_SetConfig+0x134>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d11a      	bne.n	8007d8a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <TIM_OC2_SetConfig+0x82>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d004      	beq.n	8007d6e <TIM_OC2_SetConfig+0x82>
 8007d64:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8007d68:	482e      	ldr	r0, [pc, #184]	; (8007e24 <TIM_OC2_SetConfig+0x138>)
 8007d6a:	f7fa f9ea 	bl	8002142 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	011b      	lsls	r3, r3, #4
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d88:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a23      	ldr	r2, [pc, #140]	; (8007e1c <TIM_OC2_SetConfig+0x130>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <TIM_OC2_SetConfig+0xae>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a22      	ldr	r2, [pc, #136]	; (8007e20 <TIM_OC2_SetConfig+0x134>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d12f      	bne.n	8007dfa <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da2:	d008      	beq.n	8007db6 <TIM_OC2_SetConfig+0xca>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <TIM_OC2_SetConfig+0xca>
 8007dac:	f641 215c 	movw	r1, #6748	; 0x1a5c
 8007db0:	481c      	ldr	r0, [pc, #112]	; (8007e24 <TIM_OC2_SetConfig+0x138>)
 8007db2:	f7fa f9c6 	bl	8002142 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d008      	beq.n	8007dd2 <TIM_OC2_SetConfig+0xe6>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <TIM_OC2_SetConfig+0xe6>
 8007dc8:	f641 215d 	movw	r1, #6749	; 0x1a5d
 8007dcc:	4815      	ldr	r0, [pc, #84]	; (8007e24 <TIM_OC2_SetConfig+0x138>)
 8007dce:	f7fa f9b8 	bl	8002142 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	621a      	str	r2, [r3, #32]
}
 8007e14:	bf00      	nop
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40012c00 	.word	0x40012c00
 8007e20:	40013400 	.word	0x40013400
 8007e24:	0800baf4 	.word	0x0800baf4

08007e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0303 	bic.w	r3, r3, #3
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a35      	ldr	r2, [pc, #212]	; (8007f58 <TIM_OC3_SetConfig+0x130>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d003      	beq.n	8007e8e <TIM_OC3_SetConfig+0x66>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a34      	ldr	r2, [pc, #208]	; (8007f5c <TIM_OC3_SetConfig+0x134>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d11a      	bne.n	8007ec4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <TIM_OC3_SetConfig+0x80>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d004      	beq.n	8007ea8 <TIM_OC3_SetConfig+0x80>
 8007e9e:	f641 2199 	movw	r1, #6809	; 0x1a99
 8007ea2:	482f      	ldr	r0, [pc, #188]	; (8007f60 <TIM_OC3_SetConfig+0x138>)
 8007ea4:	f7fa f94d 	bl	8002142 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <TIM_OC3_SetConfig+0x130>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_OC3_SetConfig+0xac>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a23      	ldr	r2, [pc, #140]	; (8007f5c <TIM_OC3_SetConfig+0x134>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d12f      	bne.n	8007f34 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007edc:	d008      	beq.n	8007ef0 <TIM_OC3_SetConfig+0xc8>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <TIM_OC3_SetConfig+0xc8>
 8007ee6:	f641 21a6 	movw	r1, #6822	; 0x1aa6
 8007eea:	481d      	ldr	r0, [pc, #116]	; (8007f60 <TIM_OC3_SetConfig+0x138>)
 8007eec:	f7fa f929 	bl	8002142 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef8:	d008      	beq.n	8007f0c <TIM_OC3_SetConfig+0xe4>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <TIM_OC3_SetConfig+0xe4>
 8007f02:	f641 21a7 	movw	r1, #6823	; 0x1aa7
 8007f06:	4816      	ldr	r0, [pc, #88]	; (8007f60 <TIM_OC3_SetConfig+0x138>)
 8007f08:	f7fa f91b 	bl	8002142 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40012c00 	.word	0x40012c00
 8007f5c:	40013400 	.word	0x40013400
 8007f60:	0800baf4 	.word	0x0800baf4

08007f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	031b      	lsls	r3, r3, #12
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a18      	ldr	r2, [pc, #96]	; (8008020 <TIM_OC4_SetConfig+0xbc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_OC4_SetConfig+0x68>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a17      	ldr	r2, [pc, #92]	; (8008024 <TIM_OC4_SetConfig+0xc0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d117      	bne.n	8007ffc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd4:	d008      	beq.n	8007fe8 <TIM_OC4_SetConfig+0x84>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <TIM_OC4_SetConfig+0x84>
 8007fde:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007fe2:	4811      	ldr	r0, [pc, #68]	; (8008028 <TIM_OC4_SetConfig+0xc4>)
 8007fe4:	f7fa f8ad 	bl	8002142 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	019b      	lsls	r3, r3, #6
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40013400 	.word	0x40013400
 8008028:	0800baf4 	.word	0x0800baf4

0800802c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4a32      	ldr	r2, [pc, #200]	; (8008104 <TIM_CCxChannelCmd+0xd8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d030      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a31      	ldr	r2, [pc, #196]	; (8008108 <TIM_CCxChannelCmd+0xdc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d02c      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804e:	d028      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a2e      	ldr	r2, [pc, #184]	; (800810c <TIM_CCxChannelCmd+0xe0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d024      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a2d      	ldr	r2, [pc, #180]	; (8008110 <TIM_CCxChannelCmd+0xe4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d020      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <TIM_CCxChannelCmd+0xe8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d01c      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a2b      	ldr	r2, [pc, #172]	; (8008118 <TIM_CCxChannelCmd+0xec>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d018      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <TIM_CCxChannelCmd+0xf0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d014      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a29      	ldr	r2, [pc, #164]	; (8008120 <TIM_CCxChannelCmd+0xf4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d010      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a28      	ldr	r2, [pc, #160]	; (8008124 <TIM_CCxChannelCmd+0xf8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00c      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a27      	ldr	r2, [pc, #156]	; (8008128 <TIM_CCxChannelCmd+0xfc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d008      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a26      	ldr	r2, [pc, #152]	; (800812c <TIM_CCxChannelCmd+0x100>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <TIM_CCxChannelCmd+0x76>
 8008098:	f641 41cb 	movw	r1, #7371	; 0x1ccb
 800809c:	4824      	ldr	r0, [pc, #144]	; (8008130 <TIM_CCxChannelCmd+0x104>)
 800809e:	f7fa f850 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d010      	beq.n	80080ca <TIM_CCxChannelCmd+0x9e>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d00d      	beq.n	80080ca <TIM_CCxChannelCmd+0x9e>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d00a      	beq.n	80080ca <TIM_CCxChannelCmd+0x9e>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d007      	beq.n	80080ca <TIM_CCxChannelCmd+0x9e>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b3c      	cmp	r3, #60	; 0x3c
 80080be:	d004      	beq.n	80080ca <TIM_CCxChannelCmd+0x9e>
 80080c0:	f641 41cc 	movw	r1, #7372	; 0x1ccc
 80080c4:	481a      	ldr	r0, [pc, #104]	; (8008130 <TIM_CCxChannelCmd+0x104>)
 80080c6:	f7fa f83c 	bl	8002142 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f003 031f 	and.w	r3, r3, #31
 80080d0:	2201      	movs	r2, #1
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	43db      	mvns	r3, r3
 80080e0:	401a      	ands	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1a      	ldr	r2, [r3, #32]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	fa01 f303 	lsl.w	r3, r1, r3
 80080f6:	431a      	orrs	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	621a      	str	r2, [r3, #32]
}
 80080fc:	bf00      	nop
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800
 8008114:	40000c00 	.word	0x40000c00
 8008118:	40014c00 	.word	0x40014c00
 800811c:	40015000 	.word	0x40015000
 8008120:	40015400 	.word	0x40015400
 8008124:	40001800 	.word	0x40001800
 8008128:	40001c00 	.word	0x40001c00
 800812c:	40002000 	.word	0x40002000
 8008130:	0800baf4 	.word	0x0800baf4

08008134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a64      	ldr	r2, [pc, #400]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d02c      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a62      	ldr	r2, [pc, #392]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d027      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815a:	d022      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a5e      	ldr	r2, [pc, #376]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d01d      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a5d      	ldr	r2, [pc, #372]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d018      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a5b      	ldr	r2, [pc, #364]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a5a      	ldr	r2, [pc, #360]	; (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00e      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a58      	ldr	r2, [pc, #352]	; (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d009      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a57      	ldr	r2, [pc, #348]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d004      	beq.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008198:	f240 715f 	movw	r1, #1887	; 0x75f
 800819c:	4855      	ldr	r0, [pc, #340]	; (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800819e:	f7f9 ffd0 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d020      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b10      	cmp	r3, #16
 80081b0:	d01c      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d018      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b30      	cmp	r3, #48	; 0x30
 80081c0:	d014      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	d010      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b50      	cmp	r3, #80	; 0x50
 80081d0:	d00c      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b60      	cmp	r3, #96	; 0x60
 80081d8:	d008      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b70      	cmp	r3, #112	; 0x70
 80081e0:	d004      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081e2:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 80081e6:	4843      	ldr	r0, [pc, #268]	; (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 80081e8:	f7f9 ffab 	bl	8002142 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b80      	cmp	r3, #128	; 0x80
 80081f2:	d008      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80081fc:	f240 7161 	movw	r1, #1889	; 0x761
 8008200:	483c      	ldr	r0, [pc, #240]	; (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 8008202:	f7f9 ff9e 	bl	8002142 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008210:	2302      	movs	r3, #2
 8008212:	e05a      	b.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x196>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d022      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01d      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d018      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1a      	ldr	r2, [pc, #104]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a19      	ldr	r2, [pc, #100]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00e      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a17      	ldr	r2, [pc, #92]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d009      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d004      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d10c      	bne.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x184>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40012c00 	.word	0x40012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	40000400 	.word	0x40000400
 80082e0:	40000800 	.word	0x40000800
 80082e4:	40000c00 	.word	0x40000c00
 80082e8:	40001000 	.word	0x40001000
 80082ec:	40001400 	.word	0x40001400
 80082f0:	40001800 	.word	0x40001800
 80082f4:	0800bb2c 	.word	0x0800bb2c
 80082f8:	40014c00 	.word	0x40014c00

080082fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e09c      	b.n	800846c <HAL_UART_Init+0x14c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d02c      	beq.n	8008394 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a4d      	ldr	r2, [pc, #308]	; (8008474 <HAL_UART_Init+0x154>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00e      	beq.n	8008362 <HAL_UART_Init+0x42>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a4b      	ldr	r2, [pc, #300]	; (8008478 <HAL_UART_Init+0x158>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d009      	beq.n	8008362 <HAL_UART_Init+0x42>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a4a      	ldr	r2, [pc, #296]	; (800847c <HAL_UART_Init+0x15c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d004      	beq.n	8008362 <HAL_UART_Init+0x42>
 8008358:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800835c:	4848      	ldr	r0, [pc, #288]	; (8008480 <HAL_UART_Init+0x160>)
 800835e:	f7f9 fef0 	bl	8002142 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d032      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008372:	d02d      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d028      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008386:	d023      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 8008388:	f240 1147 	movw	r1, #327	; 0x147
 800838c:	483c      	ldr	r0, [pc, #240]	; (8008480 <HAL_UART_Init+0x160>)
 800838e:	f7f9 fed8 	bl	8002142 <assert_failed>
 8008392:	e01d      	b.n	80083d0 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a36      	ldr	r2, [pc, #216]	; (8008474 <HAL_UART_Init+0x154>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a35      	ldr	r2, [pc, #212]	; (8008478 <HAL_UART_Init+0x158>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a33      	ldr	r2, [pc, #204]	; (800847c <HAL_UART_Init+0x15c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a33      	ldr	r2, [pc, #204]	; (8008484 <HAL_UART_Init+0x164>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a31      	ldr	r2, [pc, #196]	; (8008488 <HAL_UART_Init+0x168>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <HAL_UART_Init+0xb0>
 80083c6:	f240 114b 	movw	r1, #331	; 0x14b
 80083ca:	482d      	ldr	r0, [pc, #180]	; (8008480 <HAL_UART_Init+0x160>)
 80083cc:	f7f9 feb9 	bl	8002142 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <HAL_UART_Init+0xcc>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e0:	d004      	beq.n	80083ec <HAL_UART_Init+0xcc>
 80083e2:	f240 114d 	movw	r1, #333	; 0x14d
 80083e6:	4826      	ldr	r0, [pc, #152]	; (8008480 <HAL_UART_Init+0x160>)
 80083e8:	f7f9 feab 	bl	8002142 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fa faab 	bl	800295c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2224      	movs	r2, #36	; 0x24
 800840a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800841c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fc2e 	bl	8008c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008432:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008442:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008452:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40013800 	.word	0x40013800
 8008478:	40004400 	.word	0x40004400
 800847c:	40004800 	.word	0x40004800
 8008480:	0800bb68 	.word	0x0800bb68
 8008484:	40004c00 	.word	0x40004c00
 8008488:	40005000 	.word	0x40005000

0800848c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d17c      	bne.n	80085a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <HAL_UART_Transmit+0x2c>
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e075      	b.n	80085a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Transmit+0x3e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e06e      	b.n	80085a8 <HAL_UART_Transmit+0x11c>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2221      	movs	r2, #33	; 0x21
 80084dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80084e0:	f7fa fc88 	bl	8002df4 <HAL_GetTick>
 80084e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	88fa      	ldrh	r2, [r7, #6]
 80084ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fa:	d108      	bne.n	800850e <HAL_UART_Transmit+0x82>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	e003      	b.n	8008516 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800851e:	e02a      	b.n	8008576 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fa46 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e036      	b.n	80085a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10b      	bne.n	8008558 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	3302      	adds	r3, #2
 8008554:	61bb      	str	r3, [r7, #24]
 8008556:	e007      	b.n	8008568 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	3301      	adds	r3, #1
 8008566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1cf      	bne.n	8008520 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2200      	movs	r2, #0
 8008588:	2140      	movs	r1, #64	; 0x40
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 fa16 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e006      	b.n	80085a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e000      	b.n	80085a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
  }
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08a      	sub	sp, #40	; 0x28
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	f040 8089 	bne.w	80086e4 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_UART_Receive+0x2e>
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e081      	b.n	80086e6 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_UART_Receive+0x40>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e07a      	b.n	80086e6 <HAL_UART_Receive+0x136>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2222      	movs	r2, #34	; 0x22
 8008602:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008606:	f7fa fbf5 	bl	8002df4 <HAL_GetTick>
 800860a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	88fa      	ldrh	r2, [r7, #6]
 8008610:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	88fa      	ldrh	r2, [r7, #6]
 8008616:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008620:	d108      	bne.n	8008634 <HAL_UART_Receive+0x84>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d104      	bne.n	8008634 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	e003      	b.n	800863c <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008644:	e043      	b.n	80086ce <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2200      	movs	r2, #0
 800864e:	2120      	movs	r1, #32
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f9b3 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e042      	b.n	80086e6 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10c      	bne.n	8008680 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008672:	b29a      	uxth	r2, r3
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	3302      	adds	r3, #2
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	e01f      	b.n	80086c0 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008688:	d007      	beq.n	800869a <HAL_UART_Receive+0xea>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <HAL_UART_Receive+0xf8>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e008      	b.n	80086ba <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	3301      	adds	r3, #1
 80086be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1b6      	bne.n	8008646 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e000      	b.n	80086e6 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80086e4:	2302      	movs	r3, #2
  }
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	4613      	mov	r3, r2
 80086fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b20      	cmp	r3, #32
 8008706:	d140      	bne.n	800878a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <HAL_UART_Receive_IT+0x26>
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e039      	b.n	800878c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UART_Receive_IT+0x38>
 8008722:	2302      	movs	r3, #2
 8008724:	e032      	b.n	800878c <HAL_UART_Receive_IT+0x9e>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	88fa      	ldrh	r2, [r7, #6]
 800873e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2222      	movs	r2, #34	; 0x22
 800874a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008764:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695a      	ldr	r2, [r3, #20]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0220 	orr.w	r2, r2, #32
 8008784:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	e000      	b.n	800878c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800878a:	2302      	movs	r3, #2
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr
	...

08008798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10d      	bne.n	80087ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <HAL_UART_IRQHandler+0x52>
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f9cc 	bl	8008b80 <UART_Receive_IT>
      return;
 80087e8:	e0d0      	b.n	800898c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80b0 	beq.w	8008952 <HAL_UART_IRQHandler+0x1ba>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <HAL_UART_IRQHandler+0x70>
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 80a5 	beq.w	8008952 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_UART_IRQHandler+0x90>
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008820:	f043 0201 	orr.w	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <HAL_UART_IRQHandler+0xb0>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008840:	f043 0202 	orr.w	r2, r3, #2
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <HAL_UART_IRQHandler+0xd0>
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008860:	f043 0204 	orr.w	r2, r3, #4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00f      	beq.n	8008892 <HAL_UART_IRQHandler+0xfa>
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <HAL_UART_IRQHandler+0xee>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888a:	f043 0208 	orr.w	r2, r3, #8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d077      	beq.n	800898a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <HAL_UART_IRQHandler+0x11c>
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f966 	bl	8008b80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bf14      	ite	ne
 80088c2:	2301      	movne	r3, #1
 80088c4:	2300      	moveq	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ce:	f003 0308 	and.w	r3, r3, #8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <HAL_UART_IRQHandler+0x144>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d031      	beq.n	8008940 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f8b7 	bl	8008a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d023      	beq.n	8008938 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008904:	2b00      	cmp	r3, #0
 8008906:	d013      	beq.n	8008930 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890c:	4a21      	ldr	r2, [pc, #132]	; (8008994 <HAL_UART_IRQHandler+0x1fc>)
 800890e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	4618      	mov	r0, r3
 8008916:	f7fb f969 	bl	8003bec <HAL_DMA_Abort_IT>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d016      	beq.n	800894e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800892a:	4610      	mov	r0, r2
 800892c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892e:	e00e      	b.n	800894e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f83a 	bl	80089aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008936:	e00a      	b.n	800894e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f836 	bl	80089aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800893e:	e006      	b.n	800894e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f832 	bl	80089aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800894c:	e01d      	b.n	800898a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894e:	bf00      	nop
    return;
 8008950:	e01b      	b.n	800898a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008958:	2b00      	cmp	r3, #0
 800895a:	d008      	beq.n	800896e <HAL_UART_IRQHandler+0x1d6>
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8a3 	bl	8008ab2 <UART_Transmit_IT>
    return;
 800896c:	e00e      	b.n	800898c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <HAL_UART_IRQHandler+0x1f4>
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8e4 	bl	8008b50 <UART_EndTransmit_IT>
    return;
 8008988:	e000      	b.n	800898c <HAL_UART_IRQHandler+0x1f4>
    return;
 800898a:	bf00      	nop
  }
}
 800898c:	3720      	adds	r7, #32
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	08008a8b 	.word	0x08008a8b

08008998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr

080089bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089cc:	e02c      	b.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d028      	beq.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d007      	beq.n	80089ec <UART_WaitOnFlagUntilTimeout+0x30>
 80089dc:	f7fa fa0a 	bl	8002df4 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d21d      	bcs.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e00f      	b.n	8008a48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4013      	ands	r3, r2
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d0c3      	beq.n	80089ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0201 	bic.w	r2, r2, #1
 8008a76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr

08008a8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff ff80 	bl	80089aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b21      	cmp	r3, #33	; 0x21
 8008ac4:	d13e      	bne.n	8008b44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ace:	d114      	bne.n	8008afa <UART_Transmit_IT+0x48>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d110      	bne.n	8008afa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	1c9a      	adds	r2, r3, #2
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	621a      	str	r2, [r3, #32]
 8008af8:	e008      	b.n	8008b0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	1c59      	adds	r1, r3, #1
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6211      	str	r1, [r2, #32]
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10f      	bne.n	8008b40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e000      	b.n	8008b46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
  }
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff ff11 	bl	8008998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b22      	cmp	r3, #34	; 0x22
 8008b92:	d170      	bne.n	8008c76 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9c:	d117      	bne.n	8008bce <UART_Receive_IT+0x4e>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d113      	bne.n	8008bce <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	1c9a      	adds	r2, r3, #2
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	629a      	str	r2, [r3, #40]	; 0x28
 8008bcc:	e026      	b.n	8008c1c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be0:	d007      	beq.n	8008bf2 <UART_Receive_IT+0x72>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <UART_Receive_IT+0x80>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e008      	b.n	8008c12 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d120      	bne.n	8008c72 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0220 	bic.w	r2, r2, #32
 8008c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	695a      	ldr	r2, [r3, #20]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0201 	bic.w	r2, r2, #1
 8008c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f9 ff03 	bl	8002a74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e002      	b.n	8008c78 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e000      	b.n	8008c78 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008c76:	2302      	movs	r3, #2
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4a5f      	ldr	r2, [pc, #380]	; (8008e0c <UART_SetConfig+0x18c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d904      	bls.n	8008c9c <UART_SetConfig+0x1c>
 8008c92:	f640 31f6 	movw	r1, #3062	; 0xbf6
 8008c96:	485e      	ldr	r0, [pc, #376]	; (8008e10 <UART_SetConfig+0x190>)
 8008c98:	f7f9 fa53 	bl	8002142 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d009      	beq.n	8008cb8 <UART_SetConfig+0x38>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cac:	d004      	beq.n	8008cb8 <UART_SetConfig+0x38>
 8008cae:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8008cb2:	4857      	ldr	r0, [pc, #348]	; (8008e10 <UART_SetConfig+0x190>)
 8008cb4:	f7f9 fa45 	bl	8002142 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00e      	beq.n	8008cde <UART_SetConfig+0x5e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc8:	d009      	beq.n	8008cde <UART_SetConfig+0x5e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008cd2:	d004      	beq.n	8008cde <UART_SetConfig+0x5e>
 8008cd4:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8008cd8:	484d      	ldr	r0, [pc, #308]	; (8008e10 <UART_SetConfig+0x190>)
 8008cda:	f7f9 fa32 	bl	8002142 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d103      	bne.n	8008cf4 <UART_SetConfig+0x74>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <UART_SetConfig+0x7e>
 8008cf4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8008cf8:	4845      	ldr	r0, [pc, #276]	; (8008e10 <UART_SetConfig+0x190>)
 8008cfa:	f7f9 fa22 	bl	8002142 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008d30:	f023 030c 	bic.w	r3, r3, #12
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699a      	ldr	r2, [r3, #24]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a2e      	ldr	r2, [pc, #184]	; (8008e14 <UART_SetConfig+0x194>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d103      	bne.n	8008d66 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008d5e:	f7fd fba5 	bl	80064ac <HAL_RCC_GetPCLK2Freq>
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	e002      	b.n	8008d6c <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008d66:	f7fd fb8d 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 8008d6a:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009a      	lsls	r2, r3, #2
 8008d76:	441a      	add	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d82:	4a25      	ldr	r2, [pc, #148]	; (8008e18 <UART_SetConfig+0x198>)
 8008d84:	fba2 2303 	umull	r2, r3, r2, r3
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	0119      	lsls	r1, r3, #4
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009a      	lsls	r2, r3, #2
 8008d96:	441a      	add	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008da2:	4b1d      	ldr	r3, [pc, #116]	; (8008e18 <UART_SetConfig+0x198>)
 8008da4:	fba3 0302 	umull	r0, r3, r3, r2
 8008da8:	095b      	lsrs	r3, r3, #5
 8008daa:	2064      	movs	r0, #100	; 0x64
 8008dac:	fb00 f303 	mul.w	r3, r0, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	3332      	adds	r3, #50	; 0x32
 8008db6:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <UART_SetConfig+0x198>)
 8008db8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dc2:	4419      	add	r1, r3
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	009a      	lsls	r2, r3, #2
 8008dce:	441a      	add	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <UART_SetConfig+0x198>)
 8008ddc:	fba3 0302 	umull	r0, r3, r3, r2
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	2064      	movs	r0, #100	; 0x64
 8008de4:	fb00 f303 	mul.w	r3, r0, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	3332      	adds	r3, #50	; 0x32
 8008dee:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <UART_SetConfig+0x198>)
 8008df0:	fba2 2303 	umull	r2, r3, r2, r3
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	f003 020f 	and.w	r2, r3, #15
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	440a      	add	r2, r1
 8008e00:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	0044aa20 	.word	0x0044aa20
 8008e10:	0800bb68 	.word	0x0800bb68
 8008e14:	40013800 	.word	0x40013800
 8008e18:	51eb851f 	.word	0x51eb851f

08008e1c <__errno>:
 8008e1c:	4b01      	ldr	r3, [pc, #4]	; (8008e24 <__errno+0x8>)
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000014 	.word	0x20000014

08008e28 <__libc_init_array>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	4d0c      	ldr	r5, [pc, #48]	; (8008e60 <__libc_init_array+0x38>)
 8008e2e:	4c0d      	ldr	r4, [pc, #52]	; (8008e64 <__libc_init_array+0x3c>)
 8008e30:	1b64      	subs	r4, r4, r5
 8008e32:	10a4      	asrs	r4, r4, #2
 8008e34:	42a6      	cmp	r6, r4
 8008e36:	d109      	bne.n	8008e4c <__libc_init_array+0x24>
 8008e38:	f002 fb52 	bl	800b4e0 <_init>
 8008e3c:	2600      	movs	r6, #0
 8008e3e:	4d0a      	ldr	r5, [pc, #40]	; (8008e68 <__libc_init_array+0x40>)
 8008e40:	4c0a      	ldr	r4, [pc, #40]	; (8008e6c <__libc_init_array+0x44>)
 8008e42:	1b64      	subs	r4, r4, r5
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	42a6      	cmp	r6, r4
 8008e48:	d105      	bne.n	8008e56 <__libc_init_array+0x2e>
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e50:	4798      	blx	r3
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7ee      	b.n	8008e34 <__libc_init_array+0xc>
 8008e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5a:	4798      	blx	r3
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	e7f2      	b.n	8008e46 <__libc_init_array+0x1e>
 8008e60:	0800c160 	.word	0x0800c160
 8008e64:	0800c160 	.word	0x0800c160
 8008e68:	0800c160 	.word	0x0800c160
 8008e6c:	0800c164 	.word	0x0800c164

08008e70 <memset>:
 8008e70:	4603      	mov	r3, r0
 8008e72:	4402      	add	r2, r0
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d100      	bne.n	8008e7a <memset+0xa>
 8008e78:	4770      	bx	lr
 8008e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7e:	e7f9      	b.n	8008e74 <memset+0x4>

08008e80 <iprintf>:
 8008e80:	b40f      	push	{r0, r1, r2, r3}
 8008e82:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <iprintf+0x2c>)
 8008e84:	b513      	push	{r0, r1, r4, lr}
 8008e86:	681c      	ldr	r4, [r3, #0]
 8008e88:	b124      	cbz	r4, 8008e94 <iprintf+0x14>
 8008e8a:	69a3      	ldr	r3, [r4, #24]
 8008e8c:	b913      	cbnz	r3, 8008e94 <iprintf+0x14>
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 faf0 	bl	8009474 <__sinit>
 8008e94:	ab05      	add	r3, sp, #20
 8008e96:	4620      	mov	r0, r4
 8008e98:	9a04      	ldr	r2, [sp, #16]
 8008e9a:	68a1      	ldr	r1, [r4, #8]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	f000 fea1 	bl	8009be4 <_vfiprintf_r>
 8008ea2:	b002      	add	sp, #8
 8008ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea8:	b004      	add	sp, #16
 8008eaa:	4770      	bx	lr
 8008eac:	20000014 	.word	0x20000014

08008eb0 <_puts_r>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	460e      	mov	r6, r1
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_puts_r+0x10>
 8008eb8:	6983      	ldr	r3, [r0, #24]
 8008eba:	b90b      	cbnz	r3, 8008ec0 <_puts_r+0x10>
 8008ebc:	f000 fada 	bl	8009474 <__sinit>
 8008ec0:	69ab      	ldr	r3, [r5, #24]
 8008ec2:	68ac      	ldr	r4, [r5, #8]
 8008ec4:	b913      	cbnz	r3, 8008ecc <_puts_r+0x1c>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 fad4 	bl	8009474 <__sinit>
 8008ecc:	4b2c      	ldr	r3, [pc, #176]	; (8008f80 <_puts_r+0xd0>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d120      	bne.n	8008f14 <_puts_r+0x64>
 8008ed2:	686c      	ldr	r4, [r5, #4]
 8008ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_puts_r+0x36>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	0598      	lsls	r0, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_puts_r+0x36>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee2:	f000 fb65 	bl	80095b0 <__retarget_lock_acquire_recursive>
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	0719      	lsls	r1, r3, #28
 8008eea:	d51d      	bpl.n	8008f28 <_puts_r+0x78>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	b1db      	cbz	r3, 8008f28 <_puts_r+0x78>
 8008ef0:	3e01      	subs	r6, #1
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	bb39      	cbnz	r1, 8008f4e <_puts_r+0x9e>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da38      	bge.n	8008f74 <_puts_r+0xc4>
 8008f02:	4622      	mov	r2, r4
 8008f04:	210a      	movs	r1, #10
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 f8b8 	bl	800907c <__swbuf_r>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d011      	beq.n	8008f34 <_puts_r+0x84>
 8008f10:	250a      	movs	r5, #10
 8008f12:	e011      	b.n	8008f38 <_puts_r+0x88>
 8008f14:	4b1b      	ldr	r3, [pc, #108]	; (8008f84 <_puts_r+0xd4>)
 8008f16:	429c      	cmp	r4, r3
 8008f18:	d101      	bne.n	8008f1e <_puts_r+0x6e>
 8008f1a:	68ac      	ldr	r4, [r5, #8]
 8008f1c:	e7da      	b.n	8008ed4 <_puts_r+0x24>
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <_puts_r+0xd8>)
 8008f20:	429c      	cmp	r4, r3
 8008f22:	bf08      	it	eq
 8008f24:	68ec      	ldreq	r4, [r5, #12]
 8008f26:	e7d5      	b.n	8008ed4 <_puts_r+0x24>
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 f90a 	bl	8009144 <__swsetup_r>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d0dd      	beq.n	8008ef0 <_puts_r+0x40>
 8008f34:	f04f 35ff 	mov.w	r5, #4294967295
 8008f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f3a:	07da      	lsls	r2, r3, #31
 8008f3c:	d405      	bmi.n	8008f4a <_puts_r+0x9a>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	059b      	lsls	r3, r3, #22
 8008f42:	d402      	bmi.n	8008f4a <_puts_r+0x9a>
 8008f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f46:	f000 fb34 	bl	80095b2 <__retarget_lock_release_recursive>
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da04      	bge.n	8008f5c <_puts_r+0xac>
 8008f52:	69a2      	ldr	r2, [r4, #24]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	dc06      	bgt.n	8008f66 <_puts_r+0xb6>
 8008f58:	290a      	cmp	r1, #10
 8008f5a:	d004      	beq.n	8008f66 <_puts_r+0xb6>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	7019      	strb	r1, [r3, #0]
 8008f64:	e7c5      	b.n	8008ef2 <_puts_r+0x42>
 8008f66:	4622      	mov	r2, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f000 f887 	bl	800907c <__swbuf_r>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d1bf      	bne.n	8008ef2 <_puts_r+0x42>
 8008f72:	e7df      	b.n	8008f34 <_puts_r+0x84>
 8008f74:	250a      	movs	r5, #10
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	6022      	str	r2, [r4, #0]
 8008f7c:	701d      	strb	r5, [r3, #0]
 8008f7e:	e7db      	b.n	8008f38 <_puts_r+0x88>
 8008f80:	0800bbec 	.word	0x0800bbec
 8008f84:	0800bc0c 	.word	0x0800bc0c
 8008f88:	0800bbcc 	.word	0x0800bbcc

08008f8c <puts>:
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <puts+0xc>)
 8008f8e:	4601      	mov	r1, r0
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f7ff bf8d 	b.w	8008eb0 <_puts_r>
 8008f96:	bf00      	nop
 8008f98:	20000014 	.word	0x20000014

08008f9c <siscanf>:
 8008f9c:	b40e      	push	{r1, r2, r3}
 8008f9e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008fa2:	b530      	push	{r4, r5, lr}
 8008fa4:	b09c      	sub	sp, #112	; 0x70
 8008fa6:	ac1f      	add	r4, sp, #124	; 0x7c
 8008fa8:	f854 5b04 	ldr.w	r5, [r4], #4
 8008fac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008fb0:	9002      	str	r0, [sp, #8]
 8008fb2:	9006      	str	r0, [sp, #24]
 8008fb4:	f7f7 f938 	bl	8000228 <strlen>
 8008fb8:	4b0b      	ldr	r3, [pc, #44]	; (8008fe8 <siscanf+0x4c>)
 8008fba:	9003      	str	r0, [sp, #12]
 8008fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc2:	9314      	str	r3, [sp, #80]	; 0x50
 8008fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fc8:	9007      	str	r0, [sp, #28]
 8008fca:	4808      	ldr	r0, [pc, #32]	; (8008fec <siscanf+0x50>)
 8008fcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	a902      	add	r1, sp, #8
 8008fd6:	6800      	ldr	r0, [r0, #0]
 8008fd8:	9401      	str	r4, [sp, #4]
 8008fda:	f000 fc61 	bl	80098a0 <__ssvfiscanf_r>
 8008fde:	b01c      	add	sp, #112	; 0x70
 8008fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe4:	b003      	add	sp, #12
 8008fe6:	4770      	bx	lr
 8008fe8:	08009013 	.word	0x08009013
 8008fec:	20000014 	.word	0x20000014

08008ff0 <__sread>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff8:	f001 fa04 	bl	800a404 <_read_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	bfab      	itete	ge
 8009000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009002:	89a3      	ldrhlt	r3, [r4, #12]
 8009004:	181b      	addge	r3, r3, r0
 8009006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800900a:	bfac      	ite	ge
 800900c:	6563      	strge	r3, [r4, #84]	; 0x54
 800900e:	81a3      	strhlt	r3, [r4, #12]
 8009010:	bd10      	pop	{r4, pc}

08009012 <__seofread>:
 8009012:	2000      	movs	r0, #0
 8009014:	4770      	bx	lr

08009016 <__swrite>:
 8009016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901a:	461f      	mov	r7, r3
 800901c:	898b      	ldrh	r3, [r1, #12]
 800901e:	4605      	mov	r5, r0
 8009020:	05db      	lsls	r3, r3, #23
 8009022:	460c      	mov	r4, r1
 8009024:	4616      	mov	r6, r2
 8009026:	d505      	bpl.n	8009034 <__swrite+0x1e>
 8009028:	2302      	movs	r3, #2
 800902a:	2200      	movs	r2, #0
 800902c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009030:	f000 fac0 	bl	80095b4 <_lseek_r>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	4632      	mov	r2, r6
 8009038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	4628      	mov	r0, r5
 8009040:	463b      	mov	r3, r7
 8009042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800904a:	f000 b869 	b.w	8009120 <_write_r>

0800904e <__sseek>:
 800904e:	b510      	push	{r4, lr}
 8009050:	460c      	mov	r4, r1
 8009052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009056:	f000 faad 	bl	80095b4 <_lseek_r>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	bf15      	itete	ne
 8009060:	6560      	strne	r0, [r4, #84]	; 0x54
 8009062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800906a:	81a3      	strheq	r3, [r4, #12]
 800906c:	bf18      	it	ne
 800906e:	81a3      	strhne	r3, [r4, #12]
 8009070:	bd10      	pop	{r4, pc}

08009072 <__sclose>:
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 b8d3 	b.w	8009220 <_close_r>
	...

0800907c <__swbuf_r>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	460e      	mov	r6, r1
 8009080:	4614      	mov	r4, r2
 8009082:	4605      	mov	r5, r0
 8009084:	b118      	cbz	r0, 800908e <__swbuf_r+0x12>
 8009086:	6983      	ldr	r3, [r0, #24]
 8009088:	b90b      	cbnz	r3, 800908e <__swbuf_r+0x12>
 800908a:	f000 f9f3 	bl	8009474 <__sinit>
 800908e:	4b21      	ldr	r3, [pc, #132]	; (8009114 <__swbuf_r+0x98>)
 8009090:	429c      	cmp	r4, r3
 8009092:	d12b      	bne.n	80090ec <__swbuf_r+0x70>
 8009094:	686c      	ldr	r4, [r5, #4]
 8009096:	69a3      	ldr	r3, [r4, #24]
 8009098:	60a3      	str	r3, [r4, #8]
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	071a      	lsls	r2, r3, #28
 800909e:	d52f      	bpl.n	8009100 <__swbuf_r+0x84>
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	b36b      	cbz	r3, 8009100 <__swbuf_r+0x84>
 80090a4:	6923      	ldr	r3, [r4, #16]
 80090a6:	6820      	ldr	r0, [r4, #0]
 80090a8:	b2f6      	uxtb	r6, r6
 80090aa:	1ac0      	subs	r0, r0, r3
 80090ac:	6963      	ldr	r3, [r4, #20]
 80090ae:	4637      	mov	r7, r6
 80090b0:	4283      	cmp	r3, r0
 80090b2:	dc04      	bgt.n	80090be <__swbuf_r+0x42>
 80090b4:	4621      	mov	r1, r4
 80090b6:	4628      	mov	r0, r5
 80090b8:	f000 f948 	bl	800934c <_fflush_r>
 80090bc:	bb30      	cbnz	r0, 800910c <__swbuf_r+0x90>
 80090be:	68a3      	ldr	r3, [r4, #8]
 80090c0:	3001      	adds	r0, #1
 80090c2:	3b01      	subs	r3, #1
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	6022      	str	r2, [r4, #0]
 80090cc:	701e      	strb	r6, [r3, #0]
 80090ce:	6963      	ldr	r3, [r4, #20]
 80090d0:	4283      	cmp	r3, r0
 80090d2:	d004      	beq.n	80090de <__swbuf_r+0x62>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	07db      	lsls	r3, r3, #31
 80090d8:	d506      	bpl.n	80090e8 <__swbuf_r+0x6c>
 80090da:	2e0a      	cmp	r6, #10
 80090dc:	d104      	bne.n	80090e8 <__swbuf_r+0x6c>
 80090de:	4621      	mov	r1, r4
 80090e0:	4628      	mov	r0, r5
 80090e2:	f000 f933 	bl	800934c <_fflush_r>
 80090e6:	b988      	cbnz	r0, 800910c <__swbuf_r+0x90>
 80090e8:	4638      	mov	r0, r7
 80090ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ec:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <__swbuf_r+0x9c>)
 80090ee:	429c      	cmp	r4, r3
 80090f0:	d101      	bne.n	80090f6 <__swbuf_r+0x7a>
 80090f2:	68ac      	ldr	r4, [r5, #8]
 80090f4:	e7cf      	b.n	8009096 <__swbuf_r+0x1a>
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <__swbuf_r+0xa0>)
 80090f8:	429c      	cmp	r4, r3
 80090fa:	bf08      	it	eq
 80090fc:	68ec      	ldreq	r4, [r5, #12]
 80090fe:	e7ca      	b.n	8009096 <__swbuf_r+0x1a>
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f000 f81e 	bl	8009144 <__swsetup_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	d0cb      	beq.n	80090a4 <__swbuf_r+0x28>
 800910c:	f04f 37ff 	mov.w	r7, #4294967295
 8009110:	e7ea      	b.n	80090e8 <__swbuf_r+0x6c>
 8009112:	bf00      	nop
 8009114:	0800bbec 	.word	0x0800bbec
 8009118:	0800bc0c 	.word	0x0800bc0c
 800911c:	0800bbcc 	.word	0x0800bbcc

08009120 <_write_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4604      	mov	r4, r0
 8009124:	4608      	mov	r0, r1
 8009126:	4611      	mov	r1, r2
 8009128:	2200      	movs	r2, #0
 800912a:	4d05      	ldr	r5, [pc, #20]	; (8009140 <_write_r+0x20>)
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	f7f9 f953 	bl	80023da <_write>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_write_r+0x1e>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_write_r+0x1e>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000420 	.word	0x20000420

08009144 <__swsetup_r>:
 8009144:	4b32      	ldr	r3, [pc, #200]	; (8009210 <__swsetup_r+0xcc>)
 8009146:	b570      	push	{r4, r5, r6, lr}
 8009148:	681d      	ldr	r5, [r3, #0]
 800914a:	4606      	mov	r6, r0
 800914c:	460c      	mov	r4, r1
 800914e:	b125      	cbz	r5, 800915a <__swsetup_r+0x16>
 8009150:	69ab      	ldr	r3, [r5, #24]
 8009152:	b913      	cbnz	r3, 800915a <__swsetup_r+0x16>
 8009154:	4628      	mov	r0, r5
 8009156:	f000 f98d 	bl	8009474 <__sinit>
 800915a:	4b2e      	ldr	r3, [pc, #184]	; (8009214 <__swsetup_r+0xd0>)
 800915c:	429c      	cmp	r4, r3
 800915e:	d10f      	bne.n	8009180 <__swsetup_r+0x3c>
 8009160:	686c      	ldr	r4, [r5, #4]
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	d42c      	bmi.n	80091c6 <__swsetup_r+0x82>
 800916c:	06dd      	lsls	r5, r3, #27
 800916e:	d411      	bmi.n	8009194 <__swsetup_r+0x50>
 8009170:	2309      	movs	r3, #9
 8009172:	6033      	str	r3, [r6, #0]
 8009174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	e03e      	b.n	80091fe <__swsetup_r+0xba>
 8009180:	4b25      	ldr	r3, [pc, #148]	; (8009218 <__swsetup_r+0xd4>)
 8009182:	429c      	cmp	r4, r3
 8009184:	d101      	bne.n	800918a <__swsetup_r+0x46>
 8009186:	68ac      	ldr	r4, [r5, #8]
 8009188:	e7eb      	b.n	8009162 <__swsetup_r+0x1e>
 800918a:	4b24      	ldr	r3, [pc, #144]	; (800921c <__swsetup_r+0xd8>)
 800918c:	429c      	cmp	r4, r3
 800918e:	bf08      	it	eq
 8009190:	68ec      	ldreq	r4, [r5, #12]
 8009192:	e7e6      	b.n	8009162 <__swsetup_r+0x1e>
 8009194:	0758      	lsls	r0, r3, #29
 8009196:	d512      	bpl.n	80091be <__swsetup_r+0x7a>
 8009198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919a:	b141      	cbz	r1, 80091ae <__swsetup_r+0x6a>
 800919c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a0:	4299      	cmp	r1, r3
 80091a2:	d002      	beq.n	80091aa <__swsetup_r+0x66>
 80091a4:	4630      	mov	r0, r6
 80091a6:	f000 fa7b 	bl	80096a0 <_free_r>
 80091aa:	2300      	movs	r3, #0
 80091ac:	6363      	str	r3, [r4, #52]	; 0x34
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	2300      	movs	r3, #0
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	6923      	ldr	r3, [r4, #16]
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f043 0308 	orr.w	r3, r3, #8
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	b94b      	cbnz	r3, 80091de <__swsetup_r+0x9a>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d4:	d003      	beq.n	80091de <__swsetup_r+0x9a>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 fa21 	bl	8009620 <__smakebuf_r>
 80091de:	89a0      	ldrh	r0, [r4, #12]
 80091e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e4:	f010 0301 	ands.w	r3, r0, #1
 80091e8:	d00a      	beq.n	8009200 <__swsetup_r+0xbc>
 80091ea:	2300      	movs	r3, #0
 80091ec:	60a3      	str	r3, [r4, #8]
 80091ee:	6963      	ldr	r3, [r4, #20]
 80091f0:	425b      	negs	r3, r3
 80091f2:	61a3      	str	r3, [r4, #24]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	b943      	cbnz	r3, 800920a <__swsetup_r+0xc6>
 80091f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091fc:	d1ba      	bne.n	8009174 <__swsetup_r+0x30>
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	0781      	lsls	r1, r0, #30
 8009202:	bf58      	it	pl
 8009204:	6963      	ldrpl	r3, [r4, #20]
 8009206:	60a3      	str	r3, [r4, #8]
 8009208:	e7f4      	b.n	80091f4 <__swsetup_r+0xb0>
 800920a:	2000      	movs	r0, #0
 800920c:	e7f7      	b.n	80091fe <__swsetup_r+0xba>
 800920e:	bf00      	nop
 8009210:	20000014 	.word	0x20000014
 8009214:	0800bbec 	.word	0x0800bbec
 8009218:	0800bc0c 	.word	0x0800bc0c
 800921c:	0800bbcc 	.word	0x0800bbcc

08009220 <_close_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	2300      	movs	r3, #0
 8009224:	4d05      	ldr	r5, [pc, #20]	; (800923c <_close_r+0x1c>)
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f9 f8f1 	bl	8002412 <_close>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_close_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_close_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000420 	.word	0x20000420

08009240 <__sflush_r>:
 8009240:	898a      	ldrh	r2, [r1, #12]
 8009242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009246:	4605      	mov	r5, r0
 8009248:	0710      	lsls	r0, r2, #28
 800924a:	460c      	mov	r4, r1
 800924c:	d458      	bmi.n	8009300 <__sflush_r+0xc0>
 800924e:	684b      	ldr	r3, [r1, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	dc05      	bgt.n	8009260 <__sflush_r+0x20>
 8009254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009256:	2b00      	cmp	r3, #0
 8009258:	dc02      	bgt.n	8009260 <__sflush_r+0x20>
 800925a:	2000      	movs	r0, #0
 800925c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009262:	2e00      	cmp	r6, #0
 8009264:	d0f9      	beq.n	800925a <__sflush_r+0x1a>
 8009266:	2300      	movs	r3, #0
 8009268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800926c:	682f      	ldr	r7, [r5, #0]
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	d032      	beq.n	80092d8 <__sflush_r+0x98>
 8009272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	075a      	lsls	r2, r3, #29
 8009278:	d505      	bpl.n	8009286 <__sflush_r+0x46>
 800927a:	6863      	ldr	r3, [r4, #4]
 800927c:	1ac0      	subs	r0, r0, r3
 800927e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009280:	b10b      	cbz	r3, 8009286 <__sflush_r+0x46>
 8009282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009284:	1ac0      	subs	r0, r0, r3
 8009286:	2300      	movs	r3, #0
 8009288:	4602      	mov	r2, r0
 800928a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800928c:	4628      	mov	r0, r5
 800928e:	6a21      	ldr	r1, [r4, #32]
 8009290:	47b0      	blx	r6
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	d106      	bne.n	80092a6 <__sflush_r+0x66>
 8009298:	6829      	ldr	r1, [r5, #0]
 800929a:	291d      	cmp	r1, #29
 800929c:	d82c      	bhi.n	80092f8 <__sflush_r+0xb8>
 800929e:	4a2a      	ldr	r2, [pc, #168]	; (8009348 <__sflush_r+0x108>)
 80092a0:	40ca      	lsrs	r2, r1
 80092a2:	07d6      	lsls	r6, r2, #31
 80092a4:	d528      	bpl.n	80092f8 <__sflush_r+0xb8>
 80092a6:	2200      	movs	r2, #0
 80092a8:	6062      	str	r2, [r4, #4]
 80092aa:	6922      	ldr	r2, [r4, #16]
 80092ac:	04d9      	lsls	r1, r3, #19
 80092ae:	6022      	str	r2, [r4, #0]
 80092b0:	d504      	bpl.n	80092bc <__sflush_r+0x7c>
 80092b2:	1c42      	adds	r2, r0, #1
 80092b4:	d101      	bne.n	80092ba <__sflush_r+0x7a>
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	b903      	cbnz	r3, 80092bc <__sflush_r+0x7c>
 80092ba:	6560      	str	r0, [r4, #84]	; 0x54
 80092bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092be:	602f      	str	r7, [r5, #0]
 80092c0:	2900      	cmp	r1, #0
 80092c2:	d0ca      	beq.n	800925a <__sflush_r+0x1a>
 80092c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d002      	beq.n	80092d2 <__sflush_r+0x92>
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 f9e7 	bl	80096a0 <_free_r>
 80092d2:	2000      	movs	r0, #0
 80092d4:	6360      	str	r0, [r4, #52]	; 0x34
 80092d6:	e7c1      	b.n	800925c <__sflush_r+0x1c>
 80092d8:	6a21      	ldr	r1, [r4, #32]
 80092da:	2301      	movs	r3, #1
 80092dc:	4628      	mov	r0, r5
 80092de:	47b0      	blx	r6
 80092e0:	1c41      	adds	r1, r0, #1
 80092e2:	d1c7      	bne.n	8009274 <__sflush_r+0x34>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0c4      	beq.n	8009274 <__sflush_r+0x34>
 80092ea:	2b1d      	cmp	r3, #29
 80092ec:	d001      	beq.n	80092f2 <__sflush_r+0xb2>
 80092ee:	2b16      	cmp	r3, #22
 80092f0:	d101      	bne.n	80092f6 <__sflush_r+0xb6>
 80092f2:	602f      	str	r7, [r5, #0]
 80092f4:	e7b1      	b.n	800925a <__sflush_r+0x1a>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	e7ad      	b.n	800925c <__sflush_r+0x1c>
 8009300:	690f      	ldr	r7, [r1, #16]
 8009302:	2f00      	cmp	r7, #0
 8009304:	d0a9      	beq.n	800925a <__sflush_r+0x1a>
 8009306:	0793      	lsls	r3, r2, #30
 8009308:	bf18      	it	ne
 800930a:	2300      	movne	r3, #0
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	bf08      	it	eq
 8009310:	694b      	ldreq	r3, [r1, #20]
 8009312:	eba6 0807 	sub.w	r8, r6, r7
 8009316:	600f      	str	r7, [r1, #0]
 8009318:	608b      	str	r3, [r1, #8]
 800931a:	f1b8 0f00 	cmp.w	r8, #0
 800931e:	dd9c      	ble.n	800925a <__sflush_r+0x1a>
 8009320:	4643      	mov	r3, r8
 8009322:	463a      	mov	r2, r7
 8009324:	4628      	mov	r0, r5
 8009326:	6a21      	ldr	r1, [r4, #32]
 8009328:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800932a:	47b0      	blx	r6
 800932c:	2800      	cmp	r0, #0
 800932e:	dc06      	bgt.n	800933e <__sflush_r+0xfe>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	e78e      	b.n	800925c <__sflush_r+0x1c>
 800933e:	4407      	add	r7, r0
 8009340:	eba8 0800 	sub.w	r8, r8, r0
 8009344:	e7e9      	b.n	800931a <__sflush_r+0xda>
 8009346:	bf00      	nop
 8009348:	20400001 	.word	0x20400001

0800934c <_fflush_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	690b      	ldr	r3, [r1, #16]
 8009350:	4605      	mov	r5, r0
 8009352:	460c      	mov	r4, r1
 8009354:	b913      	cbnz	r3, 800935c <_fflush_r+0x10>
 8009356:	2500      	movs	r5, #0
 8009358:	4628      	mov	r0, r5
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	b118      	cbz	r0, 8009366 <_fflush_r+0x1a>
 800935e:	6983      	ldr	r3, [r0, #24]
 8009360:	b90b      	cbnz	r3, 8009366 <_fflush_r+0x1a>
 8009362:	f000 f887 	bl	8009474 <__sinit>
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <_fflush_r+0x6c>)
 8009368:	429c      	cmp	r4, r3
 800936a:	d11b      	bne.n	80093a4 <_fflush_r+0x58>
 800936c:	686c      	ldr	r4, [r5, #4]
 800936e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0ef      	beq.n	8009356 <_fflush_r+0xa>
 8009376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009378:	07d0      	lsls	r0, r2, #31
 800937a:	d404      	bmi.n	8009386 <_fflush_r+0x3a>
 800937c:	0599      	lsls	r1, r3, #22
 800937e:	d402      	bmi.n	8009386 <_fflush_r+0x3a>
 8009380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009382:	f000 f915 	bl	80095b0 <__retarget_lock_acquire_recursive>
 8009386:	4628      	mov	r0, r5
 8009388:	4621      	mov	r1, r4
 800938a:	f7ff ff59 	bl	8009240 <__sflush_r>
 800938e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009390:	4605      	mov	r5, r0
 8009392:	07da      	lsls	r2, r3, #31
 8009394:	d4e0      	bmi.n	8009358 <_fflush_r+0xc>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	059b      	lsls	r3, r3, #22
 800939a:	d4dd      	bmi.n	8009358 <_fflush_r+0xc>
 800939c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800939e:	f000 f908 	bl	80095b2 <__retarget_lock_release_recursive>
 80093a2:	e7d9      	b.n	8009358 <_fflush_r+0xc>
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <_fflush_r+0x70>)
 80093a6:	429c      	cmp	r4, r3
 80093a8:	d101      	bne.n	80093ae <_fflush_r+0x62>
 80093aa:	68ac      	ldr	r4, [r5, #8]
 80093ac:	e7df      	b.n	800936e <_fflush_r+0x22>
 80093ae:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <_fflush_r+0x74>)
 80093b0:	429c      	cmp	r4, r3
 80093b2:	bf08      	it	eq
 80093b4:	68ec      	ldreq	r4, [r5, #12]
 80093b6:	e7da      	b.n	800936e <_fflush_r+0x22>
 80093b8:	0800bbec 	.word	0x0800bbec
 80093bc:	0800bc0c 	.word	0x0800bc0c
 80093c0:	0800bbcc 	.word	0x0800bbcc

080093c4 <std>:
 80093c4:	2300      	movs	r3, #0
 80093c6:	b510      	push	{r4, lr}
 80093c8:	4604      	mov	r4, r0
 80093ca:	e9c0 3300 	strd	r3, r3, [r0]
 80093ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093d2:	6083      	str	r3, [r0, #8]
 80093d4:	8181      	strh	r1, [r0, #12]
 80093d6:	6643      	str	r3, [r0, #100]	; 0x64
 80093d8:	81c2      	strh	r2, [r0, #14]
 80093da:	6183      	str	r3, [r0, #24]
 80093dc:	4619      	mov	r1, r3
 80093de:	2208      	movs	r2, #8
 80093e0:	305c      	adds	r0, #92	; 0x5c
 80093e2:	f7ff fd45 	bl	8008e70 <memset>
 80093e6:	4b05      	ldr	r3, [pc, #20]	; (80093fc <std+0x38>)
 80093e8:	6224      	str	r4, [r4, #32]
 80093ea:	6263      	str	r3, [r4, #36]	; 0x24
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <std+0x3c>)
 80093ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <std+0x40>)
 80093f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093f4:	4b04      	ldr	r3, [pc, #16]	; (8009408 <std+0x44>)
 80093f6:	6323      	str	r3, [r4, #48]	; 0x30
 80093f8:	bd10      	pop	{r4, pc}
 80093fa:	bf00      	nop
 80093fc:	08008ff1 	.word	0x08008ff1
 8009400:	08009017 	.word	0x08009017
 8009404:	0800904f 	.word	0x0800904f
 8009408:	08009073 	.word	0x08009073

0800940c <_cleanup_r>:
 800940c:	4901      	ldr	r1, [pc, #4]	; (8009414 <_cleanup_r+0x8>)
 800940e:	f000 b8af 	b.w	8009570 <_fwalk_reent>
 8009412:	bf00      	nop
 8009414:	0800934d 	.word	0x0800934d

08009418 <__sfmoreglue>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	2568      	movs	r5, #104	; 0x68
 800941c:	1e4a      	subs	r2, r1, #1
 800941e:	4355      	muls	r5, r2
 8009420:	460e      	mov	r6, r1
 8009422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009426:	f000 f987 	bl	8009738 <_malloc_r>
 800942a:	4604      	mov	r4, r0
 800942c:	b140      	cbz	r0, 8009440 <__sfmoreglue+0x28>
 800942e:	2100      	movs	r1, #0
 8009430:	e9c0 1600 	strd	r1, r6, [r0]
 8009434:	300c      	adds	r0, #12
 8009436:	60a0      	str	r0, [r4, #8]
 8009438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800943c:	f7ff fd18 	bl	8008e70 <memset>
 8009440:	4620      	mov	r0, r4
 8009442:	bd70      	pop	{r4, r5, r6, pc}

08009444 <__sfp_lock_acquire>:
 8009444:	4801      	ldr	r0, [pc, #4]	; (800944c <__sfp_lock_acquire+0x8>)
 8009446:	f000 b8b3 	b.w	80095b0 <__retarget_lock_acquire_recursive>
 800944a:	bf00      	nop
 800944c:	2000041c 	.word	0x2000041c

08009450 <__sfp_lock_release>:
 8009450:	4801      	ldr	r0, [pc, #4]	; (8009458 <__sfp_lock_release+0x8>)
 8009452:	f000 b8ae 	b.w	80095b2 <__retarget_lock_release_recursive>
 8009456:	bf00      	nop
 8009458:	2000041c 	.word	0x2000041c

0800945c <__sinit_lock_acquire>:
 800945c:	4801      	ldr	r0, [pc, #4]	; (8009464 <__sinit_lock_acquire+0x8>)
 800945e:	f000 b8a7 	b.w	80095b0 <__retarget_lock_acquire_recursive>
 8009462:	bf00      	nop
 8009464:	20000417 	.word	0x20000417

08009468 <__sinit_lock_release>:
 8009468:	4801      	ldr	r0, [pc, #4]	; (8009470 <__sinit_lock_release+0x8>)
 800946a:	f000 b8a2 	b.w	80095b2 <__retarget_lock_release_recursive>
 800946e:	bf00      	nop
 8009470:	20000417 	.word	0x20000417

08009474 <__sinit>:
 8009474:	b510      	push	{r4, lr}
 8009476:	4604      	mov	r4, r0
 8009478:	f7ff fff0 	bl	800945c <__sinit_lock_acquire>
 800947c:	69a3      	ldr	r3, [r4, #24]
 800947e:	b11b      	cbz	r3, 8009488 <__sinit+0x14>
 8009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009484:	f7ff bff0 	b.w	8009468 <__sinit_lock_release>
 8009488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800948c:	6523      	str	r3, [r4, #80]	; 0x50
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <__sinit+0x68>)
 8009490:	4a13      	ldr	r2, [pc, #76]	; (80094e0 <__sinit+0x6c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	62a2      	str	r2, [r4, #40]	; 0x28
 8009496:	42a3      	cmp	r3, r4
 8009498:	bf08      	it	eq
 800949a:	2301      	moveq	r3, #1
 800949c:	4620      	mov	r0, r4
 800949e:	bf08      	it	eq
 80094a0:	61a3      	streq	r3, [r4, #24]
 80094a2:	f000 f81f 	bl	80094e4 <__sfp>
 80094a6:	6060      	str	r0, [r4, #4]
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 f81b 	bl	80094e4 <__sfp>
 80094ae:	60a0      	str	r0, [r4, #8]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 f817 	bl	80094e4 <__sfp>
 80094b6:	2200      	movs	r2, #0
 80094b8:	2104      	movs	r1, #4
 80094ba:	60e0      	str	r0, [r4, #12]
 80094bc:	6860      	ldr	r0, [r4, #4]
 80094be:	f7ff ff81 	bl	80093c4 <std>
 80094c2:	2201      	movs	r2, #1
 80094c4:	2109      	movs	r1, #9
 80094c6:	68a0      	ldr	r0, [r4, #8]
 80094c8:	f7ff ff7c 	bl	80093c4 <std>
 80094cc:	2202      	movs	r2, #2
 80094ce:	2112      	movs	r1, #18
 80094d0:	68e0      	ldr	r0, [r4, #12]
 80094d2:	f7ff ff77 	bl	80093c4 <std>
 80094d6:	2301      	movs	r3, #1
 80094d8:	61a3      	str	r3, [r4, #24]
 80094da:	e7d1      	b.n	8009480 <__sinit+0xc>
 80094dc:	0800bbc8 	.word	0x0800bbc8
 80094e0:	0800940d 	.word	0x0800940d

080094e4 <__sfp>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	4607      	mov	r7, r0
 80094e8:	f7ff ffac 	bl	8009444 <__sfp_lock_acquire>
 80094ec:	4b1e      	ldr	r3, [pc, #120]	; (8009568 <__sfp+0x84>)
 80094ee:	681e      	ldr	r6, [r3, #0]
 80094f0:	69b3      	ldr	r3, [r6, #24]
 80094f2:	b913      	cbnz	r3, 80094fa <__sfp+0x16>
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff ffbd 	bl	8009474 <__sinit>
 80094fa:	3648      	adds	r6, #72	; 0x48
 80094fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009500:	3b01      	subs	r3, #1
 8009502:	d503      	bpl.n	800950c <__sfp+0x28>
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	b30b      	cbz	r3, 800954c <__sfp+0x68>
 8009508:	6836      	ldr	r6, [r6, #0]
 800950a:	e7f7      	b.n	80094fc <__sfp+0x18>
 800950c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009510:	b9d5      	cbnz	r5, 8009548 <__sfp+0x64>
 8009512:	4b16      	ldr	r3, [pc, #88]	; (800956c <__sfp+0x88>)
 8009514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009518:	60e3      	str	r3, [r4, #12]
 800951a:	6665      	str	r5, [r4, #100]	; 0x64
 800951c:	f000 f847 	bl	80095ae <__retarget_lock_init_recursive>
 8009520:	f7ff ff96 	bl	8009450 <__sfp_lock_release>
 8009524:	2208      	movs	r2, #8
 8009526:	4629      	mov	r1, r5
 8009528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800952c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009530:	6025      	str	r5, [r4, #0]
 8009532:	61a5      	str	r5, [r4, #24]
 8009534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009538:	f7ff fc9a 	bl	8008e70 <memset>
 800953c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009544:	4620      	mov	r0, r4
 8009546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009548:	3468      	adds	r4, #104	; 0x68
 800954a:	e7d9      	b.n	8009500 <__sfp+0x1c>
 800954c:	2104      	movs	r1, #4
 800954e:	4638      	mov	r0, r7
 8009550:	f7ff ff62 	bl	8009418 <__sfmoreglue>
 8009554:	4604      	mov	r4, r0
 8009556:	6030      	str	r0, [r6, #0]
 8009558:	2800      	cmp	r0, #0
 800955a:	d1d5      	bne.n	8009508 <__sfp+0x24>
 800955c:	f7ff ff78 	bl	8009450 <__sfp_lock_release>
 8009560:	230c      	movs	r3, #12
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	e7ee      	b.n	8009544 <__sfp+0x60>
 8009566:	bf00      	nop
 8009568:	0800bbc8 	.word	0x0800bbc8
 800956c:	ffff0001 	.word	0xffff0001

08009570 <_fwalk_reent>:
 8009570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009574:	4606      	mov	r6, r0
 8009576:	4688      	mov	r8, r1
 8009578:	2700      	movs	r7, #0
 800957a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800957e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009582:	f1b9 0901 	subs.w	r9, r9, #1
 8009586:	d505      	bpl.n	8009594 <_fwalk_reent+0x24>
 8009588:	6824      	ldr	r4, [r4, #0]
 800958a:	2c00      	cmp	r4, #0
 800958c:	d1f7      	bne.n	800957e <_fwalk_reent+0xe>
 800958e:	4638      	mov	r0, r7
 8009590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009594:	89ab      	ldrh	r3, [r5, #12]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d907      	bls.n	80095aa <_fwalk_reent+0x3a>
 800959a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800959e:	3301      	adds	r3, #1
 80095a0:	d003      	beq.n	80095aa <_fwalk_reent+0x3a>
 80095a2:	4629      	mov	r1, r5
 80095a4:	4630      	mov	r0, r6
 80095a6:	47c0      	blx	r8
 80095a8:	4307      	orrs	r7, r0
 80095aa:	3568      	adds	r5, #104	; 0x68
 80095ac:	e7e9      	b.n	8009582 <_fwalk_reent+0x12>

080095ae <__retarget_lock_init_recursive>:
 80095ae:	4770      	bx	lr

080095b0 <__retarget_lock_acquire_recursive>:
 80095b0:	4770      	bx	lr

080095b2 <__retarget_lock_release_recursive>:
 80095b2:	4770      	bx	lr

080095b4 <_lseek_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	2200      	movs	r2, #0
 80095be:	4d05      	ldr	r5, [pc, #20]	; (80095d4 <_lseek_r+0x20>)
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f8 ff49 	bl	800245a <_lseek>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_lseek_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_lseek_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000420 	.word	0x20000420

080095d8 <__swhatbuf_r>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	460e      	mov	r6, r1
 80095dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e0:	4614      	mov	r4, r2
 80095e2:	2900      	cmp	r1, #0
 80095e4:	461d      	mov	r5, r3
 80095e6:	b096      	sub	sp, #88	; 0x58
 80095e8:	da07      	bge.n	80095fa <__swhatbuf_r+0x22>
 80095ea:	2300      	movs	r3, #0
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	89b3      	ldrh	r3, [r6, #12]
 80095f0:	061a      	lsls	r2, r3, #24
 80095f2:	d410      	bmi.n	8009616 <__swhatbuf_r+0x3e>
 80095f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f8:	e00e      	b.n	8009618 <__swhatbuf_r+0x40>
 80095fa:	466a      	mov	r2, sp
 80095fc:	f001 f89c 	bl	800a738 <_fstat_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	dbf2      	blt.n	80095ea <__swhatbuf_r+0x12>
 8009604:	9a01      	ldr	r2, [sp, #4]
 8009606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800960a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800960e:	425a      	negs	r2, r3
 8009610:	415a      	adcs	r2, r3
 8009612:	602a      	str	r2, [r5, #0]
 8009614:	e7ee      	b.n	80095f4 <__swhatbuf_r+0x1c>
 8009616:	2340      	movs	r3, #64	; 0x40
 8009618:	2000      	movs	r0, #0
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	b016      	add	sp, #88	; 0x58
 800961e:	bd70      	pop	{r4, r5, r6, pc}

08009620 <__smakebuf_r>:
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009624:	079d      	lsls	r5, r3, #30
 8009626:	4606      	mov	r6, r0
 8009628:	460c      	mov	r4, r1
 800962a:	d507      	bpl.n	800963c <__smakebuf_r+0x1c>
 800962c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2301      	movs	r3, #1
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	b002      	add	sp, #8
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	466a      	mov	r2, sp
 800963e:	ab01      	add	r3, sp, #4
 8009640:	f7ff ffca 	bl	80095d8 <__swhatbuf_r>
 8009644:	9900      	ldr	r1, [sp, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	4630      	mov	r0, r6
 800964a:	f000 f875 	bl	8009738 <_malloc_r>
 800964e:	b948      	cbnz	r0, 8009664 <__smakebuf_r+0x44>
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	059a      	lsls	r2, r3, #22
 8009656:	d4ef      	bmi.n	8009638 <__smakebuf_r+0x18>
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	f043 0302 	orr.w	r3, r3, #2
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	e7e3      	b.n	800962c <__smakebuf_r+0xc>
 8009664:	4b0d      	ldr	r3, [pc, #52]	; (800969c <__smakebuf_r+0x7c>)
 8009666:	62b3      	str	r3, [r6, #40]	; 0x28
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	6120      	str	r0, [r4, #16]
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	b15b      	cbz	r3, 8009694 <__smakebuf_r+0x74>
 800967c:	4630      	mov	r0, r6
 800967e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009682:	f001 f86b 	bl	800a75c <_isatty_r>
 8009686:	b128      	cbz	r0, 8009694 <__smakebuf_r+0x74>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	89a0      	ldrh	r0, [r4, #12]
 8009696:	4305      	orrs	r5, r0
 8009698:	81a5      	strh	r5, [r4, #12]
 800969a:	e7cd      	b.n	8009638 <__smakebuf_r+0x18>
 800969c:	0800940d 	.word	0x0800940d

080096a0 <_free_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4605      	mov	r5, r0
 80096a4:	2900      	cmp	r1, #0
 80096a6:	d043      	beq.n	8009730 <_free_r+0x90>
 80096a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ac:	1f0c      	subs	r4, r1, #4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	18e4      	addlt	r4, r4, r3
 80096b4:	f001 f87e 	bl	800a7b4 <__malloc_lock>
 80096b8:	4a1e      	ldr	r2, [pc, #120]	; (8009734 <_free_r+0x94>)
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	4610      	mov	r0, r2
 80096be:	b933      	cbnz	r3, 80096ce <_free_r+0x2e>
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	6014      	str	r4, [r2, #0]
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ca:	f001 b879 	b.w	800a7c0 <__malloc_unlock>
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	d90a      	bls.n	80096e8 <_free_r+0x48>
 80096d2:	6821      	ldr	r1, [r4, #0]
 80096d4:	1862      	adds	r2, r4, r1
 80096d6:	4293      	cmp	r3, r2
 80096d8:	bf01      	itttt	eq
 80096da:	681a      	ldreq	r2, [r3, #0]
 80096dc:	685b      	ldreq	r3, [r3, #4]
 80096de:	1852      	addeq	r2, r2, r1
 80096e0:	6022      	streq	r2, [r4, #0]
 80096e2:	6063      	str	r3, [r4, #4]
 80096e4:	6004      	str	r4, [r0, #0]
 80096e6:	e7ed      	b.n	80096c4 <_free_r+0x24>
 80096e8:	461a      	mov	r2, r3
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	b10b      	cbz	r3, 80096f2 <_free_r+0x52>
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	d9fa      	bls.n	80096e8 <_free_r+0x48>
 80096f2:	6811      	ldr	r1, [r2, #0]
 80096f4:	1850      	adds	r0, r2, r1
 80096f6:	42a0      	cmp	r0, r4
 80096f8:	d10b      	bne.n	8009712 <_free_r+0x72>
 80096fa:	6820      	ldr	r0, [r4, #0]
 80096fc:	4401      	add	r1, r0
 80096fe:	1850      	adds	r0, r2, r1
 8009700:	4283      	cmp	r3, r0
 8009702:	6011      	str	r1, [r2, #0]
 8009704:	d1de      	bne.n	80096c4 <_free_r+0x24>
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4401      	add	r1, r0
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	6053      	str	r3, [r2, #4]
 8009710:	e7d8      	b.n	80096c4 <_free_r+0x24>
 8009712:	d902      	bls.n	800971a <_free_r+0x7a>
 8009714:	230c      	movs	r3, #12
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	e7d4      	b.n	80096c4 <_free_r+0x24>
 800971a:	6820      	ldr	r0, [r4, #0]
 800971c:	1821      	adds	r1, r4, r0
 800971e:	428b      	cmp	r3, r1
 8009720:	bf01      	itttt	eq
 8009722:	6819      	ldreq	r1, [r3, #0]
 8009724:	685b      	ldreq	r3, [r3, #4]
 8009726:	1809      	addeq	r1, r1, r0
 8009728:	6021      	streq	r1, [r4, #0]
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	6054      	str	r4, [r2, #4]
 800972e:	e7c9      	b.n	80096c4 <_free_r+0x24>
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	bf00      	nop
 8009734:	20000168 	.word	0x20000168

08009738 <_malloc_r>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	1ccd      	adds	r5, r1, #3
 800973c:	f025 0503 	bic.w	r5, r5, #3
 8009740:	3508      	adds	r5, #8
 8009742:	2d0c      	cmp	r5, #12
 8009744:	bf38      	it	cc
 8009746:	250c      	movcc	r5, #12
 8009748:	2d00      	cmp	r5, #0
 800974a:	4606      	mov	r6, r0
 800974c:	db01      	blt.n	8009752 <_malloc_r+0x1a>
 800974e:	42a9      	cmp	r1, r5
 8009750:	d903      	bls.n	800975a <_malloc_r+0x22>
 8009752:	230c      	movs	r3, #12
 8009754:	6033      	str	r3, [r6, #0]
 8009756:	2000      	movs	r0, #0
 8009758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975a:	f001 f82b 	bl	800a7b4 <__malloc_lock>
 800975e:	4921      	ldr	r1, [pc, #132]	; (80097e4 <_malloc_r+0xac>)
 8009760:	680a      	ldr	r2, [r1, #0]
 8009762:	4614      	mov	r4, r2
 8009764:	b99c      	cbnz	r4, 800978e <_malloc_r+0x56>
 8009766:	4f20      	ldr	r7, [pc, #128]	; (80097e8 <_malloc_r+0xb0>)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	b923      	cbnz	r3, 8009776 <_malloc_r+0x3e>
 800976c:	4621      	mov	r1, r4
 800976e:	4630      	mov	r0, r6
 8009770:	f000 fe5a 	bl	800a428 <_sbrk_r>
 8009774:	6038      	str	r0, [r7, #0]
 8009776:	4629      	mov	r1, r5
 8009778:	4630      	mov	r0, r6
 800977a:	f000 fe55 	bl	800a428 <_sbrk_r>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d123      	bne.n	80097ca <_malloc_r+0x92>
 8009782:	230c      	movs	r3, #12
 8009784:	4630      	mov	r0, r6
 8009786:	6033      	str	r3, [r6, #0]
 8009788:	f001 f81a 	bl	800a7c0 <__malloc_unlock>
 800978c:	e7e3      	b.n	8009756 <_malloc_r+0x1e>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	1b5b      	subs	r3, r3, r5
 8009792:	d417      	bmi.n	80097c4 <_malloc_r+0x8c>
 8009794:	2b0b      	cmp	r3, #11
 8009796:	d903      	bls.n	80097a0 <_malloc_r+0x68>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	441c      	add	r4, r3
 800979c:	6025      	str	r5, [r4, #0]
 800979e:	e004      	b.n	80097aa <_malloc_r+0x72>
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	42a2      	cmp	r2, r4
 80097a4:	bf0c      	ite	eq
 80097a6:	600b      	streq	r3, [r1, #0]
 80097a8:	6053      	strne	r3, [r2, #4]
 80097aa:	4630      	mov	r0, r6
 80097ac:	f001 f808 	bl	800a7c0 <__malloc_unlock>
 80097b0:	f104 000b 	add.w	r0, r4, #11
 80097b4:	1d23      	adds	r3, r4, #4
 80097b6:	f020 0007 	bic.w	r0, r0, #7
 80097ba:	1ac2      	subs	r2, r0, r3
 80097bc:	d0cc      	beq.n	8009758 <_malloc_r+0x20>
 80097be:	1a1b      	subs	r3, r3, r0
 80097c0:	50a3      	str	r3, [r4, r2]
 80097c2:	e7c9      	b.n	8009758 <_malloc_r+0x20>
 80097c4:	4622      	mov	r2, r4
 80097c6:	6864      	ldr	r4, [r4, #4]
 80097c8:	e7cc      	b.n	8009764 <_malloc_r+0x2c>
 80097ca:	1cc4      	adds	r4, r0, #3
 80097cc:	f024 0403 	bic.w	r4, r4, #3
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d0e3      	beq.n	800979c <_malloc_r+0x64>
 80097d4:	1a21      	subs	r1, r4, r0
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 fe26 	bl	800a428 <_sbrk_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	d1dd      	bne.n	800979c <_malloc_r+0x64>
 80097e0:	e7cf      	b.n	8009782 <_malloc_r+0x4a>
 80097e2:	bf00      	nop
 80097e4:	20000168 	.word	0x20000168
 80097e8:	2000016c 	.word	0x2000016c

080097ec <_sungetc_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	1c4b      	adds	r3, r1, #1
 80097f0:	4614      	mov	r4, r2
 80097f2:	d103      	bne.n	80097fc <_sungetc_r+0x10>
 80097f4:	f04f 35ff 	mov.w	r5, #4294967295
 80097f8:	4628      	mov	r0, r5
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	8993      	ldrh	r3, [r2, #12]
 80097fe:	b2cd      	uxtb	r5, r1
 8009800:	f023 0320 	bic.w	r3, r3, #32
 8009804:	8193      	strh	r3, [r2, #12]
 8009806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009808:	6852      	ldr	r2, [r2, #4]
 800980a:	b18b      	cbz	r3, 8009830 <_sungetc_r+0x44>
 800980c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800980e:	4293      	cmp	r3, r2
 8009810:	dd08      	ble.n	8009824 <_sungetc_r+0x38>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	1e5a      	subs	r2, r3, #1
 8009816:	6022      	str	r2, [r4, #0]
 8009818:	f803 5c01 	strb.w	r5, [r3, #-1]
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	3301      	adds	r3, #1
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	e7e9      	b.n	80097f8 <_sungetc_r+0xc>
 8009824:	4621      	mov	r1, r4
 8009826:	f000 ff4f 	bl	800a6c8 <__submore>
 800982a:	2800      	cmp	r0, #0
 800982c:	d0f1      	beq.n	8009812 <_sungetc_r+0x26>
 800982e:	e7e1      	b.n	80097f4 <_sungetc_r+0x8>
 8009830:	6921      	ldr	r1, [r4, #16]
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	b151      	cbz	r1, 800984c <_sungetc_r+0x60>
 8009836:	4299      	cmp	r1, r3
 8009838:	d208      	bcs.n	800984c <_sungetc_r+0x60>
 800983a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800983e:	42a9      	cmp	r1, r5
 8009840:	d104      	bne.n	800984c <_sungetc_r+0x60>
 8009842:	3b01      	subs	r3, #1
 8009844:	3201      	adds	r2, #1
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	6062      	str	r2, [r4, #4]
 800984a:	e7d5      	b.n	80097f8 <_sungetc_r+0xc>
 800984c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009854:	6363      	str	r3, [r4, #52]	; 0x34
 8009856:	2303      	movs	r3, #3
 8009858:	63a3      	str	r3, [r4, #56]	; 0x38
 800985a:	4623      	mov	r3, r4
 800985c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	2301      	movs	r3, #1
 8009864:	e7dc      	b.n	8009820 <_sungetc_r+0x34>

08009866 <__ssrefill_r>:
 8009866:	b510      	push	{r4, lr}
 8009868:	460c      	mov	r4, r1
 800986a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800986c:	b169      	cbz	r1, 800988a <__ssrefill_r+0x24>
 800986e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009872:	4299      	cmp	r1, r3
 8009874:	d001      	beq.n	800987a <__ssrefill_r+0x14>
 8009876:	f7ff ff13 	bl	80096a0 <_free_r>
 800987a:	2000      	movs	r0, #0
 800987c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800987e:	6360      	str	r0, [r4, #52]	; 0x34
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	b113      	cbz	r3, 800988a <__ssrefill_r+0x24>
 8009884:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	bd10      	pop	{r4, pc}
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	2300      	movs	r3, #0
 8009894:	6063      	str	r3, [r4, #4]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0320 	orr.w	r3, r3, #32
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	e7f3      	b.n	8009888 <__ssrefill_r+0x22>

080098a0 <__ssvfiscanf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	460c      	mov	r4, r1
 80098a6:	2100      	movs	r1, #0
 80098a8:	4606      	mov	r6, r0
 80098aa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80098ae:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80098b2:	49b3      	ldr	r1, [pc, #716]	; (8009b80 <__ssvfiscanf_r+0x2e0>)
 80098b4:	f10d 0804 	add.w	r8, sp, #4
 80098b8:	91a0      	str	r1, [sp, #640]	; 0x280
 80098ba:	49b2      	ldr	r1, [pc, #712]	; (8009b84 <__ssvfiscanf_r+0x2e4>)
 80098bc:	4fb2      	ldr	r7, [pc, #712]	; (8009b88 <__ssvfiscanf_r+0x2e8>)
 80098be:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009b8c <__ssvfiscanf_r+0x2ec>
 80098c2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80098c6:	91a1      	str	r1, [sp, #644]	; 0x284
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	f892 a000 	ldrb.w	sl, [r2]
 80098ce:	f1ba 0f00 	cmp.w	sl, #0
 80098d2:	f000 8153 	beq.w	8009b7c <__ssvfiscanf_r+0x2dc>
 80098d6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80098da:	1c55      	adds	r5, r2, #1
 80098dc:	f013 0308 	ands.w	r3, r3, #8
 80098e0:	d019      	beq.n	8009916 <__ssvfiscanf_r+0x76>
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dd0f      	ble.n	8009908 <__ssvfiscanf_r+0x68>
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	781a      	ldrb	r2, [r3, #0]
 80098ec:	5cba      	ldrb	r2, [r7, r2]
 80098ee:	0712      	lsls	r2, r2, #28
 80098f0:	d401      	bmi.n	80098f6 <__ssvfiscanf_r+0x56>
 80098f2:	462a      	mov	r2, r5
 80098f4:	e7e9      	b.n	80098ca <__ssvfiscanf_r+0x2a>
 80098f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80098f8:	3301      	adds	r3, #1
 80098fa:	3201      	adds	r2, #1
 80098fc:	9245      	str	r2, [sp, #276]	; 0x114
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	3a01      	subs	r2, #1
 8009904:	6062      	str	r2, [r4, #4]
 8009906:	e7ec      	b.n	80098e2 <__ssvfiscanf_r+0x42>
 8009908:	4621      	mov	r1, r4
 800990a:	4630      	mov	r0, r6
 800990c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800990e:	4798      	blx	r3
 8009910:	2800      	cmp	r0, #0
 8009912:	d0e9      	beq.n	80098e8 <__ssvfiscanf_r+0x48>
 8009914:	e7ed      	b.n	80098f2 <__ssvfiscanf_r+0x52>
 8009916:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800991a:	f040 8086 	bne.w	8009a2a <__ssvfiscanf_r+0x18a>
 800991e:	9341      	str	r3, [sp, #260]	; 0x104
 8009920:	9343      	str	r3, [sp, #268]	; 0x10c
 8009922:	7853      	ldrb	r3, [r2, #1]
 8009924:	2b2a      	cmp	r3, #42	; 0x2a
 8009926:	bf04      	itt	eq
 8009928:	2310      	moveq	r3, #16
 800992a:	1c95      	addeq	r5, r2, #2
 800992c:	f04f 020a 	mov.w	r2, #10
 8009930:	bf08      	it	eq
 8009932:	9341      	streq	r3, [sp, #260]	; 0x104
 8009934:	46ab      	mov	fp, r5
 8009936:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800993a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800993e:	2b09      	cmp	r3, #9
 8009940:	d91d      	bls.n	800997e <__ssvfiscanf_r+0xde>
 8009942:	2203      	movs	r2, #3
 8009944:	4891      	ldr	r0, [pc, #580]	; (8009b8c <__ssvfiscanf_r+0x2ec>)
 8009946:	f000 ff19 	bl	800a77c <memchr>
 800994a:	b140      	cbz	r0, 800995e <__ssvfiscanf_r+0xbe>
 800994c:	2301      	movs	r3, #1
 800994e:	465d      	mov	r5, fp
 8009950:	eba0 0009 	sub.w	r0, r0, r9
 8009954:	fa03 f000 	lsl.w	r0, r3, r0
 8009958:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800995a:	4318      	orrs	r0, r3
 800995c:	9041      	str	r0, [sp, #260]	; 0x104
 800995e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009962:	2b78      	cmp	r3, #120	; 0x78
 8009964:	d806      	bhi.n	8009974 <__ssvfiscanf_r+0xd4>
 8009966:	2b57      	cmp	r3, #87	; 0x57
 8009968:	d810      	bhi.n	800998c <__ssvfiscanf_r+0xec>
 800996a:	2b25      	cmp	r3, #37	; 0x25
 800996c:	d05d      	beq.n	8009a2a <__ssvfiscanf_r+0x18a>
 800996e:	d857      	bhi.n	8009a20 <__ssvfiscanf_r+0x180>
 8009970:	2b00      	cmp	r3, #0
 8009972:	d075      	beq.n	8009a60 <__ssvfiscanf_r+0x1c0>
 8009974:	2303      	movs	r3, #3
 8009976:	9347      	str	r3, [sp, #284]	; 0x11c
 8009978:	230a      	movs	r3, #10
 800997a:	9342      	str	r3, [sp, #264]	; 0x108
 800997c:	e082      	b.n	8009a84 <__ssvfiscanf_r+0x1e4>
 800997e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009980:	465d      	mov	r5, fp
 8009982:	fb02 1303 	mla	r3, r2, r3, r1
 8009986:	3b30      	subs	r3, #48	; 0x30
 8009988:	9343      	str	r3, [sp, #268]	; 0x10c
 800998a:	e7d3      	b.n	8009934 <__ssvfiscanf_r+0x94>
 800998c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009990:	2a20      	cmp	r2, #32
 8009992:	d8ef      	bhi.n	8009974 <__ssvfiscanf_r+0xd4>
 8009994:	a101      	add	r1, pc, #4	; (adr r1, 800999c <__ssvfiscanf_r+0xfc>)
 8009996:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800999a:	bf00      	nop
 800999c:	08009a6f 	.word	0x08009a6f
 80099a0:	08009975 	.word	0x08009975
 80099a4:	08009975 	.word	0x08009975
 80099a8:	08009acd 	.word	0x08009acd
 80099ac:	08009975 	.word	0x08009975
 80099b0:	08009975 	.word	0x08009975
 80099b4:	08009975 	.word	0x08009975
 80099b8:	08009975 	.word	0x08009975
 80099bc:	08009975 	.word	0x08009975
 80099c0:	08009975 	.word	0x08009975
 80099c4:	08009975 	.word	0x08009975
 80099c8:	08009ae3 	.word	0x08009ae3
 80099cc:	08009ab9 	.word	0x08009ab9
 80099d0:	08009a27 	.word	0x08009a27
 80099d4:	08009a27 	.word	0x08009a27
 80099d8:	08009a27 	.word	0x08009a27
 80099dc:	08009975 	.word	0x08009975
 80099e0:	08009abd 	.word	0x08009abd
 80099e4:	08009975 	.word	0x08009975
 80099e8:	08009975 	.word	0x08009975
 80099ec:	08009975 	.word	0x08009975
 80099f0:	08009975 	.word	0x08009975
 80099f4:	08009af3 	.word	0x08009af3
 80099f8:	08009ac5 	.word	0x08009ac5
 80099fc:	08009a67 	.word	0x08009a67
 8009a00:	08009975 	.word	0x08009975
 8009a04:	08009975 	.word	0x08009975
 8009a08:	08009aef 	.word	0x08009aef
 8009a0c:	08009975 	.word	0x08009975
 8009a10:	08009ab9 	.word	0x08009ab9
 8009a14:	08009975 	.word	0x08009975
 8009a18:	08009975 	.word	0x08009975
 8009a1c:	08009a6f 	.word	0x08009a6f
 8009a20:	3b45      	subs	r3, #69	; 0x45
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d8a6      	bhi.n	8009974 <__ssvfiscanf_r+0xd4>
 8009a26:	2305      	movs	r3, #5
 8009a28:	e02b      	b.n	8009a82 <__ssvfiscanf_r+0x1e2>
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	dd0d      	ble.n	8009a4c <__ssvfiscanf_r+0x1ac>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	4552      	cmp	r2, sl
 8009a36:	f040 80a1 	bne.w	8009b7c <__ssvfiscanf_r+0x2dc>
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	6862      	ldr	r2, [r4, #4]
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009a42:	3a01      	subs	r2, #1
 8009a44:	3301      	adds	r3, #1
 8009a46:	6062      	str	r2, [r4, #4]
 8009a48:	9345      	str	r3, [sp, #276]	; 0x114
 8009a4a:	e752      	b.n	80098f2 <__ssvfiscanf_r+0x52>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4630      	mov	r0, r6
 8009a50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a52:	4798      	blx	r3
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d0eb      	beq.n	8009a30 <__ssvfiscanf_r+0x190>
 8009a58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f040 8084 	bne.w	8009b68 <__ssvfiscanf_r+0x2c8>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	e086      	b.n	8009b74 <__ssvfiscanf_r+0x2d4>
 8009a66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a68:	f042 0220 	orr.w	r2, r2, #32
 8009a6c:	9241      	str	r2, [sp, #260]	; 0x104
 8009a6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a74:	9241      	str	r2, [sp, #260]	; 0x104
 8009a76:	2210      	movs	r2, #16
 8009a78:	2b6f      	cmp	r3, #111	; 0x6f
 8009a7a:	bf34      	ite	cc
 8009a7c:	2303      	movcc	r3, #3
 8009a7e:	2304      	movcs	r3, #4
 8009a80:	9242      	str	r2, [sp, #264]	; 0x108
 8009a82:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a84:	6863      	ldr	r3, [r4, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dd41      	ble.n	8009b0e <__ssvfiscanf_r+0x26e>
 8009a8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a8c:	0659      	lsls	r1, r3, #25
 8009a8e:	d404      	bmi.n	8009a9a <__ssvfiscanf_r+0x1fa>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	5cba      	ldrb	r2, [r7, r2]
 8009a96:	0712      	lsls	r2, r2, #28
 8009a98:	d440      	bmi.n	8009b1c <__ssvfiscanf_r+0x27c>
 8009a9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	dc4f      	bgt.n	8009b40 <__ssvfiscanf_r+0x2a0>
 8009aa0:	466b      	mov	r3, sp
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	a941      	add	r1, sp, #260	; 0x104
 8009aa8:	f000 fb62 	bl	800a170 <_scanf_chars>
 8009aac:	2801      	cmp	r0, #1
 8009aae:	d065      	beq.n	8009b7c <__ssvfiscanf_r+0x2dc>
 8009ab0:	2802      	cmp	r0, #2
 8009ab2:	f47f af1e 	bne.w	80098f2 <__ssvfiscanf_r+0x52>
 8009ab6:	e7cf      	b.n	8009a58 <__ssvfiscanf_r+0x1b8>
 8009ab8:	220a      	movs	r2, #10
 8009aba:	e7dd      	b.n	8009a78 <__ssvfiscanf_r+0x1d8>
 8009abc:	2300      	movs	r3, #0
 8009abe:	9342      	str	r3, [sp, #264]	; 0x108
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e7de      	b.n	8009a82 <__ssvfiscanf_r+0x1e2>
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	9342      	str	r3, [sp, #264]	; 0x108
 8009ac8:	2304      	movs	r3, #4
 8009aca:	e7da      	b.n	8009a82 <__ssvfiscanf_r+0x1e2>
 8009acc:	4629      	mov	r1, r5
 8009ace:	4640      	mov	r0, r8
 8009ad0:	f000 fcba 	bl	800a448 <__sccl>
 8009ad4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009adc:	9341      	str	r3, [sp, #260]	; 0x104
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e7cf      	b.n	8009a82 <__ssvfiscanf_r+0x1e2>
 8009ae2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae8:	9341      	str	r3, [sp, #260]	; 0x104
 8009aea:	2300      	movs	r3, #0
 8009aec:	e7c9      	b.n	8009a82 <__ssvfiscanf_r+0x1e2>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e7c7      	b.n	8009a82 <__ssvfiscanf_r+0x1e2>
 8009af2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009af4:	06c3      	lsls	r3, r0, #27
 8009af6:	f53f aefc 	bmi.w	80098f2 <__ssvfiscanf_r+0x52>
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009afe:	1d19      	adds	r1, r3, #4
 8009b00:	9100      	str	r1, [sp, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	07c0      	lsls	r0, r0, #31
 8009b06:	bf4c      	ite	mi
 8009b08:	801a      	strhmi	r2, [r3, #0]
 8009b0a:	601a      	strpl	r2, [r3, #0]
 8009b0c:	e6f1      	b.n	80098f2 <__ssvfiscanf_r+0x52>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4630      	mov	r0, r6
 8009b12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b14:	4798      	blx	r3
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d0b7      	beq.n	8009a8a <__ssvfiscanf_r+0x1ea>
 8009b1a:	e79d      	b.n	8009a58 <__ssvfiscanf_r+0x1b8>
 8009b1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b1e:	3201      	adds	r2, #1
 8009b20:	9245      	str	r2, [sp, #276]	; 0x114
 8009b22:	6862      	ldr	r2, [r4, #4]
 8009b24:	3a01      	subs	r2, #1
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	6062      	str	r2, [r4, #4]
 8009b2a:	dd02      	ble.n	8009b32 <__ssvfiscanf_r+0x292>
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	e7ae      	b.n	8009a90 <__ssvfiscanf_r+0x1f0>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4630      	mov	r0, r6
 8009b36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b38:	4798      	blx	r3
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d0a8      	beq.n	8009a90 <__ssvfiscanf_r+0x1f0>
 8009b3e:	e78b      	b.n	8009a58 <__ssvfiscanf_r+0x1b8>
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	dc06      	bgt.n	8009b52 <__ssvfiscanf_r+0x2b2>
 8009b44:	466b      	mov	r3, sp
 8009b46:	4622      	mov	r2, r4
 8009b48:	4630      	mov	r0, r6
 8009b4a:	a941      	add	r1, sp, #260	; 0x104
 8009b4c:	f000 fb68 	bl	800a220 <_scanf_i>
 8009b50:	e7ac      	b.n	8009aac <__ssvfiscanf_r+0x20c>
 8009b52:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <__ssvfiscanf_r+0x2f0>)
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f43f aecc 	beq.w	80098f2 <__ssvfiscanf_r+0x52>
 8009b5a:	466b      	mov	r3, sp
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	a941      	add	r1, sp, #260	; 0x104
 8009b62:	f3af 8000 	nop.w
 8009b66:	e7a1      	b.n	8009aac <__ssvfiscanf_r+0x20c>
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b6e:	bf18      	it	ne
 8009b70:	f04f 30ff 	movne.w	r0, #4294967295
 8009b74:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b7e:	e7f9      	b.n	8009b74 <__ssvfiscanf_r+0x2d4>
 8009b80:	080097ed 	.word	0x080097ed
 8009b84:	08009867 	.word	0x08009867
 8009b88:	0800bc7b 	.word	0x0800bc7b
 8009b8c:	0800bc2c 	.word	0x0800bc2c
 8009b90:	00000000 	.word	0x00000000

08009b94 <__sfputc_r>:
 8009b94:	6893      	ldr	r3, [r2, #8]
 8009b96:	b410      	push	{r4}
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	6093      	str	r3, [r2, #8]
 8009b9e:	da07      	bge.n	8009bb0 <__sfputc_r+0x1c>
 8009ba0:	6994      	ldr	r4, [r2, #24]
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	db01      	blt.n	8009baa <__sfputc_r+0x16>
 8009ba6:	290a      	cmp	r1, #10
 8009ba8:	d102      	bne.n	8009bb0 <__sfputc_r+0x1c>
 8009baa:	bc10      	pop	{r4}
 8009bac:	f7ff ba66 	b.w	800907c <__swbuf_r>
 8009bb0:	6813      	ldr	r3, [r2, #0]
 8009bb2:	1c58      	adds	r0, r3, #1
 8009bb4:	6010      	str	r0, [r2, #0]
 8009bb6:	7019      	strb	r1, [r3, #0]
 8009bb8:	4608      	mov	r0, r1
 8009bba:	bc10      	pop	{r4}
 8009bbc:	4770      	bx	lr

08009bbe <__sfputs_r>:
 8009bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	460f      	mov	r7, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	18d5      	adds	r5, r2, r3
 8009bc8:	42ac      	cmp	r4, r5
 8009bca:	d101      	bne.n	8009bd0 <__sfputs_r+0x12>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e007      	b.n	8009be0 <__sfputs_r+0x22>
 8009bd0:	463a      	mov	r2, r7
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd8:	f7ff ffdc 	bl	8009b94 <__sfputc_r>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d1f3      	bne.n	8009bc8 <__sfputs_r+0xa>
 8009be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009be4 <_vfiprintf_r>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	460d      	mov	r5, r1
 8009bea:	4614      	mov	r4, r2
 8009bec:	4698      	mov	r8, r3
 8009bee:	4606      	mov	r6, r0
 8009bf0:	b09d      	sub	sp, #116	; 0x74
 8009bf2:	b118      	cbz	r0, 8009bfc <_vfiprintf_r+0x18>
 8009bf4:	6983      	ldr	r3, [r0, #24]
 8009bf6:	b90b      	cbnz	r3, 8009bfc <_vfiprintf_r+0x18>
 8009bf8:	f7ff fc3c 	bl	8009474 <__sinit>
 8009bfc:	4b89      	ldr	r3, [pc, #548]	; (8009e24 <_vfiprintf_r+0x240>)
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	d11b      	bne.n	8009c3a <_vfiprintf_r+0x56>
 8009c02:	6875      	ldr	r5, [r6, #4]
 8009c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c06:	07d9      	lsls	r1, r3, #31
 8009c08:	d405      	bmi.n	8009c16 <_vfiprintf_r+0x32>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	059a      	lsls	r2, r3, #22
 8009c0e:	d402      	bmi.n	8009c16 <_vfiprintf_r+0x32>
 8009c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c12:	f7ff fccd 	bl	80095b0 <__retarget_lock_acquire_recursive>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	071b      	lsls	r3, r3, #28
 8009c1a:	d501      	bpl.n	8009c20 <_vfiprintf_r+0x3c>
 8009c1c:	692b      	ldr	r3, [r5, #16]
 8009c1e:	b9eb      	cbnz	r3, 8009c5c <_vfiprintf_r+0x78>
 8009c20:	4629      	mov	r1, r5
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7ff fa8e 	bl	8009144 <__swsetup_r>
 8009c28:	b1c0      	cbz	r0, 8009c5c <_vfiprintf_r+0x78>
 8009c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c2c:	07dc      	lsls	r4, r3, #31
 8009c2e:	d50e      	bpl.n	8009c4e <_vfiprintf_r+0x6a>
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	b01d      	add	sp, #116	; 0x74
 8009c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3a:	4b7b      	ldr	r3, [pc, #492]	; (8009e28 <_vfiprintf_r+0x244>)
 8009c3c:	429d      	cmp	r5, r3
 8009c3e:	d101      	bne.n	8009c44 <_vfiprintf_r+0x60>
 8009c40:	68b5      	ldr	r5, [r6, #8]
 8009c42:	e7df      	b.n	8009c04 <_vfiprintf_r+0x20>
 8009c44:	4b79      	ldr	r3, [pc, #484]	; (8009e2c <_vfiprintf_r+0x248>)
 8009c46:	429d      	cmp	r5, r3
 8009c48:	bf08      	it	eq
 8009c4a:	68f5      	ldreq	r5, [r6, #12]
 8009c4c:	e7da      	b.n	8009c04 <_vfiprintf_r+0x20>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d4ed      	bmi.n	8009c30 <_vfiprintf_r+0x4c>
 8009c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c56:	f7ff fcac 	bl	80095b2 <__retarget_lock_release_recursive>
 8009c5a:	e7e9      	b.n	8009c30 <_vfiprintf_r+0x4c>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	2320      	movs	r3, #32
 8009c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c66:	2330      	movs	r3, #48	; 0x30
 8009c68:	f04f 0901 	mov.w	r9, #1
 8009c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e30 <_vfiprintf_r+0x24c>
 8009c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c78:	4623      	mov	r3, r4
 8009c7a:	469a      	mov	sl, r3
 8009c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c80:	b10a      	cbz	r2, 8009c86 <_vfiprintf_r+0xa2>
 8009c82:	2a25      	cmp	r2, #37	; 0x25
 8009c84:	d1f9      	bne.n	8009c7a <_vfiprintf_r+0x96>
 8009c86:	ebba 0b04 	subs.w	fp, sl, r4
 8009c8a:	d00b      	beq.n	8009ca4 <_vfiprintf_r+0xc0>
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ff93 	bl	8009bbe <__sfputs_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f000 80aa 	beq.w	8009df2 <_vfiprintf_r+0x20e>
 8009c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca0:	445a      	add	r2, fp
 8009ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 80a2 	beq.w	8009df2 <_vfiprintf_r+0x20e>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cc6:	4654      	mov	r4, sl
 8009cc8:	2205      	movs	r2, #5
 8009cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cce:	4858      	ldr	r0, [pc, #352]	; (8009e30 <_vfiprintf_r+0x24c>)
 8009cd0:	f000 fd54 	bl	800a77c <memchr>
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	b9d8      	cbnz	r0, 8009d10 <_vfiprintf_r+0x12c>
 8009cd8:	06d1      	lsls	r1, r2, #27
 8009cda:	bf44      	itt	mi
 8009cdc:	2320      	movmi	r3, #32
 8009cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ce2:	0713      	lsls	r3, r2, #28
 8009ce4:	bf44      	itt	mi
 8009ce6:	232b      	movmi	r3, #43	; 0x2b
 8009ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cec:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf2:	d015      	beq.n	8009d20 <_vfiprintf_r+0x13c>
 8009cf4:	4654      	mov	r4, sl
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f04f 0c0a 	mov.w	ip, #10
 8009cfc:	9a07      	ldr	r2, [sp, #28]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d04:	3b30      	subs	r3, #48	; 0x30
 8009d06:	2b09      	cmp	r3, #9
 8009d08:	d94e      	bls.n	8009da8 <_vfiprintf_r+0x1c4>
 8009d0a:	b1b0      	cbz	r0, 8009d3a <_vfiprintf_r+0x156>
 8009d0c:	9207      	str	r2, [sp, #28]
 8009d0e:	e014      	b.n	8009d3a <_vfiprintf_r+0x156>
 8009d10:	eba0 0308 	sub.w	r3, r0, r8
 8009d14:	fa09 f303 	lsl.w	r3, r9, r3
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	46a2      	mov	sl, r4
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	e7d2      	b.n	8009cc6 <_vfiprintf_r+0xe2>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	1d19      	adds	r1, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	9103      	str	r1, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bfbb      	ittet	lt
 8009d2c:	425b      	neglt	r3, r3
 8009d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d32:	9307      	strge	r3, [sp, #28]
 8009d34:	9307      	strlt	r3, [sp, #28]
 8009d36:	bfb8      	it	lt
 8009d38:	9204      	strlt	r2, [sp, #16]
 8009d3a:	7823      	ldrb	r3, [r4, #0]
 8009d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d3e:	d10c      	bne.n	8009d5a <_vfiprintf_r+0x176>
 8009d40:	7863      	ldrb	r3, [r4, #1]
 8009d42:	2b2a      	cmp	r3, #42	; 0x2a
 8009d44:	d135      	bne.n	8009db2 <_vfiprintf_r+0x1ce>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	3402      	adds	r4, #2
 8009d4a:	1d1a      	adds	r2, r3, #4
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	9203      	str	r2, [sp, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	bfb8      	it	lt
 8009d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d58:	9305      	str	r3, [sp, #20]
 8009d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e40 <_vfiprintf_r+0x25c>
 8009d5e:	2203      	movs	r2, #3
 8009d60:	4650      	mov	r0, sl
 8009d62:	7821      	ldrb	r1, [r4, #0]
 8009d64:	f000 fd0a 	bl	800a77c <memchr>
 8009d68:	b140      	cbz	r0, 8009d7c <_vfiprintf_r+0x198>
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	eba0 000a 	sub.w	r0, r0, sl
 8009d70:	fa03 f000 	lsl.w	r0, r3, r0
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	3401      	adds	r4, #1
 8009d78:	4303      	orrs	r3, r0
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	2206      	movs	r2, #6
 8009d82:	482c      	ldr	r0, [pc, #176]	; (8009e34 <_vfiprintf_r+0x250>)
 8009d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d88:	f000 fcf8 	bl	800a77c <memchr>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d03f      	beq.n	8009e10 <_vfiprintf_r+0x22c>
 8009d90:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <_vfiprintf_r+0x254>)
 8009d92:	bb1b      	cbnz	r3, 8009ddc <_vfiprintf_r+0x1f8>
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	3307      	adds	r3, #7
 8009d98:	f023 0307 	bic.w	r3, r3, #7
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da2:	443b      	add	r3, r7
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	e767      	b.n	8009c78 <_vfiprintf_r+0x94>
 8009da8:	460c      	mov	r4, r1
 8009daa:	2001      	movs	r0, #1
 8009dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8009db0:	e7a5      	b.n	8009cfe <_vfiprintf_r+0x11a>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f04f 0c0a 	mov.w	ip, #10
 8009db8:	4619      	mov	r1, r3
 8009dba:	3401      	adds	r4, #1
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dc4:	3a30      	subs	r2, #48	; 0x30
 8009dc6:	2a09      	cmp	r2, #9
 8009dc8:	d903      	bls.n	8009dd2 <_vfiprintf_r+0x1ee>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0c5      	beq.n	8009d5a <_vfiprintf_r+0x176>
 8009dce:	9105      	str	r1, [sp, #20]
 8009dd0:	e7c3      	b.n	8009d5a <_vfiprintf_r+0x176>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dda:	e7f0      	b.n	8009dbe <_vfiprintf_r+0x1da>
 8009ddc:	ab03      	add	r3, sp, #12
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	462a      	mov	r2, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <_vfiprintf_r+0x258>)
 8009de6:	a904      	add	r1, sp, #16
 8009de8:	f3af 8000 	nop.w
 8009dec:	4607      	mov	r7, r0
 8009dee:	1c78      	adds	r0, r7, #1
 8009df0:	d1d6      	bne.n	8009da0 <_vfiprintf_r+0x1bc>
 8009df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009df4:	07d9      	lsls	r1, r3, #31
 8009df6:	d405      	bmi.n	8009e04 <_vfiprintf_r+0x220>
 8009df8:	89ab      	ldrh	r3, [r5, #12]
 8009dfa:	059a      	lsls	r2, r3, #22
 8009dfc:	d402      	bmi.n	8009e04 <_vfiprintf_r+0x220>
 8009dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e00:	f7ff fbd7 	bl	80095b2 <__retarget_lock_release_recursive>
 8009e04:	89ab      	ldrh	r3, [r5, #12]
 8009e06:	065b      	lsls	r3, r3, #25
 8009e08:	f53f af12 	bmi.w	8009c30 <_vfiprintf_r+0x4c>
 8009e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e0e:	e711      	b.n	8009c34 <_vfiprintf_r+0x50>
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	462a      	mov	r2, r5
 8009e16:	4630      	mov	r0, r6
 8009e18:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <_vfiprintf_r+0x258>)
 8009e1a:	a904      	add	r1, sp, #16
 8009e1c:	f000 f882 	bl	8009f24 <_printf_i>
 8009e20:	e7e4      	b.n	8009dec <_vfiprintf_r+0x208>
 8009e22:	bf00      	nop
 8009e24:	0800bbec 	.word	0x0800bbec
 8009e28:	0800bc0c 	.word	0x0800bc0c
 8009e2c:	0800bbcc 	.word	0x0800bbcc
 8009e30:	0800bc30 	.word	0x0800bc30
 8009e34:	0800bc36 	.word	0x0800bc36
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	08009bbf 	.word	0x08009bbf
 8009e40:	0800bc2c 	.word	0x0800bc2c

08009e44 <_printf_common>:
 8009e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e48:	4616      	mov	r6, r2
 8009e4a:	4699      	mov	r9, r3
 8009e4c:	688a      	ldr	r2, [r1, #8]
 8009e4e:	690b      	ldr	r3, [r1, #16]
 8009e50:	4607      	mov	r7, r0
 8009e52:	4293      	cmp	r3, r2
 8009e54:	bfb8      	it	lt
 8009e56:	4613      	movlt	r3, r2
 8009e58:	6033      	str	r3, [r6, #0]
 8009e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e5e:	460c      	mov	r4, r1
 8009e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e64:	b10a      	cbz	r2, 8009e6a <_printf_common+0x26>
 8009e66:	3301      	adds	r3, #1
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	0699      	lsls	r1, r3, #26
 8009e6e:	bf42      	ittt	mi
 8009e70:	6833      	ldrmi	r3, [r6, #0]
 8009e72:	3302      	addmi	r3, #2
 8009e74:	6033      	strmi	r3, [r6, #0]
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	f015 0506 	ands.w	r5, r5, #6
 8009e7c:	d106      	bne.n	8009e8c <_printf_common+0x48>
 8009e7e:	f104 0a19 	add.w	sl, r4, #25
 8009e82:	68e3      	ldr	r3, [r4, #12]
 8009e84:	6832      	ldr	r2, [r6, #0]
 8009e86:	1a9b      	subs	r3, r3, r2
 8009e88:	42ab      	cmp	r3, r5
 8009e8a:	dc28      	bgt.n	8009ede <_printf_common+0x9a>
 8009e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e90:	1e13      	subs	r3, r2, #0
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	bf18      	it	ne
 8009e96:	2301      	movne	r3, #1
 8009e98:	0692      	lsls	r2, r2, #26
 8009e9a:	d42d      	bmi.n	8009ef8 <_printf_common+0xb4>
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ea4:	47c0      	blx	r8
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d020      	beq.n	8009eec <_printf_common+0xa8>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	68e5      	ldr	r5, [r4, #12]
 8009eae:	f003 0306 	and.w	r3, r3, #6
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	bf18      	it	ne
 8009eb6:	2500      	movne	r5, #0
 8009eb8:	6832      	ldr	r2, [r6, #0]
 8009eba:	f04f 0600 	mov.w	r6, #0
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	bf08      	it	eq
 8009ec2:	1aad      	subeq	r5, r5, r2
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	bf08      	it	eq
 8009ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bfc4      	itt	gt
 8009ed0:	1a9b      	subgt	r3, r3, r2
 8009ed2:	18ed      	addgt	r5, r5, r3
 8009ed4:	341a      	adds	r4, #26
 8009ed6:	42b5      	cmp	r5, r6
 8009ed8:	d11a      	bne.n	8009f10 <_printf_common+0xcc>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e008      	b.n	8009ef0 <_printf_common+0xac>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4652      	mov	r2, sl
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	47c0      	blx	r8
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d103      	bne.n	8009ef4 <_printf_common+0xb0>
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef4:	3501      	adds	r5, #1
 8009ef6:	e7c4      	b.n	8009e82 <_printf_common+0x3e>
 8009ef8:	2030      	movs	r0, #48	; 0x30
 8009efa:	18e1      	adds	r1, r4, r3
 8009efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f06:	4422      	add	r2, r4
 8009f08:	3302      	adds	r3, #2
 8009f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f0e:	e7c5      	b.n	8009e9c <_printf_common+0x58>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4622      	mov	r2, r4
 8009f14:	4649      	mov	r1, r9
 8009f16:	4638      	mov	r0, r7
 8009f18:	47c0      	blx	r8
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d0e6      	beq.n	8009eec <_printf_common+0xa8>
 8009f1e:	3601      	adds	r6, #1
 8009f20:	e7d9      	b.n	8009ed6 <_printf_common+0x92>
	...

08009f24 <_printf_i>:
 8009f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	7e27      	ldrb	r7, [r4, #24]
 8009f2c:	4691      	mov	r9, r2
 8009f2e:	2f78      	cmp	r7, #120	; 0x78
 8009f30:	4680      	mov	r8, r0
 8009f32:	469a      	mov	sl, r3
 8009f34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f3a:	d807      	bhi.n	8009f4c <_printf_i+0x28>
 8009f3c:	2f62      	cmp	r7, #98	; 0x62
 8009f3e:	d80a      	bhi.n	8009f56 <_printf_i+0x32>
 8009f40:	2f00      	cmp	r7, #0
 8009f42:	f000 80d9 	beq.w	800a0f8 <_printf_i+0x1d4>
 8009f46:	2f58      	cmp	r7, #88	; 0x58
 8009f48:	f000 80a4 	beq.w	800a094 <_printf_i+0x170>
 8009f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f54:	e03a      	b.n	8009fcc <_printf_i+0xa8>
 8009f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f5a:	2b15      	cmp	r3, #21
 8009f5c:	d8f6      	bhi.n	8009f4c <_printf_i+0x28>
 8009f5e:	a001      	add	r0, pc, #4	; (adr r0, 8009f64 <_printf_i+0x40>)
 8009f60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009f4d 	.word	0x08009f4d
 8009f70:	08009f4d 	.word	0x08009f4d
 8009f74:	08009f4d 	.word	0x08009f4d
 8009f78:	08009f4d 	.word	0x08009f4d
 8009f7c:	08009fd1 	.word	0x08009fd1
 8009f80:	08009f4d 	.word	0x08009f4d
 8009f84:	08009f4d 	.word	0x08009f4d
 8009f88:	08009f4d 	.word	0x08009f4d
 8009f8c:	08009f4d 	.word	0x08009f4d
 8009f90:	0800a0df 	.word	0x0800a0df
 8009f94:	0800a001 	.word	0x0800a001
 8009f98:	0800a0c1 	.word	0x0800a0c1
 8009f9c:	08009f4d 	.word	0x08009f4d
 8009fa0:	08009f4d 	.word	0x08009f4d
 8009fa4:	0800a101 	.word	0x0800a101
 8009fa8:	08009f4d 	.word	0x08009f4d
 8009fac:	0800a001 	.word	0x0800a001
 8009fb0:	08009f4d 	.word	0x08009f4d
 8009fb4:	08009f4d 	.word	0x08009f4d
 8009fb8:	0800a0c9 	.word	0x0800a0c9
 8009fbc:	680b      	ldr	r3, [r1, #0]
 8009fbe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fc2:	1d1a      	adds	r2, r3, #4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	600a      	str	r2, [r1, #0]
 8009fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e0a4      	b.n	800a11a <_printf_i+0x1f6>
 8009fd0:	6825      	ldr	r5, [r4, #0]
 8009fd2:	6808      	ldr	r0, [r1, #0]
 8009fd4:	062e      	lsls	r6, r5, #24
 8009fd6:	f100 0304 	add.w	r3, r0, #4
 8009fda:	d50a      	bpl.n	8009ff2 <_printf_i+0xce>
 8009fdc:	6805      	ldr	r5, [r0, #0]
 8009fde:	600b      	str	r3, [r1, #0]
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	da03      	bge.n	8009fec <_printf_i+0xc8>
 8009fe4:	232d      	movs	r3, #45	; 0x2d
 8009fe6:	426d      	negs	r5, r5
 8009fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fec:	230a      	movs	r3, #10
 8009fee:	485e      	ldr	r0, [pc, #376]	; (800a168 <_printf_i+0x244>)
 8009ff0:	e019      	b.n	800a026 <_printf_i+0x102>
 8009ff2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ff6:	6805      	ldr	r5, [r0, #0]
 8009ff8:	600b      	str	r3, [r1, #0]
 8009ffa:	bf18      	it	ne
 8009ffc:	b22d      	sxthne	r5, r5
 8009ffe:	e7ef      	b.n	8009fe0 <_printf_i+0xbc>
 800a000:	680b      	ldr	r3, [r1, #0]
 800a002:	6825      	ldr	r5, [r4, #0]
 800a004:	1d18      	adds	r0, r3, #4
 800a006:	6008      	str	r0, [r1, #0]
 800a008:	0628      	lsls	r0, r5, #24
 800a00a:	d501      	bpl.n	800a010 <_printf_i+0xec>
 800a00c:	681d      	ldr	r5, [r3, #0]
 800a00e:	e002      	b.n	800a016 <_printf_i+0xf2>
 800a010:	0669      	lsls	r1, r5, #25
 800a012:	d5fb      	bpl.n	800a00c <_printf_i+0xe8>
 800a014:	881d      	ldrh	r5, [r3, #0]
 800a016:	2f6f      	cmp	r7, #111	; 0x6f
 800a018:	bf0c      	ite	eq
 800a01a:	2308      	moveq	r3, #8
 800a01c:	230a      	movne	r3, #10
 800a01e:	4852      	ldr	r0, [pc, #328]	; (800a168 <_printf_i+0x244>)
 800a020:	2100      	movs	r1, #0
 800a022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a026:	6866      	ldr	r6, [r4, #4]
 800a028:	2e00      	cmp	r6, #0
 800a02a:	bfa8      	it	ge
 800a02c:	6821      	ldrge	r1, [r4, #0]
 800a02e:	60a6      	str	r6, [r4, #8]
 800a030:	bfa4      	itt	ge
 800a032:	f021 0104 	bicge.w	r1, r1, #4
 800a036:	6021      	strge	r1, [r4, #0]
 800a038:	b90d      	cbnz	r5, 800a03e <_printf_i+0x11a>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d04d      	beq.n	800a0da <_printf_i+0x1b6>
 800a03e:	4616      	mov	r6, r2
 800a040:	fbb5 f1f3 	udiv	r1, r5, r3
 800a044:	fb03 5711 	mls	r7, r3, r1, r5
 800a048:	5dc7      	ldrb	r7, [r0, r7]
 800a04a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a04e:	462f      	mov	r7, r5
 800a050:	42bb      	cmp	r3, r7
 800a052:	460d      	mov	r5, r1
 800a054:	d9f4      	bls.n	800a040 <_printf_i+0x11c>
 800a056:	2b08      	cmp	r3, #8
 800a058:	d10b      	bne.n	800a072 <_printf_i+0x14e>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	07df      	lsls	r7, r3, #31
 800a05e:	d508      	bpl.n	800a072 <_printf_i+0x14e>
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	6861      	ldr	r1, [r4, #4]
 800a064:	4299      	cmp	r1, r3
 800a066:	bfde      	ittt	le
 800a068:	2330      	movle	r3, #48	; 0x30
 800a06a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a06e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a072:	1b92      	subs	r2, r2, r6
 800a074:	6122      	str	r2, [r4, #16]
 800a076:	464b      	mov	r3, r9
 800a078:	4621      	mov	r1, r4
 800a07a:	4640      	mov	r0, r8
 800a07c:	f8cd a000 	str.w	sl, [sp]
 800a080:	aa03      	add	r2, sp, #12
 800a082:	f7ff fedf 	bl	8009e44 <_printf_common>
 800a086:	3001      	adds	r0, #1
 800a088:	d14c      	bne.n	800a124 <_printf_i+0x200>
 800a08a:	f04f 30ff 	mov.w	r0, #4294967295
 800a08e:	b004      	add	sp, #16
 800a090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a094:	4834      	ldr	r0, [pc, #208]	; (800a168 <_printf_i+0x244>)
 800a096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a09a:	680e      	ldr	r6, [r1, #0]
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a0a2:	061f      	lsls	r7, r3, #24
 800a0a4:	600e      	str	r6, [r1, #0]
 800a0a6:	d514      	bpl.n	800a0d2 <_printf_i+0x1ae>
 800a0a8:	07d9      	lsls	r1, r3, #31
 800a0aa:	bf44      	itt	mi
 800a0ac:	f043 0320 	orrmi.w	r3, r3, #32
 800a0b0:	6023      	strmi	r3, [r4, #0]
 800a0b2:	b91d      	cbnz	r5, 800a0bc <_printf_i+0x198>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	f023 0320 	bic.w	r3, r3, #32
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	2310      	movs	r3, #16
 800a0be:	e7af      	b.n	800a020 <_printf_i+0xfc>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	f043 0320 	orr.w	r3, r3, #32
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	2378      	movs	r3, #120	; 0x78
 800a0ca:	4828      	ldr	r0, [pc, #160]	; (800a16c <_printf_i+0x248>)
 800a0cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0d0:	e7e3      	b.n	800a09a <_printf_i+0x176>
 800a0d2:	065e      	lsls	r6, r3, #25
 800a0d4:	bf48      	it	mi
 800a0d6:	b2ad      	uxthmi	r5, r5
 800a0d8:	e7e6      	b.n	800a0a8 <_printf_i+0x184>
 800a0da:	4616      	mov	r6, r2
 800a0dc:	e7bb      	b.n	800a056 <_printf_i+0x132>
 800a0de:	680b      	ldr	r3, [r1, #0]
 800a0e0:	6826      	ldr	r6, [r4, #0]
 800a0e2:	1d1d      	adds	r5, r3, #4
 800a0e4:	6960      	ldr	r0, [r4, #20]
 800a0e6:	600d      	str	r5, [r1, #0]
 800a0e8:	0635      	lsls	r5, r6, #24
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	d501      	bpl.n	800a0f2 <_printf_i+0x1ce>
 800a0ee:	6018      	str	r0, [r3, #0]
 800a0f0:	e002      	b.n	800a0f8 <_printf_i+0x1d4>
 800a0f2:	0671      	lsls	r1, r6, #25
 800a0f4:	d5fb      	bpl.n	800a0ee <_printf_i+0x1ca>
 800a0f6:	8018      	strh	r0, [r3, #0]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4616      	mov	r6, r2
 800a0fc:	6123      	str	r3, [r4, #16]
 800a0fe:	e7ba      	b.n	800a076 <_printf_i+0x152>
 800a100:	680b      	ldr	r3, [r1, #0]
 800a102:	1d1a      	adds	r2, r3, #4
 800a104:	600a      	str	r2, [r1, #0]
 800a106:	681e      	ldr	r6, [r3, #0]
 800a108:	2100      	movs	r1, #0
 800a10a:	4630      	mov	r0, r6
 800a10c:	6862      	ldr	r2, [r4, #4]
 800a10e:	f000 fb35 	bl	800a77c <memchr>
 800a112:	b108      	cbz	r0, 800a118 <_printf_i+0x1f4>
 800a114:	1b80      	subs	r0, r0, r6
 800a116:	6060      	str	r0, [r4, #4]
 800a118:	6863      	ldr	r3, [r4, #4]
 800a11a:	6123      	str	r3, [r4, #16]
 800a11c:	2300      	movs	r3, #0
 800a11e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a122:	e7a8      	b.n	800a076 <_printf_i+0x152>
 800a124:	4632      	mov	r2, r6
 800a126:	4649      	mov	r1, r9
 800a128:	4640      	mov	r0, r8
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	47d0      	blx	sl
 800a12e:	3001      	adds	r0, #1
 800a130:	d0ab      	beq.n	800a08a <_printf_i+0x166>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	079b      	lsls	r3, r3, #30
 800a136:	d413      	bmi.n	800a160 <_printf_i+0x23c>
 800a138:	68e0      	ldr	r0, [r4, #12]
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	4298      	cmp	r0, r3
 800a13e:	bfb8      	it	lt
 800a140:	4618      	movlt	r0, r3
 800a142:	e7a4      	b.n	800a08e <_printf_i+0x16a>
 800a144:	2301      	movs	r3, #1
 800a146:	4632      	mov	r2, r6
 800a148:	4649      	mov	r1, r9
 800a14a:	4640      	mov	r0, r8
 800a14c:	47d0      	blx	sl
 800a14e:	3001      	adds	r0, #1
 800a150:	d09b      	beq.n	800a08a <_printf_i+0x166>
 800a152:	3501      	adds	r5, #1
 800a154:	68e3      	ldr	r3, [r4, #12]
 800a156:	9903      	ldr	r1, [sp, #12]
 800a158:	1a5b      	subs	r3, r3, r1
 800a15a:	42ab      	cmp	r3, r5
 800a15c:	dcf2      	bgt.n	800a144 <_printf_i+0x220>
 800a15e:	e7eb      	b.n	800a138 <_printf_i+0x214>
 800a160:	2500      	movs	r5, #0
 800a162:	f104 0619 	add.w	r6, r4, #25
 800a166:	e7f5      	b.n	800a154 <_printf_i+0x230>
 800a168:	0800bc3d 	.word	0x0800bc3d
 800a16c:	0800bc4e 	.word	0x0800bc4e

0800a170 <_scanf_chars>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	4615      	mov	r5, r2
 800a176:	688a      	ldr	r2, [r1, #8]
 800a178:	4680      	mov	r8, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b932      	cbnz	r2, 800a18c <_scanf_chars+0x1c>
 800a17e:	698a      	ldr	r2, [r1, #24]
 800a180:	2a00      	cmp	r2, #0
 800a182:	bf0c      	ite	eq
 800a184:	2201      	moveq	r2, #1
 800a186:	f04f 32ff 	movne.w	r2, #4294967295
 800a18a:	608a      	str	r2, [r1, #8]
 800a18c:	2700      	movs	r7, #0
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a21c <_scanf_chars+0xac>
 800a194:	06d1      	lsls	r1, r2, #27
 800a196:	bf5f      	itttt	pl
 800a198:	681a      	ldrpl	r2, [r3, #0]
 800a19a:	1d11      	addpl	r1, r2, #4
 800a19c:	6019      	strpl	r1, [r3, #0]
 800a19e:	6816      	ldrpl	r6, [r2, #0]
 800a1a0:	69a0      	ldr	r0, [r4, #24]
 800a1a2:	b188      	cbz	r0, 800a1c8 <_scanf_chars+0x58>
 800a1a4:	2801      	cmp	r0, #1
 800a1a6:	d107      	bne.n	800a1b8 <_scanf_chars+0x48>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	6963      	ldr	r3, [r4, #20]
 800a1ae:	5c9b      	ldrb	r3, [r3, r2]
 800a1b0:	b953      	cbnz	r3, 800a1c8 <_scanf_chars+0x58>
 800a1b2:	bb27      	cbnz	r7, 800a1fe <_scanf_chars+0x8e>
 800a1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b8:	2802      	cmp	r0, #2
 800a1ba:	d120      	bne.n	800a1fe <_scanf_chars+0x8e>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a1c4:	071b      	lsls	r3, r3, #28
 800a1c6:	d41a      	bmi.n	800a1fe <_scanf_chars+0x8e>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	3701      	adds	r7, #1
 800a1cc:	06da      	lsls	r2, r3, #27
 800a1ce:	bf5e      	ittt	pl
 800a1d0:	682b      	ldrpl	r3, [r5, #0]
 800a1d2:	781b      	ldrbpl	r3, [r3, #0]
 800a1d4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a1d8:	682a      	ldr	r2, [r5, #0]
 800a1da:	686b      	ldr	r3, [r5, #4]
 800a1dc:	3201      	adds	r2, #1
 800a1de:	602a      	str	r2, [r5, #0]
 800a1e0:	68a2      	ldr	r2, [r4, #8]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	3a01      	subs	r2, #1
 800a1e6:	606b      	str	r3, [r5, #4]
 800a1e8:	60a2      	str	r2, [r4, #8]
 800a1ea:	b142      	cbz	r2, 800a1fe <_scanf_chars+0x8e>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	dcd7      	bgt.n	800a1a0 <_scanf_chars+0x30>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1f8:	4798      	blx	r3
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0d0      	beq.n	800a1a0 <_scanf_chars+0x30>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	f013 0310 	ands.w	r3, r3, #16
 800a204:	d105      	bne.n	800a212 <_scanf_chars+0xa2>
 800a206:	68e2      	ldr	r2, [r4, #12]
 800a208:	3201      	adds	r2, #1
 800a20a:	60e2      	str	r2, [r4, #12]
 800a20c:	69a2      	ldr	r2, [r4, #24]
 800a20e:	b102      	cbz	r2, 800a212 <_scanf_chars+0xa2>
 800a210:	7033      	strb	r3, [r6, #0]
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	2000      	movs	r0, #0
 800a216:	441f      	add	r7, r3
 800a218:	6127      	str	r7, [r4, #16]
 800a21a:	e7cb      	b.n	800a1b4 <_scanf_chars+0x44>
 800a21c:	0800bc7b 	.word	0x0800bc7b

0800a220 <_scanf_i>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	460c      	mov	r4, r1
 800a226:	4698      	mov	r8, r3
 800a228:	4b72      	ldr	r3, [pc, #456]	; (800a3f4 <_scanf_i+0x1d4>)
 800a22a:	b087      	sub	sp, #28
 800a22c:	4682      	mov	sl, r0
 800a22e:	4616      	mov	r6, r2
 800a230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a234:	ab03      	add	r3, sp, #12
 800a236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a23a:	4b6f      	ldr	r3, [pc, #444]	; (800a3f8 <_scanf_i+0x1d8>)
 800a23c:	69a1      	ldr	r1, [r4, #24]
 800a23e:	4a6f      	ldr	r2, [pc, #444]	; (800a3fc <_scanf_i+0x1dc>)
 800a240:	4627      	mov	r7, r4
 800a242:	2903      	cmp	r1, #3
 800a244:	bf18      	it	ne
 800a246:	461a      	movne	r2, r3
 800a248:	68a3      	ldr	r3, [r4, #8]
 800a24a:	9201      	str	r2, [sp, #4]
 800a24c:	1e5a      	subs	r2, r3, #1
 800a24e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a252:	bf81      	itttt	hi
 800a254:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a258:	eb03 0905 	addhi.w	r9, r3, r5
 800a25c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a260:	60a3      	strhi	r3, [r4, #8]
 800a262:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a266:	bf98      	it	ls
 800a268:	f04f 0900 	movls.w	r9, #0
 800a26c:	463d      	mov	r5, r7
 800a26e:	f04f 0b00 	mov.w	fp, #0
 800a272:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	6831      	ldr	r1, [r6, #0]
 800a27a:	ab03      	add	r3, sp, #12
 800a27c:	2202      	movs	r2, #2
 800a27e:	7809      	ldrb	r1, [r1, #0]
 800a280:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a284:	f000 fa7a 	bl	800a77c <memchr>
 800a288:	b328      	cbz	r0, 800a2d6 <_scanf_i+0xb6>
 800a28a:	f1bb 0f01 	cmp.w	fp, #1
 800a28e:	d159      	bne.n	800a344 <_scanf_i+0x124>
 800a290:	6862      	ldr	r2, [r4, #4]
 800a292:	b92a      	cbnz	r2, 800a2a0 <_scanf_i+0x80>
 800a294:	2308      	movs	r3, #8
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	6063      	str	r3, [r4, #4]
 800a29a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a29e:	6022      	str	r2, [r4, #0]
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	68a2      	ldr	r2, [r4, #8]
 800a2aa:	1e51      	subs	r1, r2, #1
 800a2ac:	60a1      	str	r1, [r4, #8]
 800a2ae:	b192      	cbz	r2, 800a2d6 <_scanf_i+0xb6>
 800a2b0:	6832      	ldr	r2, [r6, #0]
 800a2b2:	1c51      	adds	r1, r2, #1
 800a2b4:	6031      	str	r1, [r6, #0]
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	f805 2b01 	strb.w	r2, [r5], #1
 800a2bc:	6872      	ldr	r2, [r6, #4]
 800a2be:	3a01      	subs	r2, #1
 800a2c0:	2a00      	cmp	r2, #0
 800a2c2:	6072      	str	r2, [r6, #4]
 800a2c4:	dc07      	bgt.n	800a2d6 <_scanf_i+0xb6>
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a2ce:	4790      	blx	r2
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f040 8085 	bne.w	800a3e0 <_scanf_i+0x1c0>
 800a2d6:	f10b 0b01 	add.w	fp, fp, #1
 800a2da:	f1bb 0f03 	cmp.w	fp, #3
 800a2de:	d1cb      	bne.n	800a278 <_scanf_i+0x58>
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	b90b      	cbnz	r3, 800a2e8 <_scanf_i+0xc8>
 800a2e4:	230a      	movs	r3, #10
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	6863      	ldr	r3, [r4, #4]
 800a2ea:	4945      	ldr	r1, [pc, #276]	; (800a400 <_scanf_i+0x1e0>)
 800a2ec:	6960      	ldr	r0, [r4, #20]
 800a2ee:	1ac9      	subs	r1, r1, r3
 800a2f0:	f000 f8aa 	bl	800a448 <__sccl>
 800a2f4:	f04f 0b00 	mov.w	fp, #0
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d03d      	beq.n	800a37c <_scanf_i+0x15c>
 800a300:	6831      	ldr	r1, [r6, #0]
 800a302:	6960      	ldr	r0, [r4, #20]
 800a304:	f891 c000 	ldrb.w	ip, [r1]
 800a308:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d035      	beq.n	800a37c <_scanf_i+0x15c>
 800a310:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a314:	d124      	bne.n	800a360 <_scanf_i+0x140>
 800a316:	0510      	lsls	r0, r2, #20
 800a318:	d522      	bpl.n	800a360 <_scanf_i+0x140>
 800a31a:	f10b 0b01 	add.w	fp, fp, #1
 800a31e:	f1b9 0f00 	cmp.w	r9, #0
 800a322:	d003      	beq.n	800a32c <_scanf_i+0x10c>
 800a324:	3301      	adds	r3, #1
 800a326:	f109 39ff 	add.w	r9, r9, #4294967295
 800a32a:	60a3      	str	r3, [r4, #8]
 800a32c:	6873      	ldr	r3, [r6, #4]
 800a32e:	3b01      	subs	r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	6073      	str	r3, [r6, #4]
 800a334:	dd1b      	ble.n	800a36e <_scanf_i+0x14e>
 800a336:	6833      	ldr	r3, [r6, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	6033      	str	r3, [r6, #0]
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	3b01      	subs	r3, #1
 800a340:	60a3      	str	r3, [r4, #8]
 800a342:	e7d9      	b.n	800a2f8 <_scanf_i+0xd8>
 800a344:	f1bb 0f02 	cmp.w	fp, #2
 800a348:	d1ae      	bne.n	800a2a8 <_scanf_i+0x88>
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a350:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a354:	d1bf      	bne.n	800a2d6 <_scanf_i+0xb6>
 800a356:	2310      	movs	r3, #16
 800a358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a35c:	6063      	str	r3, [r4, #4]
 800a35e:	e7a2      	b.n	800a2a6 <_scanf_i+0x86>
 800a360:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	780b      	ldrb	r3, [r1, #0]
 800a368:	f805 3b01 	strb.w	r3, [r5], #1
 800a36c:	e7de      	b.n	800a32c <_scanf_i+0x10c>
 800a36e:	4631      	mov	r1, r6
 800a370:	4650      	mov	r0, sl
 800a372:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a376:	4798      	blx	r3
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0df      	beq.n	800a33c <_scanf_i+0x11c>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	05d9      	lsls	r1, r3, #23
 800a380:	d50d      	bpl.n	800a39e <_scanf_i+0x17e>
 800a382:	42bd      	cmp	r5, r7
 800a384:	d909      	bls.n	800a39a <_scanf_i+0x17a>
 800a386:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a38a:	4632      	mov	r2, r6
 800a38c:	4650      	mov	r0, sl
 800a38e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a392:	f105 39ff 	add.w	r9, r5, #4294967295
 800a396:	4798      	blx	r3
 800a398:	464d      	mov	r5, r9
 800a39a:	42bd      	cmp	r5, r7
 800a39c:	d028      	beq.n	800a3f0 <_scanf_i+0x1d0>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	f012 0210 	ands.w	r2, r2, #16
 800a3a4:	d113      	bne.n	800a3ce <_scanf_i+0x1ae>
 800a3a6:	702a      	strb	r2, [r5, #0]
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	9e01      	ldr	r6, [sp, #4]
 800a3b0:	47b0      	blx	r6
 800a3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	1d1a      	adds	r2, r3, #4
 800a3ba:	f8c8 2000 	str.w	r2, [r8]
 800a3be:	f011 0f20 	tst.w	r1, #32
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	d00f      	beq.n	800a3e6 <_scanf_i+0x1c6>
 800a3c6:	6018      	str	r0, [r3, #0]
 800a3c8:	68e3      	ldr	r3, [r4, #12]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	60e3      	str	r3, [r4, #12]
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	1bed      	subs	r5, r5, r7
 800a3d2:	44ab      	add	fp, r5
 800a3d4:	6925      	ldr	r5, [r4, #16]
 800a3d6:	445d      	add	r5, fp
 800a3d8:	6125      	str	r5, [r4, #16]
 800a3da:	b007      	add	sp, #28
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	f04f 0b00 	mov.w	fp, #0
 800a3e4:	e7ca      	b.n	800a37c <_scanf_i+0x15c>
 800a3e6:	07ca      	lsls	r2, r1, #31
 800a3e8:	bf4c      	ite	mi
 800a3ea:	8018      	strhmi	r0, [r3, #0]
 800a3ec:	6018      	strpl	r0, [r3, #0]
 800a3ee:	e7eb      	b.n	800a3c8 <_scanf_i+0x1a8>
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	e7f2      	b.n	800a3da <_scanf_i+0x1ba>
 800a3f4:	0800bba4 	.word	0x0800bba4
 800a3f8:	0800a6c5 	.word	0x0800a6c5
 800a3fc:	0800a5c9 	.word	0x0800a5c9
 800a400:	0800bc78 	.word	0x0800bc78

0800a404 <_read_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	2200      	movs	r2, #0
 800a40e:	4d05      	ldr	r5, [pc, #20]	; (800a424 <_read_r+0x20>)
 800a410:	602a      	str	r2, [r5, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	f7f7 ffc4 	bl	80023a0 <_read>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_read_r+0x1e>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_read_r+0x1e>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	20000420 	.word	0x20000420

0800a428 <_sbrk_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	2300      	movs	r3, #0
 800a42c:	4d05      	ldr	r5, [pc, #20]	; (800a444 <_sbrk_r+0x1c>)
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f8 f81e 	bl	8002474 <_sbrk>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_sbrk_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_sbrk_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000420 	.word	0x20000420

0800a448 <__sccl>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	780b      	ldrb	r3, [r1, #0]
 800a44c:	4604      	mov	r4, r0
 800a44e:	2b5e      	cmp	r3, #94	; 0x5e
 800a450:	bf13      	iteet	ne
 800a452:	2200      	movne	r2, #0
 800a454:	2201      	moveq	r2, #1
 800a456:	784b      	ldrbeq	r3, [r1, #1]
 800a458:	1c48      	addne	r0, r1, #1
 800a45a:	bf08      	it	eq
 800a45c:	1c88      	addeq	r0, r1, #2
 800a45e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a462:	1e61      	subs	r1, r4, #1
 800a464:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a468:	42a9      	cmp	r1, r5
 800a46a:	d1fb      	bne.n	800a464 <__sccl+0x1c>
 800a46c:	b90b      	cbnz	r3, 800a472 <__sccl+0x2a>
 800a46e:	3801      	subs	r0, #1
 800a470:	bd70      	pop	{r4, r5, r6, pc}
 800a472:	f082 0101 	eor.w	r1, r2, #1
 800a476:	54e1      	strb	r1, [r4, r3]
 800a478:	1c42      	adds	r2, r0, #1
 800a47a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a47e:	4610      	mov	r0, r2
 800a480:	2d2d      	cmp	r5, #45	; 0x2d
 800a482:	f102 36ff 	add.w	r6, r2, #4294967295
 800a486:	d006      	beq.n	800a496 <__sccl+0x4e>
 800a488:	2d5d      	cmp	r5, #93	; 0x5d
 800a48a:	d0f1      	beq.n	800a470 <__sccl+0x28>
 800a48c:	b90d      	cbnz	r5, 800a492 <__sccl+0x4a>
 800a48e:	4630      	mov	r0, r6
 800a490:	e7ee      	b.n	800a470 <__sccl+0x28>
 800a492:	462b      	mov	r3, r5
 800a494:	e7ef      	b.n	800a476 <__sccl+0x2e>
 800a496:	7816      	ldrb	r6, [r2, #0]
 800a498:	2e5d      	cmp	r6, #93	; 0x5d
 800a49a:	d0fa      	beq.n	800a492 <__sccl+0x4a>
 800a49c:	42b3      	cmp	r3, r6
 800a49e:	dcf8      	bgt.n	800a492 <__sccl+0x4a>
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	4286      	cmp	r6, r0
 800a4a6:	5421      	strb	r1, [r4, r0]
 800a4a8:	dcfb      	bgt.n	800a4a2 <__sccl+0x5a>
 800a4aa:	43d8      	mvns	r0, r3
 800a4ac:	4430      	add	r0, r6
 800a4ae:	42b3      	cmp	r3, r6
 800a4b0:	bfa8      	it	ge
 800a4b2:	2000      	movge	r0, #0
 800a4b4:	1c5d      	adds	r5, r3, #1
 800a4b6:	182b      	adds	r3, r5, r0
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	e7de      	b.n	800a47a <__sccl+0x32>

0800a4bc <_strtol_l.isra.0>:
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c2:	4686      	mov	lr, r0
 800a4c4:	d001      	beq.n	800a4ca <_strtol_l.isra.0+0xe>
 800a4c6:	2b24      	cmp	r3, #36	; 0x24
 800a4c8:	d906      	bls.n	800a4d8 <_strtol_l.isra.0+0x1c>
 800a4ca:	f7fe fca7 	bl	8008e1c <__errno>
 800a4ce:	2316      	movs	r3, #22
 800a4d0:	6003      	str	r3, [r0, #0]
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d8:	468c      	mov	ip, r1
 800a4da:	4e3a      	ldr	r6, [pc, #232]	; (800a5c4 <_strtol_l.isra.0+0x108>)
 800a4dc:	4660      	mov	r0, ip
 800a4de:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a4e2:	5da5      	ldrb	r5, [r4, r6]
 800a4e4:	f015 0508 	ands.w	r5, r5, #8
 800a4e8:	d1f8      	bne.n	800a4dc <_strtol_l.isra.0+0x20>
 800a4ea:	2c2d      	cmp	r4, #45	; 0x2d
 800a4ec:	d133      	bne.n	800a556 <_strtol_l.isra.0+0x9a>
 800a4ee:	f04f 0801 	mov.w	r8, #1
 800a4f2:	f89c 4000 	ldrb.w	r4, [ip]
 800a4f6:	f100 0c02 	add.w	ip, r0, #2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d05d      	beq.n	800a5ba <_strtol_l.isra.0+0xfe>
 800a4fe:	2b10      	cmp	r3, #16
 800a500:	d10c      	bne.n	800a51c <_strtol_l.isra.0+0x60>
 800a502:	2c30      	cmp	r4, #48	; 0x30
 800a504:	d10a      	bne.n	800a51c <_strtol_l.isra.0+0x60>
 800a506:	f89c 0000 	ldrb.w	r0, [ip]
 800a50a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a50e:	2858      	cmp	r0, #88	; 0x58
 800a510:	d14e      	bne.n	800a5b0 <_strtol_l.isra.0+0xf4>
 800a512:	2310      	movs	r3, #16
 800a514:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a518:	f10c 0c02 	add.w	ip, ip, #2
 800a51c:	2500      	movs	r5, #0
 800a51e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a522:	3f01      	subs	r7, #1
 800a524:	fbb7 f9f3 	udiv	r9, r7, r3
 800a528:	4628      	mov	r0, r5
 800a52a:	fb03 7a19 	mls	sl, r3, r9, r7
 800a52e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a532:	2e09      	cmp	r6, #9
 800a534:	d818      	bhi.n	800a568 <_strtol_l.isra.0+0xac>
 800a536:	4634      	mov	r4, r6
 800a538:	42a3      	cmp	r3, r4
 800a53a:	dd24      	ble.n	800a586 <_strtol_l.isra.0+0xca>
 800a53c:	2d00      	cmp	r5, #0
 800a53e:	db1f      	blt.n	800a580 <_strtol_l.isra.0+0xc4>
 800a540:	4581      	cmp	r9, r0
 800a542:	d31d      	bcc.n	800a580 <_strtol_l.isra.0+0xc4>
 800a544:	d101      	bne.n	800a54a <_strtol_l.isra.0+0x8e>
 800a546:	45a2      	cmp	sl, r4
 800a548:	db1a      	blt.n	800a580 <_strtol_l.isra.0+0xc4>
 800a54a:	2501      	movs	r5, #1
 800a54c:	fb00 4003 	mla	r0, r0, r3, r4
 800a550:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a554:	e7eb      	b.n	800a52e <_strtol_l.isra.0+0x72>
 800a556:	2c2b      	cmp	r4, #43	; 0x2b
 800a558:	bf08      	it	eq
 800a55a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a55e:	46a8      	mov	r8, r5
 800a560:	bf08      	it	eq
 800a562:	f100 0c02 	addeq.w	ip, r0, #2
 800a566:	e7c8      	b.n	800a4fa <_strtol_l.isra.0+0x3e>
 800a568:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a56c:	2e19      	cmp	r6, #25
 800a56e:	d801      	bhi.n	800a574 <_strtol_l.isra.0+0xb8>
 800a570:	3c37      	subs	r4, #55	; 0x37
 800a572:	e7e1      	b.n	800a538 <_strtol_l.isra.0+0x7c>
 800a574:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a578:	2e19      	cmp	r6, #25
 800a57a:	d804      	bhi.n	800a586 <_strtol_l.isra.0+0xca>
 800a57c:	3c57      	subs	r4, #87	; 0x57
 800a57e:	e7db      	b.n	800a538 <_strtol_l.isra.0+0x7c>
 800a580:	f04f 35ff 	mov.w	r5, #4294967295
 800a584:	e7e4      	b.n	800a550 <_strtol_l.isra.0+0x94>
 800a586:	2d00      	cmp	r5, #0
 800a588:	da08      	bge.n	800a59c <_strtol_l.isra.0+0xe0>
 800a58a:	2322      	movs	r3, #34	; 0x22
 800a58c:	4638      	mov	r0, r7
 800a58e:	f8ce 3000 	str.w	r3, [lr]
 800a592:	2a00      	cmp	r2, #0
 800a594:	d09e      	beq.n	800a4d4 <_strtol_l.isra.0+0x18>
 800a596:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a59a:	e007      	b.n	800a5ac <_strtol_l.isra.0+0xf0>
 800a59c:	f1b8 0f00 	cmp.w	r8, #0
 800a5a0:	d000      	beq.n	800a5a4 <_strtol_l.isra.0+0xe8>
 800a5a2:	4240      	negs	r0, r0
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	d095      	beq.n	800a4d4 <_strtol_l.isra.0+0x18>
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	d1f4      	bne.n	800a596 <_strtol_l.isra.0+0xda>
 800a5ac:	6011      	str	r1, [r2, #0]
 800a5ae:	e791      	b.n	800a4d4 <_strtol_l.isra.0+0x18>
 800a5b0:	2430      	movs	r4, #48	; 0x30
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1b2      	bne.n	800a51c <_strtol_l.isra.0+0x60>
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	e7b0      	b.n	800a51c <_strtol_l.isra.0+0x60>
 800a5ba:	2c30      	cmp	r4, #48	; 0x30
 800a5bc:	d0a3      	beq.n	800a506 <_strtol_l.isra.0+0x4a>
 800a5be:	230a      	movs	r3, #10
 800a5c0:	e7ac      	b.n	800a51c <_strtol_l.isra.0+0x60>
 800a5c2:	bf00      	nop
 800a5c4:	0800bc7b 	.word	0x0800bc7b

0800a5c8 <_strtol_r>:
 800a5c8:	f7ff bf78 	b.w	800a4bc <_strtol_l.isra.0>

0800a5cc <_strtoul_l.isra.0>:
 800a5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5d0:	468c      	mov	ip, r1
 800a5d2:	4686      	mov	lr, r0
 800a5d4:	4e3a      	ldr	r6, [pc, #232]	; (800a6c0 <_strtoul_l.isra.0+0xf4>)
 800a5d6:	4660      	mov	r0, ip
 800a5d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a5dc:	5da5      	ldrb	r5, [r4, r6]
 800a5de:	f015 0508 	ands.w	r5, r5, #8
 800a5e2:	d1f8      	bne.n	800a5d6 <_strtoul_l.isra.0+0xa>
 800a5e4:	2c2d      	cmp	r4, #45	; 0x2d
 800a5e6:	d134      	bne.n	800a652 <_strtoul_l.isra.0+0x86>
 800a5e8:	f04f 0801 	mov.w	r8, #1
 800a5ec:	f89c 4000 	ldrb.w	r4, [ip]
 800a5f0:	f100 0c02 	add.w	ip, r0, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d05e      	beq.n	800a6b6 <_strtoul_l.isra.0+0xea>
 800a5f8:	2b10      	cmp	r3, #16
 800a5fa:	d10c      	bne.n	800a616 <_strtoul_l.isra.0+0x4a>
 800a5fc:	2c30      	cmp	r4, #48	; 0x30
 800a5fe:	d10a      	bne.n	800a616 <_strtoul_l.isra.0+0x4a>
 800a600:	f89c 0000 	ldrb.w	r0, [ip]
 800a604:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a608:	2858      	cmp	r0, #88	; 0x58
 800a60a:	d14f      	bne.n	800a6ac <_strtoul_l.isra.0+0xe0>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a612:	f10c 0c02 	add.w	ip, ip, #2
 800a616:	f04f 37ff 	mov.w	r7, #4294967295
 800a61a:	fbb7 f7f3 	udiv	r7, r7, r3
 800a61e:	2500      	movs	r5, #0
 800a620:	fb03 f907 	mul.w	r9, r3, r7
 800a624:	4628      	mov	r0, r5
 800a626:	ea6f 0909 	mvn.w	r9, r9
 800a62a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a62e:	2e09      	cmp	r6, #9
 800a630:	d818      	bhi.n	800a664 <_strtoul_l.isra.0+0x98>
 800a632:	4634      	mov	r4, r6
 800a634:	42a3      	cmp	r3, r4
 800a636:	dd24      	ble.n	800a682 <_strtoul_l.isra.0+0xb6>
 800a638:	2d00      	cmp	r5, #0
 800a63a:	db1f      	blt.n	800a67c <_strtoul_l.isra.0+0xb0>
 800a63c:	4287      	cmp	r7, r0
 800a63e:	d31d      	bcc.n	800a67c <_strtoul_l.isra.0+0xb0>
 800a640:	d101      	bne.n	800a646 <_strtoul_l.isra.0+0x7a>
 800a642:	45a1      	cmp	r9, r4
 800a644:	db1a      	blt.n	800a67c <_strtoul_l.isra.0+0xb0>
 800a646:	2501      	movs	r5, #1
 800a648:	fb00 4003 	mla	r0, r0, r3, r4
 800a64c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a650:	e7eb      	b.n	800a62a <_strtoul_l.isra.0+0x5e>
 800a652:	2c2b      	cmp	r4, #43	; 0x2b
 800a654:	bf08      	it	eq
 800a656:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a65a:	46a8      	mov	r8, r5
 800a65c:	bf08      	it	eq
 800a65e:	f100 0c02 	addeq.w	ip, r0, #2
 800a662:	e7c7      	b.n	800a5f4 <_strtoul_l.isra.0+0x28>
 800a664:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a668:	2e19      	cmp	r6, #25
 800a66a:	d801      	bhi.n	800a670 <_strtoul_l.isra.0+0xa4>
 800a66c:	3c37      	subs	r4, #55	; 0x37
 800a66e:	e7e1      	b.n	800a634 <_strtoul_l.isra.0+0x68>
 800a670:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a674:	2e19      	cmp	r6, #25
 800a676:	d804      	bhi.n	800a682 <_strtoul_l.isra.0+0xb6>
 800a678:	3c57      	subs	r4, #87	; 0x57
 800a67a:	e7db      	b.n	800a634 <_strtoul_l.isra.0+0x68>
 800a67c:	f04f 35ff 	mov.w	r5, #4294967295
 800a680:	e7e4      	b.n	800a64c <_strtoul_l.isra.0+0x80>
 800a682:	2d00      	cmp	r5, #0
 800a684:	da07      	bge.n	800a696 <_strtoul_l.isra.0+0xca>
 800a686:	2322      	movs	r3, #34	; 0x22
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	f8ce 3000 	str.w	r3, [lr]
 800a690:	b942      	cbnz	r2, 800a6a4 <_strtoul_l.isra.0+0xd8>
 800a692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a696:	f1b8 0f00 	cmp.w	r8, #0
 800a69a:	d000      	beq.n	800a69e <_strtoul_l.isra.0+0xd2>
 800a69c:	4240      	negs	r0, r0
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	d0f7      	beq.n	800a692 <_strtoul_l.isra.0+0xc6>
 800a6a2:	b10d      	cbz	r5, 800a6a8 <_strtoul_l.isra.0+0xdc>
 800a6a4:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a6a8:	6011      	str	r1, [r2, #0]
 800a6aa:	e7f2      	b.n	800a692 <_strtoul_l.isra.0+0xc6>
 800a6ac:	2430      	movs	r4, #48	; 0x30
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1b1      	bne.n	800a616 <_strtoul_l.isra.0+0x4a>
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	e7af      	b.n	800a616 <_strtoul_l.isra.0+0x4a>
 800a6b6:	2c30      	cmp	r4, #48	; 0x30
 800a6b8:	d0a2      	beq.n	800a600 <_strtoul_l.isra.0+0x34>
 800a6ba:	230a      	movs	r3, #10
 800a6bc:	e7ab      	b.n	800a616 <_strtoul_l.isra.0+0x4a>
 800a6be:	bf00      	nop
 800a6c0:	0800bc7b 	.word	0x0800bc7b

0800a6c4 <_strtoul_r>:
 800a6c4:	f7ff bf82 	b.w	800a5cc <_strtoul_l.isra.0>

0800a6c8 <__submore>:
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d11b      	bne.n	800a710 <__submore+0x48>
 800a6d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6dc:	f7ff f82c 	bl	8009738 <_malloc_r>
 800a6e0:	b918      	cbnz	r0, 800a6ea <__submore+0x22>
 800a6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ee:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a6f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a6fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a6fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a702:	7043      	strb	r3, [r0, #1]
 800a704:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a708:	7003      	strb	r3, [r0, #0]
 800a70a:	6020      	str	r0, [r4, #0]
 800a70c:	2000      	movs	r0, #0
 800a70e:	e7ea      	b.n	800a6e6 <__submore+0x1e>
 800a710:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a712:	0077      	lsls	r7, r6, #1
 800a714:	463a      	mov	r2, r7
 800a716:	f000 f859 	bl	800a7cc <_realloc_r>
 800a71a:	4605      	mov	r5, r0
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0e0      	beq.n	800a6e2 <__submore+0x1a>
 800a720:	eb00 0806 	add.w	r8, r0, r6
 800a724:	4601      	mov	r1, r0
 800a726:	4632      	mov	r2, r6
 800a728:	4640      	mov	r0, r8
 800a72a:	f000 f835 	bl	800a798 <memcpy>
 800a72e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a732:	f8c4 8000 	str.w	r8, [r4]
 800a736:	e7e9      	b.n	800a70c <__submore+0x44>

0800a738 <_fstat_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	2300      	movs	r3, #0
 800a73c:	4d06      	ldr	r5, [pc, #24]	; (800a758 <_fstat_r+0x20>)
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	4611      	mov	r1, r2
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	f7f7 fe6f 	bl	8002428 <_fstat>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d102      	bne.n	800a754 <_fstat_r+0x1c>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	b103      	cbz	r3, 800a754 <_fstat_r+0x1c>
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	bd38      	pop	{r3, r4, r5, pc}
 800a756:	bf00      	nop
 800a758:	20000420 	.word	0x20000420

0800a75c <_isatty_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	2300      	movs	r3, #0
 800a760:	4d05      	ldr	r5, [pc, #20]	; (800a778 <_isatty_r+0x1c>)
 800a762:	4604      	mov	r4, r0
 800a764:	4608      	mov	r0, r1
 800a766:	602b      	str	r3, [r5, #0]
 800a768:	f7f7 fe6d 	bl	8002446 <_isatty>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_isatty_r+0x1a>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_isatty_r+0x1a>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	20000420 	.word	0x20000420

0800a77c <memchr>:
 800a77c:	4603      	mov	r3, r0
 800a77e:	b510      	push	{r4, lr}
 800a780:	b2c9      	uxtb	r1, r1
 800a782:	4402      	add	r2, r0
 800a784:	4293      	cmp	r3, r2
 800a786:	4618      	mov	r0, r3
 800a788:	d101      	bne.n	800a78e <memchr+0x12>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e003      	b.n	800a796 <memchr+0x1a>
 800a78e:	7804      	ldrb	r4, [r0, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	428c      	cmp	r4, r1
 800a794:	d1f6      	bne.n	800a784 <memchr+0x8>
 800a796:	bd10      	pop	{r4, pc}

0800a798 <memcpy>:
 800a798:	440a      	add	r2, r1
 800a79a:	4291      	cmp	r1, r2
 800a79c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7a0:	d100      	bne.n	800a7a4 <memcpy+0xc>
 800a7a2:	4770      	bx	lr
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7aa:	4291      	cmp	r1, r2
 800a7ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b0:	d1f9      	bne.n	800a7a6 <memcpy+0xe>
 800a7b2:	bd10      	pop	{r4, pc}

0800a7b4 <__malloc_lock>:
 800a7b4:	4801      	ldr	r0, [pc, #4]	; (800a7bc <__malloc_lock+0x8>)
 800a7b6:	f7fe befb 	b.w	80095b0 <__retarget_lock_acquire_recursive>
 800a7ba:	bf00      	nop
 800a7bc:	20000418 	.word	0x20000418

0800a7c0 <__malloc_unlock>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	; (800a7c8 <__malloc_unlock+0x8>)
 800a7c2:	f7fe bef6 	b.w	80095b2 <__retarget_lock_release_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20000418 	.word	0x20000418

0800a7cc <_realloc_r>:
 800a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	460e      	mov	r6, r1
 800a7d4:	b921      	cbnz	r1, 800a7e0 <_realloc_r+0x14>
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7dc:	f7fe bfac 	b.w	8009738 <_malloc_r>
 800a7e0:	b922      	cbnz	r2, 800a7ec <_realloc_r+0x20>
 800a7e2:	f7fe ff5d 	bl	80096a0 <_free_r>
 800a7e6:	4625      	mov	r5, r4
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ec:	f000 f814 	bl	800a818 <_malloc_usable_size_r>
 800a7f0:	42a0      	cmp	r0, r4
 800a7f2:	d20f      	bcs.n	800a814 <_realloc_r+0x48>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	f7fe ff9e 	bl	8009738 <_malloc_r>
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d0f2      	beq.n	800a7e8 <_realloc_r+0x1c>
 800a802:	4631      	mov	r1, r6
 800a804:	4622      	mov	r2, r4
 800a806:	f7ff ffc7 	bl	800a798 <memcpy>
 800a80a:	4631      	mov	r1, r6
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7fe ff47 	bl	80096a0 <_free_r>
 800a812:	e7e9      	b.n	800a7e8 <_realloc_r+0x1c>
 800a814:	4635      	mov	r5, r6
 800a816:	e7e7      	b.n	800a7e8 <_realloc_r+0x1c>

0800a818 <_malloc_usable_size_r>:
 800a818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81c:	1f18      	subs	r0, r3, #4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bfbc      	itt	lt
 800a822:	580b      	ldrlt	r3, [r1, r0]
 800a824:	18c0      	addlt	r0, r0, r3
 800a826:	4770      	bx	lr

0800a828 <rint>:
 800a828:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800a82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a82e:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800a832:	2f13      	cmp	r7, #19
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	460c      	mov	r4, r1
 800a83a:	4605      	mov	r5, r0
 800a83c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a840:	dc59      	bgt.n	800a8f6 <rint+0xce>
 800a842:	2f00      	cmp	r7, #0
 800a844:	da2a      	bge.n	800a89c <rint+0x74>
 800a846:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a84a:	4301      	orrs	r1, r0
 800a84c:	d022      	beq.n	800a894 <rint+0x6c>
 800a84e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a852:	4301      	orrs	r1, r0
 800a854:	424d      	negs	r5, r1
 800a856:	430d      	orrs	r5, r1
 800a858:	4936      	ldr	r1, [pc, #216]	; (800a934 <rint+0x10c>)
 800a85a:	0c5c      	lsrs	r4, r3, #17
 800a85c:	0b2d      	lsrs	r5, r5, #12
 800a85e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800a862:	0464      	lsls	r4, r4, #17
 800a864:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a868:	ea45 0304 	orr.w	r3, r5, r4
 800a86c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a870:	4620      	mov	r0, r4
 800a872:	4629      	mov	r1, r5
 800a874:	f7f5 fec4 	bl	8000600 <__adddf3>
 800a878:	e9cd 0100 	strd	r0, r1, [sp]
 800a87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a880:	462b      	mov	r3, r5
 800a882:	4622      	mov	r2, r4
 800a884:	f7f5 feba 	bl	80005fc <__aeabi_dsub>
 800a888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a88c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4610      	mov	r0, r2
 800a896:	4619      	mov	r1, r3
 800a898:	b003      	add	sp, #12
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	4926      	ldr	r1, [pc, #152]	; (800a938 <rint+0x110>)
 800a89e:	4139      	asrs	r1, r7
 800a8a0:	ea03 0001 	and.w	r0, r3, r1
 800a8a4:	4310      	orrs	r0, r2
 800a8a6:	d0f5      	beq.n	800a894 <rint+0x6c>
 800a8a8:	084b      	lsrs	r3, r1, #1
 800a8aa:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800a8ae:	ea52 0501 	orrs.w	r5, r2, r1
 800a8b2:	d00c      	beq.n	800a8ce <rint+0xa6>
 800a8b4:	ea24 0303 	bic.w	r3, r4, r3
 800a8b8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800a8bc:	2f13      	cmp	r7, #19
 800a8be:	bf0c      	ite	eq
 800a8c0:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800a8c4:	2500      	movne	r5, #0
 800a8c6:	fa44 f707 	asr.w	r7, r4, r7
 800a8ca:	ea43 0407 	orr.w	r4, r3, r7
 800a8ce:	4919      	ldr	r1, [pc, #100]	; (800a934 <rint+0x10c>)
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f5 fe8e 	bl	8000600 <__adddf3>
 800a8e4:	e9cd 0100 	strd	r0, r1, [sp]
 800a8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f7f5 fe84 	bl	80005fc <__aeabi_dsub>
 800a8f4:	e7cc      	b.n	800a890 <rint+0x68>
 800a8f6:	2f33      	cmp	r7, #51	; 0x33
 800a8f8:	dd05      	ble.n	800a906 <rint+0xde>
 800a8fa:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800a8fe:	d1c9      	bne.n	800a894 <rint+0x6c>
 800a900:	f7f5 fe7e 	bl	8000600 <__adddf3>
 800a904:	e7c4      	b.n	800a890 <rint+0x68>
 800a906:	f04f 31ff 	mov.w	r1, #4294967295
 800a90a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800a90e:	fa21 f10c 	lsr.w	r1, r1, ip
 800a912:	4208      	tst	r0, r1
 800a914:	d0be      	beq.n	800a894 <rint+0x6c>
 800a916:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800a91a:	bf18      	it	ne
 800a91c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800a920:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800a924:	bf1e      	ittt	ne
 800a926:	ea20 0303 	bicne.w	r3, r0, r3
 800a92a:	fa45 fc0c 	asrne.w	ip, r5, ip
 800a92e:	ea43 050c 	orrne.w	r5, r3, ip
 800a932:	e7cc      	b.n	800a8ce <rint+0xa6>
 800a934:	0800bd80 	.word	0x0800bd80
 800a938:	000fffff 	.word	0x000fffff

0800a93c <sinf>:
 800a93c:	b507      	push	{r0, r1, r2, lr}
 800a93e:	4a19      	ldr	r2, [pc, #100]	; (800a9a4 <sinf+0x68>)
 800a940:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a944:	4293      	cmp	r3, r2
 800a946:	4601      	mov	r1, r0
 800a948:	dc04      	bgt.n	800a954 <sinf+0x18>
 800a94a:	2200      	movs	r2, #0
 800a94c:	2100      	movs	r1, #0
 800a94e:	f000 fcbf 	bl	800b2d0 <__kernel_sinf>
 800a952:	e004      	b.n	800a95e <sinf+0x22>
 800a954:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a958:	db04      	blt.n	800a964 <sinf+0x28>
 800a95a:	f7f6 f87b 	bl	8000a54 <__aeabi_fsub>
 800a95e:	b003      	add	sp, #12
 800a960:	f85d fb04 	ldr.w	pc, [sp], #4
 800a964:	4669      	mov	r1, sp
 800a966:	f000 f81f 	bl	800a9a8 <__ieee754_rem_pio2f>
 800a96a:	f000 0003 	and.w	r0, r0, #3
 800a96e:	2801      	cmp	r0, #1
 800a970:	d006      	beq.n	800a980 <sinf+0x44>
 800a972:	2802      	cmp	r0, #2
 800a974:	d009      	beq.n	800a98a <sinf+0x4e>
 800a976:	b980      	cbnz	r0, 800a99a <sinf+0x5e>
 800a978:	2201      	movs	r2, #1
 800a97a:	9901      	ldr	r1, [sp, #4]
 800a97c:	9800      	ldr	r0, [sp, #0]
 800a97e:	e7e6      	b.n	800a94e <sinf+0x12>
 800a980:	9901      	ldr	r1, [sp, #4]
 800a982:	9800      	ldr	r0, [sp, #0]
 800a984:	f000 f96e 	bl	800ac64 <__kernel_cosf>
 800a988:	e7e9      	b.n	800a95e <sinf+0x22>
 800a98a:	2201      	movs	r2, #1
 800a98c:	9901      	ldr	r1, [sp, #4]
 800a98e:	9800      	ldr	r0, [sp, #0]
 800a990:	f000 fc9e 	bl	800b2d0 <__kernel_sinf>
 800a994:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a998:	e7e1      	b.n	800a95e <sinf+0x22>
 800a99a:	9901      	ldr	r1, [sp, #4]
 800a99c:	9800      	ldr	r0, [sp, #0]
 800a99e:	f000 f961 	bl	800ac64 <__kernel_cosf>
 800a9a2:	e7f7      	b.n	800a994 <sinf+0x58>
 800a9a4:	3f490fd8 	.word	0x3f490fd8

0800a9a8 <__ieee754_rem_pio2f>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	4aa0      	ldr	r2, [pc, #640]	; (800ac30 <__ieee754_rem_pio2f+0x288>)
 800a9ae:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a9b2:	4296      	cmp	r6, r2
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	4682      	mov	sl, r0
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	dc04      	bgt.n	800a9c6 <__ieee754_rem_pio2f+0x1e>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6008      	str	r0, [r1, #0]
 800a9c0:	604b      	str	r3, [r1, #4]
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	e01a      	b.n	800a9fc <__ieee754_rem_pio2f+0x54>
 800a9c6:	4a9b      	ldr	r2, [pc, #620]	; (800ac34 <__ieee754_rem_pio2f+0x28c>)
 800a9c8:	4296      	cmp	r6, r2
 800a9ca:	dc4b      	bgt.n	800aa64 <__ieee754_rem_pio2f+0xbc>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	499a      	ldr	r1, [pc, #616]	; (800ac38 <__ieee754_rem_pio2f+0x290>)
 800a9d0:	4f9a      	ldr	r7, [pc, #616]	; (800ac3c <__ieee754_rem_pio2f+0x294>)
 800a9d2:	f026 060f 	bic.w	r6, r6, #15
 800a9d6:	dd23      	ble.n	800aa20 <__ieee754_rem_pio2f+0x78>
 800a9d8:	f7f6 f83c 	bl	8000a54 <__aeabi_fsub>
 800a9dc:	42be      	cmp	r6, r7
 800a9de:	4605      	mov	r5, r0
 800a9e0:	d010      	beq.n	800aa04 <__ieee754_rem_pio2f+0x5c>
 800a9e2:	4997      	ldr	r1, [pc, #604]	; (800ac40 <__ieee754_rem_pio2f+0x298>)
 800a9e4:	f7f6 f836 	bl	8000a54 <__aeabi_fsub>
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	6020      	str	r0, [r4, #0]
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f7f6 f831 	bl	8000a54 <__aeabi_fsub>
 800a9f2:	4993      	ldr	r1, [pc, #588]	; (800ac40 <__ieee754_rem_pio2f+0x298>)
 800a9f4:	f7f6 f82e 	bl	8000a54 <__aeabi_fsub>
 800a9f8:	2501      	movs	r5, #1
 800a9fa:	6060      	str	r0, [r4, #4]
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	b007      	add	sp, #28
 800aa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa04:	498f      	ldr	r1, [pc, #572]	; (800ac44 <__ieee754_rem_pio2f+0x29c>)
 800aa06:	f7f6 f825 	bl	8000a54 <__aeabi_fsub>
 800aa0a:	498f      	ldr	r1, [pc, #572]	; (800ac48 <__ieee754_rem_pio2f+0x2a0>)
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	f7f6 f821 	bl	8000a54 <__aeabi_fsub>
 800aa12:	4601      	mov	r1, r0
 800aa14:	6020      	str	r0, [r4, #0]
 800aa16:	4628      	mov	r0, r5
 800aa18:	f7f6 f81c 	bl	8000a54 <__aeabi_fsub>
 800aa1c:	498a      	ldr	r1, [pc, #552]	; (800ac48 <__ieee754_rem_pio2f+0x2a0>)
 800aa1e:	e7e9      	b.n	800a9f4 <__ieee754_rem_pio2f+0x4c>
 800aa20:	f7f6 f81a 	bl	8000a58 <__addsf3>
 800aa24:	42be      	cmp	r6, r7
 800aa26:	4605      	mov	r5, r0
 800aa28:	d00e      	beq.n	800aa48 <__ieee754_rem_pio2f+0xa0>
 800aa2a:	4985      	ldr	r1, [pc, #532]	; (800ac40 <__ieee754_rem_pio2f+0x298>)
 800aa2c:	f7f6 f814 	bl	8000a58 <__addsf3>
 800aa30:	4601      	mov	r1, r0
 800aa32:	6020      	str	r0, [r4, #0]
 800aa34:	4628      	mov	r0, r5
 800aa36:	f7f6 f80d 	bl	8000a54 <__aeabi_fsub>
 800aa3a:	4981      	ldr	r1, [pc, #516]	; (800ac40 <__ieee754_rem_pio2f+0x298>)
 800aa3c:	f7f6 f80c 	bl	8000a58 <__addsf3>
 800aa40:	f04f 35ff 	mov.w	r5, #4294967295
 800aa44:	6060      	str	r0, [r4, #4]
 800aa46:	e7d9      	b.n	800a9fc <__ieee754_rem_pio2f+0x54>
 800aa48:	497e      	ldr	r1, [pc, #504]	; (800ac44 <__ieee754_rem_pio2f+0x29c>)
 800aa4a:	f7f6 f805 	bl	8000a58 <__addsf3>
 800aa4e:	497e      	ldr	r1, [pc, #504]	; (800ac48 <__ieee754_rem_pio2f+0x2a0>)
 800aa50:	4605      	mov	r5, r0
 800aa52:	f7f6 f801 	bl	8000a58 <__addsf3>
 800aa56:	4601      	mov	r1, r0
 800aa58:	6020      	str	r0, [r4, #0]
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f7f5 fffa 	bl	8000a54 <__aeabi_fsub>
 800aa60:	4979      	ldr	r1, [pc, #484]	; (800ac48 <__ieee754_rem_pio2f+0x2a0>)
 800aa62:	e7eb      	b.n	800aa3c <__ieee754_rem_pio2f+0x94>
 800aa64:	4a79      	ldr	r2, [pc, #484]	; (800ac4c <__ieee754_rem_pio2f+0x2a4>)
 800aa66:	4296      	cmp	r6, r2
 800aa68:	f300 8091 	bgt.w	800ab8e <__ieee754_rem_pio2f+0x1e6>
 800aa6c:	f000 fca6 	bl	800b3bc <fabsf>
 800aa70:	4977      	ldr	r1, [pc, #476]	; (800ac50 <__ieee754_rem_pio2f+0x2a8>)
 800aa72:	4607      	mov	r7, r0
 800aa74:	f7f5 fd0a 	bl	800048c <__aeabi_fmul>
 800aa78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800aa7c:	f7f5 ffec 	bl	8000a58 <__addsf3>
 800aa80:	f7f6 f968 	bl	8000d54 <__aeabi_f2iz>
 800aa84:	4605      	mov	r5, r0
 800aa86:	f7f6 f89b 	bl	8000bc0 <__aeabi_i2f>
 800aa8a:	496b      	ldr	r1, [pc, #428]	; (800ac38 <__ieee754_rem_pio2f+0x290>)
 800aa8c:	4681      	mov	r9, r0
 800aa8e:	f7f5 fcfd 	bl	800048c <__aeabi_fmul>
 800aa92:	4601      	mov	r1, r0
 800aa94:	4638      	mov	r0, r7
 800aa96:	f7f5 ffdd 	bl	8000a54 <__aeabi_fsub>
 800aa9a:	4969      	ldr	r1, [pc, #420]	; (800ac40 <__ieee754_rem_pio2f+0x298>)
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	4648      	mov	r0, r9
 800aaa0:	f7f5 fcf4 	bl	800048c <__aeabi_fmul>
 800aaa4:	2d1f      	cmp	r5, #31
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	dc0c      	bgt.n	800aac4 <__ieee754_rem_pio2f+0x11c>
 800aaaa:	4a6a      	ldr	r2, [pc, #424]	; (800ac54 <__ieee754_rem_pio2f+0x2ac>)
 800aaac:	1e69      	subs	r1, r5, #1
 800aaae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aab2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d004      	beq.n	800aac4 <__ieee754_rem_pio2f+0x11c>
 800aaba:	4639      	mov	r1, r7
 800aabc:	4640      	mov	r0, r8
 800aabe:	f7f5 ffc9 	bl	8000a54 <__aeabi_fsub>
 800aac2:	e00b      	b.n	800aadc <__ieee754_rem_pio2f+0x134>
 800aac4:	4639      	mov	r1, r7
 800aac6:	4640      	mov	r0, r8
 800aac8:	f7f5 ffc4 	bl	8000a54 <__aeabi_fsub>
 800aacc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aad0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800aad4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800aad8:	2e08      	cmp	r6, #8
 800aada:	dc01      	bgt.n	800aae0 <__ieee754_rem_pio2f+0x138>
 800aadc:	6020      	str	r0, [r4, #0]
 800aade:	e026      	b.n	800ab2e <__ieee754_rem_pio2f+0x186>
 800aae0:	4958      	ldr	r1, [pc, #352]	; (800ac44 <__ieee754_rem_pio2f+0x29c>)
 800aae2:	4648      	mov	r0, r9
 800aae4:	f7f5 fcd2 	bl	800048c <__aeabi_fmul>
 800aae8:	4607      	mov	r7, r0
 800aaea:	4601      	mov	r1, r0
 800aaec:	4640      	mov	r0, r8
 800aaee:	f7f5 ffb1 	bl	8000a54 <__aeabi_fsub>
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f7f5 ffac 	bl	8000a54 <__aeabi_fsub>
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 ffa9 	bl	8000a54 <__aeabi_fsub>
 800ab02:	4607      	mov	r7, r0
 800ab04:	4950      	ldr	r1, [pc, #320]	; (800ac48 <__ieee754_rem_pio2f+0x2a0>)
 800ab06:	4648      	mov	r0, r9
 800ab08:	f7f5 fcc0 	bl	800048c <__aeabi_fmul>
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	f7f5 ffa1 	bl	8000a54 <__aeabi_fsub>
 800ab12:	4601      	mov	r1, r0
 800ab14:	4607      	mov	r7, r0
 800ab16:	4630      	mov	r0, r6
 800ab18:	f7f5 ff9c 	bl	8000a54 <__aeabi_fsub>
 800ab1c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab20:	ebab 0b03 	sub.w	fp, fp, r3
 800ab24:	f1bb 0f19 	cmp.w	fp, #25
 800ab28:	dc16      	bgt.n	800ab58 <__ieee754_rem_pio2f+0x1b0>
 800ab2a:	46b0      	mov	r8, r6
 800ab2c:	6020      	str	r0, [r4, #0]
 800ab2e:	6826      	ldr	r6, [r4, #0]
 800ab30:	4640      	mov	r0, r8
 800ab32:	4631      	mov	r1, r6
 800ab34:	f7f5 ff8e 	bl	8000a54 <__aeabi_fsub>
 800ab38:	4639      	mov	r1, r7
 800ab3a:	f7f5 ff8b 	bl	8000a54 <__aeabi_fsub>
 800ab3e:	f1ba 0f00 	cmp.w	sl, #0
 800ab42:	6060      	str	r0, [r4, #4]
 800ab44:	f6bf af5a 	bge.w	800a9fc <__ieee754_rem_pio2f+0x54>
 800ab48:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ab4c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ab50:	6026      	str	r6, [r4, #0]
 800ab52:	6060      	str	r0, [r4, #4]
 800ab54:	426d      	negs	r5, r5
 800ab56:	e751      	b.n	800a9fc <__ieee754_rem_pio2f+0x54>
 800ab58:	493f      	ldr	r1, [pc, #252]	; (800ac58 <__ieee754_rem_pio2f+0x2b0>)
 800ab5a:	4648      	mov	r0, r9
 800ab5c:	f7f5 fc96 	bl	800048c <__aeabi_fmul>
 800ab60:	4607      	mov	r7, r0
 800ab62:	4601      	mov	r1, r0
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7f5 ff75 	bl	8000a54 <__aeabi_fsub>
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7f5 ff70 	bl	8000a54 <__aeabi_fsub>
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 ff6d 	bl	8000a54 <__aeabi_fsub>
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	4937      	ldr	r1, [pc, #220]	; (800ac5c <__ieee754_rem_pio2f+0x2b4>)
 800ab7e:	4648      	mov	r0, r9
 800ab80:	f7f5 fc84 	bl	800048c <__aeabi_fmul>
 800ab84:	4631      	mov	r1, r6
 800ab86:	f7f5 ff65 	bl	8000a54 <__aeabi_fsub>
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	e795      	b.n	800aaba <__ieee754_rem_pio2f+0x112>
 800ab8e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ab92:	db05      	blt.n	800aba0 <__ieee754_rem_pio2f+0x1f8>
 800ab94:	4601      	mov	r1, r0
 800ab96:	f7f5 ff5d 	bl	8000a54 <__aeabi_fsub>
 800ab9a:	6060      	str	r0, [r4, #4]
 800ab9c:	6020      	str	r0, [r4, #0]
 800ab9e:	e710      	b.n	800a9c2 <__ieee754_rem_pio2f+0x1a>
 800aba0:	15f7      	asrs	r7, r6, #23
 800aba2:	3f86      	subs	r7, #134	; 0x86
 800aba4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7f6 f8d3 	bl	8000d54 <__aeabi_f2iz>
 800abae:	f7f6 f807 	bl	8000bc0 <__aeabi_i2f>
 800abb2:	4601      	mov	r1, r0
 800abb4:	9003      	str	r0, [sp, #12]
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7f5 ff4c 	bl	8000a54 <__aeabi_fsub>
 800abbc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800abc0:	f7f5 fc64 	bl	800048c <__aeabi_fmul>
 800abc4:	4606      	mov	r6, r0
 800abc6:	f7f6 f8c5 	bl	8000d54 <__aeabi_f2iz>
 800abca:	f7f5 fff9 	bl	8000bc0 <__aeabi_i2f>
 800abce:	4601      	mov	r1, r0
 800abd0:	9004      	str	r0, [sp, #16]
 800abd2:	4605      	mov	r5, r0
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7f5 ff3d 	bl	8000a54 <__aeabi_fsub>
 800abda:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800abde:	f7f5 fc55 	bl	800048c <__aeabi_fmul>
 800abe2:	2100      	movs	r1, #0
 800abe4:	9005      	str	r0, [sp, #20]
 800abe6:	f7f6 f883 	bl	8000cf0 <__aeabi_fcmpeq>
 800abea:	b1f0      	cbz	r0, 800ac2a <__ieee754_rem_pio2f+0x282>
 800abec:	2100      	movs	r1, #0
 800abee:	4628      	mov	r0, r5
 800abf0:	f7f6 f87e 	bl	8000cf0 <__aeabi_fcmpeq>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	bf14      	ite	ne
 800abf8:	2301      	movne	r3, #1
 800abfa:	2302      	moveq	r3, #2
 800abfc:	4a18      	ldr	r2, [pc, #96]	; (800ac60 <__ieee754_rem_pio2f+0x2b8>)
 800abfe:	4621      	mov	r1, r4
 800ac00:	9201      	str	r2, [sp, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	a803      	add	r0, sp, #12
 800ac06:	9200      	str	r2, [sp, #0]
 800ac08:	463a      	mov	r2, r7
 800ac0a:	f000 f8ab 	bl	800ad64 <__kernel_rem_pio2f>
 800ac0e:	f1ba 0f00 	cmp.w	sl, #0
 800ac12:	4605      	mov	r5, r0
 800ac14:	f6bf aef2 	bge.w	800a9fc <__ieee754_rem_pio2f+0x54>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	e794      	b.n	800ab54 <__ieee754_rem_pio2f+0x1ac>
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e7e6      	b.n	800abfc <__ieee754_rem_pio2f+0x254>
 800ac2e:	bf00      	nop
 800ac30:	3f490fd8 	.word	0x3f490fd8
 800ac34:	4016cbe3 	.word	0x4016cbe3
 800ac38:	3fc90f80 	.word	0x3fc90f80
 800ac3c:	3fc90fd0 	.word	0x3fc90fd0
 800ac40:	37354443 	.word	0x37354443
 800ac44:	37354400 	.word	0x37354400
 800ac48:	2e85a308 	.word	0x2e85a308
 800ac4c:	43490f80 	.word	0x43490f80
 800ac50:	3f22f984 	.word	0x3f22f984
 800ac54:	0800bd90 	.word	0x0800bd90
 800ac58:	2e85a300 	.word	0x2e85a300
 800ac5c:	248d3132 	.word	0x248d3132
 800ac60:	0800be10 	.word	0x0800be10

0800ac64 <__kernel_cosf>:
 800ac64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac68:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800ac6c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ac70:	4606      	mov	r6, r0
 800ac72:	4688      	mov	r8, r1
 800ac74:	da03      	bge.n	800ac7e <__kernel_cosf+0x1a>
 800ac76:	f7f6 f86d 	bl	8000d54 <__aeabi_f2iz>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d05c      	beq.n	800ad38 <__kernel_cosf+0xd4>
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7f5 fc03 	bl	800048c <__aeabi_fmul>
 800ac86:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	f7f5 fbfe 	bl	800048c <__aeabi_fmul>
 800ac90:	492b      	ldr	r1, [pc, #172]	; (800ad40 <__kernel_cosf+0xdc>)
 800ac92:	4607      	mov	r7, r0
 800ac94:	4628      	mov	r0, r5
 800ac96:	f7f5 fbf9 	bl	800048c <__aeabi_fmul>
 800ac9a:	492a      	ldr	r1, [pc, #168]	; (800ad44 <__kernel_cosf+0xe0>)
 800ac9c:	f7f5 fedc 	bl	8000a58 <__addsf3>
 800aca0:	4629      	mov	r1, r5
 800aca2:	f7f5 fbf3 	bl	800048c <__aeabi_fmul>
 800aca6:	4928      	ldr	r1, [pc, #160]	; (800ad48 <__kernel_cosf+0xe4>)
 800aca8:	f7f5 fed4 	bl	8000a54 <__aeabi_fsub>
 800acac:	4629      	mov	r1, r5
 800acae:	f7f5 fbed 	bl	800048c <__aeabi_fmul>
 800acb2:	4926      	ldr	r1, [pc, #152]	; (800ad4c <__kernel_cosf+0xe8>)
 800acb4:	f7f5 fed0 	bl	8000a58 <__addsf3>
 800acb8:	4629      	mov	r1, r5
 800acba:	f7f5 fbe7 	bl	800048c <__aeabi_fmul>
 800acbe:	4924      	ldr	r1, [pc, #144]	; (800ad50 <__kernel_cosf+0xec>)
 800acc0:	f7f5 fec8 	bl	8000a54 <__aeabi_fsub>
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7f5 fbe1 	bl	800048c <__aeabi_fmul>
 800acca:	4922      	ldr	r1, [pc, #136]	; (800ad54 <__kernel_cosf+0xf0>)
 800accc:	f7f5 fec4 	bl	8000a58 <__addsf3>
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 fbdb 	bl	800048c <__aeabi_fmul>
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 fbd8 	bl	800048c <__aeabi_fmul>
 800acdc:	4641      	mov	r1, r8
 800acde:	4605      	mov	r5, r0
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7f5 fbd3 	bl	800048c <__aeabi_fmul>
 800ace6:	4601      	mov	r1, r0
 800ace8:	4628      	mov	r0, r5
 800acea:	f7f5 feb3 	bl	8000a54 <__aeabi_fsub>
 800acee:	4b1a      	ldr	r3, [pc, #104]	; (800ad58 <__kernel_cosf+0xf4>)
 800acf0:	4605      	mov	r5, r0
 800acf2:	429c      	cmp	r4, r3
 800acf4:	dc0a      	bgt.n	800ad0c <__kernel_cosf+0xa8>
 800acf6:	4601      	mov	r1, r0
 800acf8:	4638      	mov	r0, r7
 800acfa:	f7f5 feab 	bl	8000a54 <__aeabi_fsub>
 800acfe:	4601      	mov	r1, r0
 800ad00:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad04:	f7f5 fea6 	bl	8000a54 <__aeabi_fsub>
 800ad08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad0c:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <__kernel_cosf+0xf8>)
 800ad0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad12:	429c      	cmp	r4, r3
 800ad14:	bfcc      	ite	gt
 800ad16:	4c12      	ldrgt	r4, [pc, #72]	; (800ad60 <__kernel_cosf+0xfc>)
 800ad18:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	f7f5 fe99 	bl	8000a54 <__aeabi_fsub>
 800ad22:	4621      	mov	r1, r4
 800ad24:	4606      	mov	r6, r0
 800ad26:	4638      	mov	r0, r7
 800ad28:	f7f5 fe94 	bl	8000a54 <__aeabi_fsub>
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7f5 fe91 	bl	8000a54 <__aeabi_fsub>
 800ad32:	4601      	mov	r1, r0
 800ad34:	4630      	mov	r0, r6
 800ad36:	e7e5      	b.n	800ad04 <__kernel_cosf+0xa0>
 800ad38:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad3c:	e7e4      	b.n	800ad08 <__kernel_cosf+0xa4>
 800ad3e:	bf00      	nop
 800ad40:	ad47d74e 	.word	0xad47d74e
 800ad44:	310f74f6 	.word	0x310f74f6
 800ad48:	3493f27c 	.word	0x3493f27c
 800ad4c:	37d00d01 	.word	0x37d00d01
 800ad50:	3ab60b61 	.word	0x3ab60b61
 800ad54:	3d2aaaab 	.word	0x3d2aaaab
 800ad58:	3e999999 	.word	0x3e999999
 800ad5c:	3f480000 	.word	0x3f480000
 800ad60:	3e900000 	.word	0x3e900000

0800ad64 <__kernel_rem_pio2f>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	b0db      	sub	sp, #364	; 0x16c
 800ad6a:	9202      	str	r2, [sp, #8]
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ad70:	4bc5      	ldr	r3, [pc, #788]	; (800b088 <__kernel_rem_pio2f+0x324>)
 800ad72:	9005      	str	r0, [sp, #20]
 800ad74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad78:	9100      	str	r1, [sp, #0]
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	9b02      	ldr	r3, [sp, #8]
 800ad84:	1d1a      	adds	r2, r3, #4
 800ad86:	f2c0 809b 	blt.w	800aec0 <__kernel_rem_pio2f+0x15c>
 800ad8a:	1edc      	subs	r4, r3, #3
 800ad8c:	bf48      	it	mi
 800ad8e:	1d1c      	addmi	r4, r3, #4
 800ad90:	10e4      	asrs	r4, r4, #3
 800ad92:	2500      	movs	r5, #0
 800ad94:	f04f 0a00 	mov.w	sl, #0
 800ad98:	1c67      	adds	r7, r4, #1
 800ad9a:	00fb      	lsls	r3, r7, #3
 800ad9c:	9306      	str	r3, [sp, #24]
 800ad9e:	9b02      	ldr	r3, [sp, #8]
 800ada0:	9a03      	ldr	r2, [sp, #12]
 800ada2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	1aa6      	subs	r6, r4, r2
 800adaa:	eb03 0802 	add.w	r8, r3, r2
 800adae:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800adb0:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800adb4:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800adb8:	4545      	cmp	r5, r8
 800adba:	f340 8083 	ble.w	800aec4 <__kernel_rem_pio2f+0x160>
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	f04f 0b00 	mov.w	fp, #0
 800adc6:	9b04      	ldr	r3, [sp, #16]
 800adc8:	aa1e      	add	r2, sp, #120	; 0x78
 800adca:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800adce:	ab46      	add	r3, sp, #280	; 0x118
 800add0:	9a01      	ldr	r2, [sp, #4]
 800add2:	4590      	cmp	r8, r2
 800add4:	f340 809c 	ble.w	800af10 <__kernel_rem_pio2f+0x1ac>
 800add8:	4613      	mov	r3, r2
 800adda:	aa0a      	add	r2, sp, #40	; 0x28
 800addc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ade0:	9308      	str	r3, [sp, #32]
 800ade2:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ade4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ade8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adec:	9307      	str	r3, [sp, #28]
 800adee:	ad0a      	add	r5, sp, #40	; 0x28
 800adf0:	462e      	mov	r6, r5
 800adf2:	46c3      	mov	fp, r8
 800adf4:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800adf8:	ab5a      	add	r3, sp, #360	; 0x168
 800adfa:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800adfe:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ae02:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800ae06:	f1bb 0f00 	cmp.w	fp, #0
 800ae0a:	f300 8086 	bgt.w	800af1a <__kernel_rem_pio2f+0x1b6>
 800ae0e:	4639      	mov	r1, r7
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fb19 	bl	800b448 <scalbnf>
 800ae16:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	f7f5 fb36 	bl	800048c <__aeabi_fmul>
 800ae20:	f000 fad0 	bl	800b3c4 <floorf>
 800ae24:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ae28:	f7f5 fb30 	bl	800048c <__aeabi_fmul>
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7f5 fe10 	bl	8000a54 <__aeabi_fsub>
 800ae34:	4604      	mov	r4, r0
 800ae36:	f7f5 ff8d 	bl	8000d54 <__aeabi_f2iz>
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	f7f5 fec0 	bl	8000bc0 <__aeabi_i2f>
 800ae40:	4601      	mov	r1, r0
 800ae42:	4620      	mov	r0, r4
 800ae44:	f7f5 fe06 	bl	8000a54 <__aeabi_fsub>
 800ae48:	2f00      	cmp	r7, #0
 800ae4a:	4681      	mov	r9, r0
 800ae4c:	f340 8084 	ble.w	800af58 <__kernel_rem_pio2f+0x1f4>
 800ae50:	f108 32ff 	add.w	r2, r8, #4294967295
 800ae54:	ab0a      	add	r3, sp, #40	; 0x28
 800ae56:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800ae5a:	f1c7 0108 	rsb	r1, r7, #8
 800ae5e:	fa44 f301 	asr.w	r3, r4, r1
 800ae62:	441e      	add	r6, r3
 800ae64:	408b      	lsls	r3, r1
 800ae66:	1ae4      	subs	r4, r4, r3
 800ae68:	f1c7 0007 	rsb	r0, r7, #7
 800ae6c:	ab0a      	add	r3, sp, #40	; 0x28
 800ae6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae72:	4104      	asrs	r4, r0
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	dd7e      	ble.n	800af76 <__kernel_rem_pio2f+0x212>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	4692      	mov	sl, r2
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	4590      	cmp	r8, r2
 800ae80:	f300 80b0 	bgt.w	800afe4 <__kernel_rem_pio2f+0x280>
 800ae84:	2f00      	cmp	r7, #0
 800ae86:	dd05      	ble.n	800ae94 <__kernel_rem_pio2f+0x130>
 800ae88:	2f01      	cmp	r7, #1
 800ae8a:	f000 80bd 	beq.w	800b008 <__kernel_rem_pio2f+0x2a4>
 800ae8e:	2f02      	cmp	r7, #2
 800ae90:	f000 80c5 	beq.w	800b01e <__kernel_rem_pio2f+0x2ba>
 800ae94:	2c02      	cmp	r4, #2
 800ae96:	d16e      	bne.n	800af76 <__kernel_rem_pio2f+0x212>
 800ae98:	4649      	mov	r1, r9
 800ae9a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ae9e:	f7f5 fdd9 	bl	8000a54 <__aeabi_fsub>
 800aea2:	4681      	mov	r9, r0
 800aea4:	f1ba 0f00 	cmp.w	sl, #0
 800aea8:	d065      	beq.n	800af76 <__kernel_rem_pio2f+0x212>
 800aeaa:	4639      	mov	r1, r7
 800aeac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aeb0:	f000 faca 	bl	800b448 <scalbnf>
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f7f5 fdcc 	bl	8000a54 <__aeabi_fsub>
 800aebc:	4681      	mov	r9, r0
 800aebe:	e05a      	b.n	800af76 <__kernel_rem_pio2f+0x212>
 800aec0:	2400      	movs	r4, #0
 800aec2:	e766      	b.n	800ad92 <__kernel_rem_pio2f+0x2e>
 800aec4:	42ee      	cmn	r6, r5
 800aec6:	d407      	bmi.n	800aed8 <__kernel_rem_pio2f+0x174>
 800aec8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aecc:	f7f5 fe78 	bl	8000bc0 <__aeabi_i2f>
 800aed0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800aed4:	3501      	adds	r5, #1
 800aed6:	e76f      	b.n	800adb8 <__kernel_rem_pio2f+0x54>
 800aed8:	4650      	mov	r0, sl
 800aeda:	e7f9      	b.n	800aed0 <__kernel_rem_pio2f+0x16c>
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	f8da 1000 	ldr.w	r1, [sl]
 800aee2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800aee6:	f7f5 fad1 	bl	800048c <__aeabi_fmul>
 800aeea:	4601      	mov	r1, r0
 800aeec:	4630      	mov	r0, r6
 800aeee:	f7f5 fdb3 	bl	8000a58 <__addsf3>
 800aef2:	4606      	mov	r6, r0
 800aef4:	f109 0901 	add.w	r9, r9, #1
 800aef8:	ab46      	add	r3, sp, #280	; 0x118
 800aefa:	9a03      	ldr	r2, [sp, #12]
 800aefc:	f1aa 0a04 	sub.w	sl, sl, #4
 800af00:	4591      	cmp	r9, r2
 800af02:	ddeb      	ble.n	800aedc <__kernel_rem_pio2f+0x178>
 800af04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800af08:	3504      	adds	r5, #4
 800af0a:	f108 0801 	add.w	r8, r8, #1
 800af0e:	e75f      	b.n	800add0 <__kernel_rem_pio2f+0x6c>
 800af10:	46aa      	mov	sl, r5
 800af12:	465e      	mov	r6, fp
 800af14:	f04f 0900 	mov.w	r9, #0
 800af18:	e7ef      	b.n	800aefa <__kernel_rem_pio2f+0x196>
 800af1a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800af1e:	4620      	mov	r0, r4
 800af20:	f7f5 fab4 	bl	800048c <__aeabi_fmul>
 800af24:	f7f5 ff16 	bl	8000d54 <__aeabi_f2iz>
 800af28:	f7f5 fe4a 	bl	8000bc0 <__aeabi_i2f>
 800af2c:	4649      	mov	r1, r9
 800af2e:	9009      	str	r0, [sp, #36]	; 0x24
 800af30:	f7f5 faac 	bl	800048c <__aeabi_fmul>
 800af34:	4601      	mov	r1, r0
 800af36:	4620      	mov	r0, r4
 800af38:	f7f5 fd8c 	bl	8000a54 <__aeabi_fsub>
 800af3c:	f7f5 ff0a 	bl	8000d54 <__aeabi_f2iz>
 800af40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af46:	f846 0b04 	str.w	r0, [r6], #4
 800af4a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f5 fd82 	bl	8000a58 <__addsf3>
 800af54:	4604      	mov	r4, r0
 800af56:	e756      	b.n	800ae06 <__kernel_rem_pio2f+0xa2>
 800af58:	d106      	bne.n	800af68 <__kernel_rem_pio2f+0x204>
 800af5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800af5e:	aa0a      	add	r2, sp, #40	; 0x28
 800af60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af64:	1224      	asrs	r4, r4, #8
 800af66:	e785      	b.n	800ae74 <__kernel_rem_pio2f+0x110>
 800af68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800af6c:	f7f5 fede 	bl	8000d2c <__aeabi_fcmpge>
 800af70:	4604      	mov	r4, r0
 800af72:	2800      	cmp	r0, #0
 800af74:	d134      	bne.n	800afe0 <__kernel_rem_pio2f+0x27c>
 800af76:	2100      	movs	r1, #0
 800af78:	4648      	mov	r0, r9
 800af7a:	f7f5 feb9 	bl	8000cf0 <__aeabi_fcmpeq>
 800af7e:	2800      	cmp	r0, #0
 800af80:	f000 809a 	beq.w	800b0b8 <__kernel_rem_pio2f+0x354>
 800af84:	f108 35ff 	add.w	r5, r8, #4294967295
 800af88:	462b      	mov	r3, r5
 800af8a:	2200      	movs	r2, #0
 800af8c:	9901      	ldr	r1, [sp, #4]
 800af8e:	428b      	cmp	r3, r1
 800af90:	da4d      	bge.n	800b02e <__kernel_rem_pio2f+0x2ca>
 800af92:	2a00      	cmp	r2, #0
 800af94:	d07c      	beq.n	800b090 <__kernel_rem_pio2f+0x32c>
 800af96:	ab0a      	add	r3, sp, #40	; 0x28
 800af98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800af9c:	3f08      	subs	r7, #8
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8088 	beq.w	800b0b4 <__kernel_rem_pio2f+0x350>
 800afa4:	4639      	mov	r1, r7
 800afa6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800afaa:	f000 fa4d 	bl	800b448 <scalbnf>
 800afae:	46aa      	mov	sl, r5
 800afb0:	4681      	mov	r9, r0
 800afb2:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800afb6:	af46      	add	r7, sp, #280	; 0x118
 800afb8:	f1ba 0f00 	cmp.w	sl, #0
 800afbc:	f280 80b1 	bge.w	800b122 <__kernel_rem_pio2f+0x3be>
 800afc0:	46a9      	mov	r9, r5
 800afc2:	f04f 0a00 	mov.w	sl, #0
 800afc6:	2200      	movs	r2, #0
 800afc8:	f1b9 0f00 	cmp.w	r9, #0
 800afcc:	f2c0 80db 	blt.w	800b186 <__kernel_rem_pio2f+0x422>
 800afd0:	a946      	add	r1, sp, #280	; 0x118
 800afd2:	4617      	mov	r7, r2
 800afd4:	f04f 0800 	mov.w	r8, #0
 800afd8:	4b2c      	ldr	r3, [pc, #176]	; (800b08c <__kernel_rem_pio2f+0x328>)
 800afda:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800afde:	e0c3      	b.n	800b168 <__kernel_rem_pio2f+0x404>
 800afe0:	2402      	movs	r4, #2
 800afe2:	e749      	b.n	800ae78 <__kernel_rem_pio2f+0x114>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	f1ba 0f00 	cmp.w	sl, #0
 800afea:	d108      	bne.n	800affe <__kernel_rem_pio2f+0x29a>
 800afec:	b11b      	cbz	r3, 800aff6 <__kernel_rem_pio2f+0x292>
 800afee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800aff2:	602b      	str	r3, [r5, #0]
 800aff4:	2301      	movs	r3, #1
 800aff6:	469a      	mov	sl, r3
 800aff8:	3201      	adds	r2, #1
 800affa:	3504      	adds	r5, #4
 800affc:	e73f      	b.n	800ae7e <__kernel_rem_pio2f+0x11a>
 800affe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	4653      	mov	r3, sl
 800b006:	e7f6      	b.n	800aff6 <__kernel_rem_pio2f+0x292>
 800b008:	f108 32ff 	add.w	r2, r8, #4294967295
 800b00c:	ab0a      	add	r3, sp, #40	; 0x28
 800b00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b016:	a90a      	add	r1, sp, #40	; 0x28
 800b018:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b01c:	e73a      	b.n	800ae94 <__kernel_rem_pio2f+0x130>
 800b01e:	f108 32ff 	add.w	r2, r8, #4294967295
 800b022:	ab0a      	add	r3, sp, #40	; 0x28
 800b024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b02c:	e7f3      	b.n	800b016 <__kernel_rem_pio2f+0x2b2>
 800b02e:	a90a      	add	r1, sp, #40	; 0x28
 800b030:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b034:	3b01      	subs	r3, #1
 800b036:	430a      	orrs	r2, r1
 800b038:	e7a8      	b.n	800af8c <__kernel_rem_pio2f+0x228>
 800b03a:	3301      	adds	r3, #1
 800b03c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b040:	2900      	cmp	r1, #0
 800b042:	d0fa      	beq.n	800b03a <__kernel_rem_pio2f+0x2d6>
 800b044:	9a04      	ldr	r2, [sp, #16]
 800b046:	f108 0501 	add.w	r5, r8, #1
 800b04a:	eb08 0402 	add.w	r4, r8, r2
 800b04e:	aa1e      	add	r2, sp, #120	; 0x78
 800b050:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b054:	4498      	add	r8, r3
 800b056:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800b05a:	45a8      	cmp	r8, r5
 800b05c:	f6ff aec7 	blt.w	800adee <__kernel_rem_pio2f+0x8a>
 800b060:	9b07      	ldr	r3, [sp, #28]
 800b062:	46a3      	mov	fp, r4
 800b064:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b068:	f7f5 fdaa 	bl	8000bc0 <__aeabi_i2f>
 800b06c:	f04f 0a00 	mov.w	sl, #0
 800b070:	2600      	movs	r6, #0
 800b072:	f84b 0b04 	str.w	r0, [fp], #4
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	459a      	cmp	sl, r3
 800b07a:	dd0c      	ble.n	800b096 <__kernel_rem_pio2f+0x332>
 800b07c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800b080:	465c      	mov	r4, fp
 800b082:	3501      	adds	r5, #1
 800b084:	e7e9      	b.n	800b05a <__kernel_rem_pio2f+0x2f6>
 800b086:	bf00      	nop
 800b088:	0800c154 	.word	0x0800c154
 800b08c:	0800c128 	.word	0x0800c128
 800b090:	2301      	movs	r3, #1
 800b092:	9a08      	ldr	r2, [sp, #32]
 800b094:	e7d2      	b.n	800b03c <__kernel_rem_pio2f+0x2d8>
 800b096:	9b05      	ldr	r3, [sp, #20]
 800b098:	f854 0904 	ldr.w	r0, [r4], #-4
 800b09c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800b0a0:	f7f5 f9f4 	bl	800048c <__aeabi_fmul>
 800b0a4:	4601      	mov	r1, r0
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7f5 fcd6 	bl	8000a58 <__addsf3>
 800b0ac:	f10a 0a01 	add.w	sl, sl, #1
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	e7e0      	b.n	800b076 <__kernel_rem_pio2f+0x312>
 800b0b4:	3d01      	subs	r5, #1
 800b0b6:	e76e      	b.n	800af96 <__kernel_rem_pio2f+0x232>
 800b0b8:	9b06      	ldr	r3, [sp, #24]
 800b0ba:	9a02      	ldr	r2, [sp, #8]
 800b0bc:	4648      	mov	r0, r9
 800b0be:	1a99      	subs	r1, r3, r2
 800b0c0:	f000 f9c2 	bl	800b448 <scalbnf>
 800b0c4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	f7f5 fe2f 	bl	8000d2c <__aeabi_fcmpge>
 800b0ce:	b300      	cbz	r0, 800b112 <__kernel_rem_pio2f+0x3ae>
 800b0d0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f7f5 f9d9 	bl	800048c <__aeabi_fmul>
 800b0da:	f7f5 fe3b 	bl	8000d54 <__aeabi_f2iz>
 800b0de:	f7f5 fd6f 	bl	8000bc0 <__aeabi_i2f>
 800b0e2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b0e6:	4681      	mov	r9, r0
 800b0e8:	f7f5 f9d0 	bl	800048c <__aeabi_fmul>
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f7f5 fcb0 	bl	8000a54 <__aeabi_fsub>
 800b0f4:	f7f5 fe2e 	bl	8000d54 <__aeabi_f2iz>
 800b0f8:	ab0a      	add	r3, sp, #40	; 0x28
 800b0fa:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b0fe:	4648      	mov	r0, r9
 800b100:	f7f5 fe28 	bl	8000d54 <__aeabi_f2iz>
 800b104:	f108 0501 	add.w	r5, r8, #1
 800b108:	ab0a      	add	r3, sp, #40	; 0x28
 800b10a:	3708      	adds	r7, #8
 800b10c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b110:	e748      	b.n	800afa4 <__kernel_rem_pio2f+0x240>
 800b112:	4628      	mov	r0, r5
 800b114:	f7f5 fe1e 	bl	8000d54 <__aeabi_f2iz>
 800b118:	ab0a      	add	r3, sp, #40	; 0x28
 800b11a:	4645      	mov	r5, r8
 800b11c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b120:	e740      	b.n	800afa4 <__kernel_rem_pio2f+0x240>
 800b122:	ab0a      	add	r3, sp, #40	; 0x28
 800b124:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b128:	f7f5 fd4a 	bl	8000bc0 <__aeabi_i2f>
 800b12c:	4649      	mov	r1, r9
 800b12e:	f7f5 f9ad 	bl	800048c <__aeabi_fmul>
 800b132:	4641      	mov	r1, r8
 800b134:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800b138:	4648      	mov	r0, r9
 800b13a:	f7f5 f9a7 	bl	800048c <__aeabi_fmul>
 800b13e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b142:	4681      	mov	r9, r0
 800b144:	e738      	b.n	800afb8 <__kernel_rem_pio2f+0x254>
 800b146:	f853 0b04 	ldr.w	r0, [r3], #4
 800b14a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800b14e:	9203      	str	r2, [sp, #12]
 800b150:	9302      	str	r3, [sp, #8]
 800b152:	f7f5 f99b 	bl	800048c <__aeabi_fmul>
 800b156:	4601      	mov	r1, r0
 800b158:	4638      	mov	r0, r7
 800b15a:	f7f5 fc7d 	bl	8000a58 <__addsf3>
 800b15e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b162:	4607      	mov	r7, r0
 800b164:	f108 0801 	add.w	r8, r8, #1
 800b168:	9901      	ldr	r1, [sp, #4]
 800b16a:	4588      	cmp	r8, r1
 800b16c:	dc01      	bgt.n	800b172 <__kernel_rem_pio2f+0x40e>
 800b16e:	45c2      	cmp	sl, r8
 800b170:	dae9      	bge.n	800b146 <__kernel_rem_pio2f+0x3e2>
 800b172:	ab5a      	add	r3, sp, #360	; 0x168
 800b174:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b178:	f843 7ca0 	str.w	r7, [r3, #-160]
 800b17c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b180:	f10a 0a01 	add.w	sl, sl, #1
 800b184:	e720      	b.n	800afc8 <__kernel_rem_pio2f+0x264>
 800b186:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b188:	2b02      	cmp	r3, #2
 800b18a:	dc07      	bgt.n	800b19c <__kernel_rem_pio2f+0x438>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	dc4d      	bgt.n	800b22c <__kernel_rem_pio2f+0x4c8>
 800b190:	d02e      	beq.n	800b1f0 <__kernel_rem_pio2f+0x48c>
 800b192:	f006 0007 	and.w	r0, r6, #7
 800b196:	b05b      	add	sp, #364	; 0x16c
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d1f7      	bne.n	800b192 <__kernel_rem_pio2f+0x42e>
 800b1a2:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800b1a6:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800b1aa:	46b8      	mov	r8, r7
 800b1ac:	46aa      	mov	sl, r5
 800b1ae:	f1ba 0f00 	cmp.w	sl, #0
 800b1b2:	dc48      	bgt.n	800b246 <__kernel_rem_pio2f+0x4e2>
 800b1b4:	46a9      	mov	r9, r5
 800b1b6:	f1b9 0f01 	cmp.w	r9, #1
 800b1ba:	dc5f      	bgt.n	800b27c <__kernel_rem_pio2f+0x518>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	2d01      	cmp	r5, #1
 800b1c0:	dc75      	bgt.n	800b2ae <__kernel_rem_pio2f+0x54a>
 800b1c2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b1c4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b1c6:	2c00      	cmp	r4, #0
 800b1c8:	d177      	bne.n	800b2ba <__kernel_rem_pio2f+0x556>
 800b1ca:	9900      	ldr	r1, [sp, #0]
 800b1cc:	600a      	str	r2, [r1, #0]
 800b1ce:	460a      	mov	r2, r1
 800b1d0:	604b      	str	r3, [r1, #4]
 800b1d2:	6090      	str	r0, [r2, #8]
 800b1d4:	e7dd      	b.n	800b192 <__kernel_rem_pio2f+0x42e>
 800b1d6:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800b1da:	f7f5 fc3d 	bl	8000a58 <__addsf3>
 800b1de:	3d01      	subs	r5, #1
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	daf8      	bge.n	800b1d6 <__kernel_rem_pio2f+0x472>
 800b1e4:	b10c      	cbz	r4, 800b1ea <__kernel_rem_pio2f+0x486>
 800b1e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	6018      	str	r0, [r3, #0]
 800b1ee:	e7d0      	b.n	800b192 <__kernel_rem_pio2f+0x42e>
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	af32      	add	r7, sp, #200	; 0xc8
 800b1f4:	e7f4      	b.n	800b1e0 <__kernel_rem_pio2f+0x47c>
 800b1f6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b1fa:	f7f5 fc2d 	bl	8000a58 <__addsf3>
 800b1fe:	3f01      	subs	r7, #1
 800b200:	2f00      	cmp	r7, #0
 800b202:	daf8      	bge.n	800b1f6 <__kernel_rem_pio2f+0x492>
 800b204:	b1bc      	cbz	r4, 800b236 <__kernel_rem_pio2f+0x4d2>
 800b206:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b20a:	9a00      	ldr	r2, [sp, #0]
 800b20c:	4601      	mov	r1, r0
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800b212:	f7f5 fc1f 	bl	8000a54 <__aeabi_fsub>
 800b216:	2701      	movs	r7, #1
 800b218:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b21c:	42bd      	cmp	r5, r7
 800b21e:	da0c      	bge.n	800b23a <__kernel_rem_pio2f+0x4d6>
 800b220:	b10c      	cbz	r4, 800b226 <__kernel_rem_pio2f+0x4c2>
 800b222:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	6058      	str	r0, [r3, #4]
 800b22a:	e7b2      	b.n	800b192 <__kernel_rem_pio2f+0x42e>
 800b22c:	462f      	mov	r7, r5
 800b22e:	2000      	movs	r0, #0
 800b230:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b234:	e7e4      	b.n	800b200 <__kernel_rem_pio2f+0x49c>
 800b236:	4603      	mov	r3, r0
 800b238:	e7e7      	b.n	800b20a <__kernel_rem_pio2f+0x4a6>
 800b23a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b23e:	f7f5 fc0b 	bl	8000a58 <__addsf3>
 800b242:	3701      	adds	r7, #1
 800b244:	e7ea      	b.n	800b21c <__kernel_rem_pio2f+0x4b8>
 800b246:	f8d8 3000 	ldr.w	r3, [r8]
 800b24a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	9201      	str	r2, [sp, #4]
 800b256:	f7f5 fbff 	bl	8000a58 <__addsf3>
 800b25a:	9a01      	ldr	r2, [sp, #4]
 800b25c:	4601      	mov	r1, r0
 800b25e:	4681      	mov	r9, r0
 800b260:	4610      	mov	r0, r2
 800b262:	f7f5 fbf7 	bl	8000a54 <__aeabi_fsub>
 800b266:	9b02      	ldr	r3, [sp, #8]
 800b268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b26c:	4619      	mov	r1, r3
 800b26e:	f7f5 fbf3 	bl	8000a58 <__addsf3>
 800b272:	f848 0904 	str.w	r0, [r8], #-4
 800b276:	f8c8 9000 	str.w	r9, [r8]
 800b27a:	e798      	b.n	800b1ae <__kernel_rem_pio2f+0x44a>
 800b27c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b280:	f8d7 a000 	ldr.w	sl, [r7]
 800b284:	4618      	mov	r0, r3
 800b286:	4651      	mov	r1, sl
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	f7f5 fbe5 	bl	8000a58 <__addsf3>
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	4601      	mov	r1, r0
 800b292:	4680      	mov	r8, r0
 800b294:	4618      	mov	r0, r3
 800b296:	f7f5 fbdd 	bl	8000a54 <__aeabi_fsub>
 800b29a:	4651      	mov	r1, sl
 800b29c:	f7f5 fbdc 	bl	8000a58 <__addsf3>
 800b2a0:	f847 0904 	str.w	r0, [r7], #-4
 800b2a4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b2a8:	f8c7 8000 	str.w	r8, [r7]
 800b2ac:	e783      	b.n	800b1b6 <__kernel_rem_pio2f+0x452>
 800b2ae:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800b2b2:	f7f5 fbd1 	bl	8000a58 <__addsf3>
 800b2b6:	3d01      	subs	r5, #1
 800b2b8:	e781      	b.n	800b1be <__kernel_rem_pio2f+0x45a>
 800b2ba:	9900      	ldr	r1, [sp, #0]
 800b2bc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800b2c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2c4:	600a      	str	r2, [r1, #0]
 800b2c6:	604b      	str	r3, [r1, #4]
 800b2c8:	460a      	mov	r2, r1
 800b2ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2ce:	e780      	b.n	800b1d2 <__kernel_rem_pio2f+0x46e>

0800b2d0 <__kernel_sinf>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b2d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b2dc:	4604      	mov	r4, r0
 800b2de:	460f      	mov	r7, r1
 800b2e0:	4691      	mov	r9, r2
 800b2e2:	da03      	bge.n	800b2ec <__kernel_sinf+0x1c>
 800b2e4:	f7f5 fd36 	bl	8000d54 <__aeabi_f2iz>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d035      	beq.n	800b358 <__kernel_sinf+0x88>
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7f5 f8cc 	bl	800048c <__aeabi_fmul>
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f7f5 f8c7 	bl	800048c <__aeabi_fmul>
 800b2fe:	4929      	ldr	r1, [pc, #164]	; (800b3a4 <__kernel_sinf+0xd4>)
 800b300:	4606      	mov	r6, r0
 800b302:	4628      	mov	r0, r5
 800b304:	f7f5 f8c2 	bl	800048c <__aeabi_fmul>
 800b308:	4927      	ldr	r1, [pc, #156]	; (800b3a8 <__kernel_sinf+0xd8>)
 800b30a:	f7f5 fba3 	bl	8000a54 <__aeabi_fsub>
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f5 f8bc 	bl	800048c <__aeabi_fmul>
 800b314:	4925      	ldr	r1, [pc, #148]	; (800b3ac <__kernel_sinf+0xdc>)
 800b316:	f7f5 fb9f 	bl	8000a58 <__addsf3>
 800b31a:	4629      	mov	r1, r5
 800b31c:	f7f5 f8b6 	bl	800048c <__aeabi_fmul>
 800b320:	4923      	ldr	r1, [pc, #140]	; (800b3b0 <__kernel_sinf+0xe0>)
 800b322:	f7f5 fb97 	bl	8000a54 <__aeabi_fsub>
 800b326:	4629      	mov	r1, r5
 800b328:	f7f5 f8b0 	bl	800048c <__aeabi_fmul>
 800b32c:	4921      	ldr	r1, [pc, #132]	; (800b3b4 <__kernel_sinf+0xe4>)
 800b32e:	f7f5 fb93 	bl	8000a58 <__addsf3>
 800b332:	4680      	mov	r8, r0
 800b334:	f1b9 0f00 	cmp.w	r9, #0
 800b338:	d111      	bne.n	800b35e <__kernel_sinf+0x8e>
 800b33a:	4601      	mov	r1, r0
 800b33c:	4628      	mov	r0, r5
 800b33e:	f7f5 f8a5 	bl	800048c <__aeabi_fmul>
 800b342:	491d      	ldr	r1, [pc, #116]	; (800b3b8 <__kernel_sinf+0xe8>)
 800b344:	f7f5 fb86 	bl	8000a54 <__aeabi_fsub>
 800b348:	4631      	mov	r1, r6
 800b34a:	f7f5 f89f 	bl	800048c <__aeabi_fmul>
 800b34e:	4601      	mov	r1, r0
 800b350:	4620      	mov	r0, r4
 800b352:	f7f5 fb81 	bl	8000a58 <__addsf3>
 800b356:	4604      	mov	r4, r0
 800b358:	4620      	mov	r0, r4
 800b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b362:	4638      	mov	r0, r7
 800b364:	f7f5 f892 	bl	800048c <__aeabi_fmul>
 800b368:	4641      	mov	r1, r8
 800b36a:	4681      	mov	r9, r0
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7f5 f88d 	bl	800048c <__aeabi_fmul>
 800b372:	4601      	mov	r1, r0
 800b374:	4648      	mov	r0, r9
 800b376:	f7f5 fb6d 	bl	8000a54 <__aeabi_fsub>
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f5 f886 	bl	800048c <__aeabi_fmul>
 800b380:	4639      	mov	r1, r7
 800b382:	f7f5 fb67 	bl	8000a54 <__aeabi_fsub>
 800b386:	490c      	ldr	r1, [pc, #48]	; (800b3b8 <__kernel_sinf+0xe8>)
 800b388:	4605      	mov	r5, r0
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7f5 f87e 	bl	800048c <__aeabi_fmul>
 800b390:	4601      	mov	r1, r0
 800b392:	4628      	mov	r0, r5
 800b394:	f7f5 fb60 	bl	8000a58 <__addsf3>
 800b398:	4601      	mov	r1, r0
 800b39a:	4620      	mov	r0, r4
 800b39c:	f7f5 fb5a 	bl	8000a54 <__aeabi_fsub>
 800b3a0:	e7d9      	b.n	800b356 <__kernel_sinf+0x86>
 800b3a2:	bf00      	nop
 800b3a4:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3a8:	32d72f34 	.word	0x32d72f34
 800b3ac:	3638ef1b 	.word	0x3638ef1b
 800b3b0:	39500d01 	.word	0x39500d01
 800b3b4:	3c088889 	.word	0x3c088889
 800b3b8:	3e2aaaab 	.word	0x3e2aaaab

0800b3bc <fabsf>:
 800b3bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <floorf>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800b3ca:	3d7f      	subs	r5, #127	; 0x7f
 800b3cc:	2d16      	cmp	r5, #22
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b3d6:	dc26      	bgt.n	800b426 <floorf+0x62>
 800b3d8:	2d00      	cmp	r5, #0
 800b3da:	da0e      	bge.n	800b3fa <floorf+0x36>
 800b3dc:	4917      	ldr	r1, [pc, #92]	; (800b43c <floorf+0x78>)
 800b3de:	f7f5 fb3b 	bl	8000a58 <__addsf3>
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f7f5 fcac 	bl	8000d40 <__aeabi_fcmpgt>
 800b3e8:	b128      	cbz	r0, 800b3f6 <floorf+0x32>
 800b3ea:	2c00      	cmp	r4, #0
 800b3ec:	da23      	bge.n	800b436 <floorf+0x72>
 800b3ee:	4b14      	ldr	r3, [pc, #80]	; (800b440 <floorf+0x7c>)
 800b3f0:	2e00      	cmp	r6, #0
 800b3f2:	bf18      	it	ne
 800b3f4:	461c      	movne	r4, r3
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	e01b      	b.n	800b432 <floorf+0x6e>
 800b3fa:	4e12      	ldr	r6, [pc, #72]	; (800b444 <floorf+0x80>)
 800b3fc:	412e      	asrs	r6, r5
 800b3fe:	4230      	tst	r0, r6
 800b400:	d017      	beq.n	800b432 <floorf+0x6e>
 800b402:	490e      	ldr	r1, [pc, #56]	; (800b43c <floorf+0x78>)
 800b404:	f7f5 fb28 	bl	8000a58 <__addsf3>
 800b408:	2100      	movs	r1, #0
 800b40a:	f7f5 fc99 	bl	8000d40 <__aeabi_fcmpgt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0f1      	beq.n	800b3f6 <floorf+0x32>
 800b412:	2c00      	cmp	r4, #0
 800b414:	bfbe      	ittt	lt
 800b416:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b41a:	fa43 f505 	asrlt.w	r5, r3, r5
 800b41e:	1964      	addlt	r4, r4, r5
 800b420:	ea24 0406 	bic.w	r4, r4, r6
 800b424:	e7e7      	b.n	800b3f6 <floorf+0x32>
 800b426:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b42a:	d302      	bcc.n	800b432 <floorf+0x6e>
 800b42c:	f7f5 fb14 	bl	8000a58 <__addsf3>
 800b430:	4601      	mov	r1, r0
 800b432:	4608      	mov	r0, r1
 800b434:	bd70      	pop	{r4, r5, r6, pc}
 800b436:	2400      	movs	r4, #0
 800b438:	e7dd      	b.n	800b3f6 <floorf+0x32>
 800b43a:	bf00      	nop
 800b43c:	7149f2ca 	.word	0x7149f2ca
 800b440:	bf800000 	.word	0xbf800000
 800b444:	007fffff 	.word	0x007fffff

0800b448 <scalbnf>:
 800b448:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4603      	mov	r3, r0
 800b450:	460d      	mov	r5, r1
 800b452:	4604      	mov	r4, r0
 800b454:	d02a      	beq.n	800b4ac <scalbnf+0x64>
 800b456:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b45a:	d304      	bcc.n	800b466 <scalbnf+0x1e>
 800b45c:	4601      	mov	r1, r0
 800b45e:	f7f5 fafb 	bl	8000a58 <__addsf3>
 800b462:	4603      	mov	r3, r0
 800b464:	e022      	b.n	800b4ac <scalbnf+0x64>
 800b466:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800b46a:	d117      	bne.n	800b49c <scalbnf+0x54>
 800b46c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b470:	f7f5 f80c 	bl	800048c <__aeabi_fmul>
 800b474:	4a17      	ldr	r2, [pc, #92]	; (800b4d4 <scalbnf+0x8c>)
 800b476:	4603      	mov	r3, r0
 800b478:	4295      	cmp	r5, r2
 800b47a:	db0b      	blt.n	800b494 <scalbnf+0x4c>
 800b47c:	4604      	mov	r4, r0
 800b47e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b482:	3a19      	subs	r2, #25
 800b484:	442a      	add	r2, r5
 800b486:	2afe      	cmp	r2, #254	; 0xfe
 800b488:	dd0a      	ble.n	800b4a0 <scalbnf+0x58>
 800b48a:	4913      	ldr	r1, [pc, #76]	; (800b4d8 <scalbnf+0x90>)
 800b48c:	4618      	mov	r0, r3
 800b48e:	f361 001e 	bfi	r0, r1, #0, #31
 800b492:	e000      	b.n	800b496 <scalbnf+0x4e>
 800b494:	4911      	ldr	r1, [pc, #68]	; (800b4dc <scalbnf+0x94>)
 800b496:	f7f4 fff9 	bl	800048c <__aeabi_fmul>
 800b49a:	e7e2      	b.n	800b462 <scalbnf+0x1a>
 800b49c:	0dd2      	lsrs	r2, r2, #23
 800b49e:	e7f1      	b.n	800b484 <scalbnf+0x3c>
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	dd05      	ble.n	800b4b0 <scalbnf+0x68>
 800b4a4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800b4a8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	f112 0f16 	cmn.w	r2, #22
 800b4b4:	da05      	bge.n	800b4c2 <scalbnf+0x7a>
 800b4b6:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b4ba:	4295      	cmp	r5, r2
 800b4bc:	dce5      	bgt.n	800b48a <scalbnf+0x42>
 800b4be:	4907      	ldr	r1, [pc, #28]	; (800b4dc <scalbnf+0x94>)
 800b4c0:	e7e4      	b.n	800b48c <scalbnf+0x44>
 800b4c2:	3219      	adds	r2, #25
 800b4c4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800b4c8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800b4cc:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800b4d0:	e7e1      	b.n	800b496 <scalbnf+0x4e>
 800b4d2:	bf00      	nop
 800b4d4:	ffff3cb0 	.word	0xffff3cb0
 800b4d8:	7149f2ca 	.word	0x7149f2ca
 800b4dc:	0da24260 	.word	0x0da24260

0800b4e0 <_init>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	bf00      	nop
 800b4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e6:	bc08      	pop	{r3}
 800b4e8:	469e      	mov	lr, r3
 800b4ea:	4770      	bx	lr

0800b4ec <_fini>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr
